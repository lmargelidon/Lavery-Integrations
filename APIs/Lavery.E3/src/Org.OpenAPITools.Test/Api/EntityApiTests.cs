/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing EntityApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EntityApiTests
    {
        private EntityApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EntityApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EntityApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' EntityApi
            //Assert.IsInstanceOf(typeof(EntityApi), instance);
        }

        
        /// <summary>
        /// Test EntityCloneEntity
        /// </summary>
        [Test]
        public void EntityCloneEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIEntityModelsEntityCloneRequest e3EAPIEntityModelsEntityCloneRequest = null;
            //var response = instance.EntityCloneEntity(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityCloneRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityCloneResponse), response, "response is E3EAPIEntityModelsEntityCloneResponse");
        }
        
        /// <summary>
        /// Test EntityCreateOrganization
        /// </summary>
        [Test]
        public void EntityCreateOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = null;
            //var response = instance.EntityCreateOrganization(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityCreateResponse), response, "response is E3EAPIEntityModelsEntityCreateResponse");
        }
        
        /// <summary>
        /// Test EntityCreatePerson
        /// </summary>
        [Test]
        public void EntityCreatePersonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = null;
            //var response = instance.EntityCreatePerson(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityCreateResponse), response, "response is E3EAPIEntityModelsEntityCreateResponse");
        }
        
        /// <summary>
        /// Test EntityDeleteEntity
        /// </summary>
        [Test]
        public void EntityDeleteEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIEntityModelsEntityDeleteRequest e3EAPIEntityModelsEntityDeleteRequest = null;
            //var response = instance.EntityDeleteEntity(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityDeleteRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityDeleteResponse), response, "response is E3EAPIEntityModelsEntityDeleteResponse");
        }
        
        /// <summary>
        /// Test EntityGetAllEntities
        /// </summary>
        [Test]
        public void EntityGetAllEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> entityId = null;
            //int? entityIndex = null;
            //string displayName = null;
            //List<string> advancedFilterChildObjectsToInclude = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.EntityGetAllEntities(entityId, entityIndex, displayName, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityGetRequest), response, "response is E3EAPIEntityModelsEntityGetRequest");
        }
        
        /// <summary>
        /// Test EntityGetNewOrganization
        /// </summary>
        [Test]
        public void EntityGetNewOrganizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.EntityGetNewOrganization(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityTemplateResponse), response, "response is E3EAPIEntityModelsEntityTemplateResponse");
        }
        
        /// <summary>
        /// Test EntityGetNewPerson
        /// </summary>
        [Test]
        public void EntityGetNewPersonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.EntityGetNewPerson(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityTemplateResponse), response, "response is E3EAPIEntityModelsEntityTemplateResponse");
        }
        
        /// <summary>
        /// Test EntityGetOrganizationSchema
        /// </summary>
        [Test]
        public void EntityGetOrganizationSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.EntityGetOrganizationSchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityGetSchemaResponse), response, "response is E3EAPIEntityModelsEntityGetSchemaResponse");
        }
        
        /// <summary>
        /// Test EntityGetOrganizations
        /// </summary>
        [Test]
        public void EntityGetOrganizationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> entityId = null;
            //int? entityIndex = null;
            //string displayName = null;
            //List<string> advancedFilterChildObjectsToInclude = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.EntityGetOrganizations(entityId, entityIndex, displayName, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityGetRequest), response, "response is E3EAPIEntityModelsEntityGetRequest");
        }
        
        /// <summary>
        /// Test EntityGetPersonSchema
        /// </summary>
        [Test]
        public void EntityGetPersonSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.EntityGetPersonSchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityGetSchemaResponse), response, "response is E3EAPIEntityModelsEntityGetSchemaResponse");
        }
        
        /// <summary>
        /// Test EntityGetPersons
        /// </summary>
        [Test]
        public void EntityGetPersonsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> entityId = null;
            //int? entityIndex = null;
            //string displayName = null;
            //List<string> advancedFilterChildObjectsToInclude = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.EntityGetPersons(entityId, entityIndex, displayName, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityGetRequest), response, "response is E3EAPIEntityModelsEntityGetRequest");
        }
        
        /// <summary>
        /// Test EntityModelFromEntities
        /// </summary>
        [Test]
        public void EntityModelFromEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.EntityModelFromEntities(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityGetResponse), response, "response is E3EAPIEntityModelsEntityGetResponse");
        }
        
        /// <summary>
        /// Test EntityUpdateEntity
        /// </summary>
        [Test]
        public void EntityUpdateEntityTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIEntityModelsEntityUpdateRequest e3EAPIEntityModelsEntityUpdateRequest = null;
            //var response = instance.EntityUpdateEntity(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIEntityModelsEntityUpdateResponse), response, "response is E3EAPIEntityModelsEntityUpdateResponse");
        }
        
    }

}
