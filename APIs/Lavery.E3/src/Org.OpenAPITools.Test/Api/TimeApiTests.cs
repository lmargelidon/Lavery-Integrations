/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing TimeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TimeApiTests
    {
        private TimeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TimeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TimeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TimeApi
            //Assert.IsInstanceOf(typeof(TimeApi), instance);
        }

        
        /// <summary>
        /// Test TimeAddPendingTimecard
        /// </summary>
        [Test]
        public void TimeAddPendingTimecardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeAddPendingTimecard(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardAddResponse), response, "response is E3EAPITimeModelsTimecardAddResponse");
        }
        
        /// <summary>
        /// Test TimeApplyTimeCaptureModel
        /// </summary>
        [Test]
        public void TimeApplyTimeCaptureModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecaptureModelApplyRequest e3EAPITimeModelsTimecaptureModelApplyRequest = null;
            //var response = instance.TimeApplyTimeCaptureModel(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecaptureModelApplyRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIDataObjectModelModelsDataObjectModelApplyResponse), response, "response is E3EAPIDataObjectModelModelsDataObjectModelApplyResponse");
        }
        
        /// <summary>
        /// Test TimeCleanupPendingTimecards
        /// </summary>
        [Test]
        public void TimeCleanupPendingTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardCleanupRequest e3EAPITimeModelsTimecardCleanupRequest = null;
            //var response = instance.TimeCleanupPendingTimecards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCleanupRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardCleanupResponse), response, "response is E3EAPITimeModelsTimecardCleanupResponse");
        }
        
        /// <summary>
        /// Test TimeClearTimecapturePostExceptions
        /// </summary>
        [Test]
        public void TimeClearTimecapturePostExceptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardClearRequest e3EAPITimeModelsTimecardClearRequest = null;
            //var response = instance.TimeClearTimecapturePostExceptions(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardClearRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardClearResponse), response, "response is E3EAPITimeModelsTimecardClearResponse");
        }
        
        /// <summary>
        /// Test TimeClonePendingTimecards
        /// </summary>
        [Test]
        public void TimeClonePendingTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = null;
            //var response = instance.TimeClonePendingTimecards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardCloneResponse), response, "response is E3EAPITimeModelsTimecardCloneResponse");
        }
        
        /// <summary>
        /// Test TimeClonePostedTimecards
        /// </summary>
        [Test]
        public void TimeClonePostedTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = null;
            //var response = instance.TimeClonePostedTimecards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardCloneResponse), response, "response is E3EAPITimeModelsTimecardCloneResponse");
        }
        
        /// <summary>
        /// Test TimeClonePostedTimecardsAsPendingTimecards
        /// </summary>
        [Test]
        public void TimeClonePostedTimecardsAsPendingTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = null;
            //var response = instance.TimeClonePostedTimecardsAsPendingTimecards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardCloneResponse), response, "response is E3EAPITimeModelsTimecardCloneResponse");
        }
        
        /// <summary>
        /// Test TimeCloneTimecaptureCard
        /// </summary>
        [Test]
        public void TimeCloneTimecaptureCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = null;
            //var response = instance.TimeCloneTimecaptureCard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardCloneResponse), response, "response is E3EAPITimeModelsTimecardCloneResponse");
        }
        
        /// <summary>
        /// Test TimeCreatePendingTimecard
        /// </summary>
        [Test]
        public void TimeCreatePendingTimecardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = null;
            //var response = instance.TimeCreatePendingTimecard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardCreateResponse), response, "response is E3EAPITimeModelsTimecardCreateResponse");
        }
        
        /// <summary>
        /// Test TimeCreatePostedTimecard
        /// </summary>
        [Test]
        public void TimeCreatePostedTimecardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = null;
            //var response = instance.TimeCreatePostedTimecard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardCreateResponse), response, "response is E3EAPITimeModelsTimecardCreateResponse");
        }
        
        /// <summary>
        /// Test TimeCreateTimeCaptureCard
        /// </summary>
        [Test]
        public void TimeCreateTimeCaptureCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = null;
            //var response = instance.TimeCreateTimeCaptureCard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardCreateResponse), response, "response is E3EAPITimeModelsTimecardCreateResponse");
        }
        
        /// <summary>
        /// Test TimeCreateTimeCaptureModel
        /// </summary>
        [Test]
        public void TimeCreateTimeCaptureModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIDataObjectModelModelsDataObjectModelCreateRequest e3EAPIDataObjectModelModelsDataObjectModelCreateRequest = null;
            //var response = instance.TimeCreateTimeCaptureModel(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIDataObjectModelModelsDataObjectModelCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIDataObjectModelModelsDataObjectModelCreateResponse), response, "response is E3EAPIDataObjectModelModelsDataObjectModelCreateResponse");
        }
        
        /// <summary>
        /// Test TimeCreateTimecaptureCardFromPosted
        /// </summary>
        [Test]
        public void TimeCreateTimecaptureCardFromPostedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = null;
            //var response = instance.TimeCreateTimecaptureCardFromPosted(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardCloneResponse), response, "response is E3EAPITimeModelsTimecardCloneResponse");
        }
        
        /// <summary>
        /// Test TimeDeletePendingTimecards
        /// </summary>
        [Test]
        public void TimeDeletePendingTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardDeleteRequest e3EAPITimeModelsTimecardDeleteRequest = null;
            //var response = instance.TimeDeletePendingTimecards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardDeleteRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardDeleteResponse), response, "response is E3EAPITimeModelsTimecardDeleteResponse");
        }
        
        /// <summary>
        /// Test TimeDeleteTimeCaptureModel
        /// </summary>
        [Test]
        public void TimeDeleteTimeCaptureModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest = null;
            //var response = instance.TimeDeleteTimeCaptureModel(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse), response, "response is E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse");
        }
        
        /// <summary>
        /// Test TimeGetActiveTimers
        /// </summary>
        [Test]
        public void TimeGetActiveTimersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? index = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //List<Guid> itemIds = null;
            //List<string> attributesToInclude = null;
            //string filterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> filterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? filterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetActiveTimers(index, startDate, endDate, timekeeperIndex, timekeeperNumber, timekeeperID, itemIds, attributesToInclude, filterXOQL, filterPredicates, filterOperator, filterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsActiveTimersResponse), response, "response is E3EAPITimeModelsActiveTimersResponse");
        }
        
        /// <summary>
        /// Test TimeGetCalendarReport
        /// </summary>
        [Test]
        public void TimeGetCalendarReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int timekeeper = null;
            //DateTime startDate = null;
            //DateTime endDate = null;
            //int? matter = null;
            //int? _client = null;
            //bool? includeHours = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetCalendarReport(timekeeper, startDate, endDate, matter, _client, includeHours, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsCalendarReportGetResponse), response, "response is E3EAPITimeModelsCalendarReportGetResponse");
        }
        
        /// <summary>
        /// Test TimeGetNewPendingTimecard
        /// </summary>
        [Test]
        public void TimeGetNewPendingTimecardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetNewPendingTimecard(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardTemplateResponse), response, "response is E3EAPITimeModelsTimecardTemplateResponse");
        }
        
        /// <summary>
        /// Test TimeGetNewPostedTimecard
        /// </summary>
        [Test]
        public void TimeGetNewPostedTimecardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetNewPostedTimecard(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardTemplateResponse), response, "response is E3EAPITimeModelsTimecardTemplateResponse");
        }
        
        /// <summary>
        /// Test TimeGetNewTimeCaptureCard
        /// </summary>
        [Test]
        public void TimeGetNewTimeCaptureCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetNewTimeCaptureCard(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardTemplateResponse), response, "response is E3EAPITimeModelsTimecardTemplateResponse");
        }
        
        /// <summary>
        /// Test TimeGetPendingTimecardSchema
        /// </summary>
        [Test]
        public void TimeGetPendingTimecardSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetPendingTimecardSchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetSchemaResponse), response, "response is E3EAPITimeModelsTimecardGetSchemaResponse");
        }
        
        /// <summary>
        /// Test TimeGetPendingTimecards
        /// </summary>
        [Test]
        public void TimeGetPendingTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //List<Guid> timeCardPendingID = null;
            //int? timePendIndex = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetPendingTimecards(startDate, endDate, timeCardPendingID, timePendIndex, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetResponse), response, "response is E3EAPITimeModelsTimecardGetResponse");
        }
        
        /// <summary>
        /// Test TimeGetPostedTimecardSchema
        /// </summary>
        [Test]
        public void TimeGetPostedTimecardSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetPostedTimecardSchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetSchemaResponse), response, "response is E3EAPITimeModelsTimecardGetSchemaResponse");
        }
        
        /// <summary>
        /// Test TimeGetPostedTimecards
        /// </summary>
        [Test]
        public void TimeGetPostedTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //List<Guid> timecardID = null;
            //int? timeIndex = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetPostedTimecards(startDate, endDate, timecardID, timeIndex, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetResponse), response, "response is E3EAPITimeModelsTimecardGetResponse");
        }
        
        /// <summary>
        /// Test TimeGetTimeCaptureAllCards
        /// </summary>
        [Test]
        public void TimeGetTimeCaptureAllCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? index = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //List<Guid> itemIds = null;
            //List<string> attributesToInclude = null;
            //string filterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> filterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? filterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetTimeCaptureAllCards(index, startDate, endDate, timekeeperIndex, timekeeperNumber, timekeeperID, itemIds, attributesToInclude, filterXOQL, filterPredicates, filterOperator, filterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetAllResponse), response, "response is E3EAPITimeModelsTimecardGetAllResponse");
        }
        
        /// <summary>
        /// Test TimeGetTimeCaptureModels
        /// </summary>
        [Test]
        public void TimeGetTimeCaptureModelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetTimeCaptureModels(modelId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIDataObjectModelModelsDataObjectModelGetResponse), response, "response is E3EAPIDataObjectModelModelsDataObjectModelGetResponse");
        }
        
        /// <summary>
        /// Test TimeGetTimeCapturePendingCards
        /// </summary>
        [Test]
        public void TimeGetTimeCapturePendingCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //List<Guid> timeCardPendingID = null;
            //int? timePendIndex = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetTimeCapturePendingCards(startDate, endDate, timeCardPendingID, timePendIndex, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetResponse), response, "response is E3EAPITimeModelsTimecardGetResponse");
        }
        
        /// <summary>
        /// Test TimeGetTimecards
        /// </summary>
        [Test]
        public void TimeGetTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? index = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //List<Guid> itemIds = null;
            //List<string> attributesToInclude = null;
            //string filterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> filterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? filterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetTimecards(index, startDate, endDate, timekeeperIndex, timekeeperNumber, timekeeperID, itemIds, attributesToInclude, filterXOQL, filterPredicates, filterOperator, filterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetAllResponse), response, "response is E3EAPITimeModelsTimecardGetAllResponse");
        }
        
        /// <summary>
        /// Test TimeGetTimecardsGroupedByDay
        /// </summary>
        [Test]
        public void TimeGetTimecardsGroupedByDayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime startDate = null;
            //DateTime endDate = null;
            //int? lastDays = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //int? mattIndex = null;
            //int? clientIndex = null;
            //List<string> attributesToInclude = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeGetTimecardsGroupedByDay(startDate, endDate, lastDays, timekeeperIndex, timekeeperNumber, timekeeperID, mattIndex, clientIndex, attributesToInclude, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse), response, "response is E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse");
        }
        
        /// <summary>
        /// Test TimeModelFromPendingTimecards
        /// </summary>
        [Test]
        public void TimeModelFromPendingTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeModelFromPendingTimecards(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetResponse), response, "response is E3EAPITimeModelsTimecardGetResponse");
        }
        
        /// <summary>
        /// Test TimeModelFromPostedTimecards
        /// </summary>
        [Test]
        public void TimeModelFromPostedTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeModelFromPostedTimecards(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIDataObjectModelsDataObjectGetResponse), response, "response is E3EAPIDataObjectModelsDataObjectGetResponse");
        }
        
        /// <summary>
        /// Test TimePostPendingTimecards
        /// </summary>
        [Test]
        public void TimePostPendingTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardPostRequest e3EAPITimeModelsTimecardPostRequest = null;
            //var response = instance.TimePostPendingTimecards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardPostRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardPostResponse), response, "response is E3EAPITimeModelsTimecardPostResponse");
        }
        
        /// <summary>
        /// Test TimeQueryTimeCaptureAllCards
        /// </summary>
        [Test]
        public void TimeQueryTimeCaptureAllCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = null;
            //var response = instance.TimeQueryTimeCaptureAllCards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardGetRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetAllResponse), response, "response is E3EAPITimeModelsTimecardGetAllResponse");
        }
        
        /// <summary>
        /// Test TimeQueryTimeCapturePendingCards
        /// </summary>
        [Test]
        public void TimeQueryTimeCapturePendingCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = null;
            //var response = instance.TimeQueryTimeCapturePendingCards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardGetRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardGetResponse), response, "response is E3EAPITimeModelsTimecardGetResponse");
        }
        
        /// <summary>
        /// Test TimeSpellcheckPendingTimecards
        /// </summary>
        [Test]
        public void TimeSpellcheckPendingTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimeSpellcheckPendingTimecards(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardSpellCheckResponse), response, "response is E3EAPITimeModelsTimecardSpellCheckResponse");
        }
        
        /// <summary>
        /// Test TimeStartStopTimer
        /// </summary>
        [Test]
        public void TimeStartStopTimerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsStartStopTimerRequest e3EAPITimeModelsStartStopTimerRequest = null;
            //var response = instance.TimeStartStopTimer(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsStartStopTimerRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsStartStopTimerResponse), response, "response is E3EAPITimeModelsStartStopTimerResponse");
        }
        
        /// <summary>
        /// Test TimeUpdatePendingTimecard
        /// </summary>
        [Test]
        public void TimeUpdatePendingTimecardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = null;
            //var response = instance.TimeUpdatePendingTimecard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardUpdateResponse), response, "response is E3EAPITimeModelsTimecardUpdateResponse");
        }
        
        /// <summary>
        /// Test TimeUpdatePostedTimecard
        /// </summary>
        [Test]
        public void TimeUpdatePostedTimecardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = null;
            //var response = instance.TimeUpdatePostedTimecard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardUpdateResponse), response, "response is E3EAPITimeModelsTimecardUpdateResponse");
        }
        
        /// <summary>
        /// Test TimeUpdateTimeCaptureCard
        /// </summary>
        [Test]
        public void TimeUpdateTimeCaptureCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = null;
            //var response = instance.TimeUpdateTimeCaptureCard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardUpdateResponse), response, "response is E3EAPITimeModelsTimecardUpdateResponse");
        }
        
        /// <summary>
        /// Test TimeUpdateTimeCaptureModel
        /// </summary>
        [Test]
        public void TimeUpdateTimeCaptureModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest = null;
            //var response = instance.TimeUpdateTimeCaptureModel(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse), response, "response is E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse");
        }
        
        /// <summary>
        /// Test TimeValidatePendingTimecards
        /// </summary>
        [Test]
        public void TimeValidatePendingTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = null;
            //var response = instance.TimeValidatePendingTimecards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardValidateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardValidateResponse), response, "response is E3EAPITimeModelsTimecardValidateResponse");
        }
        
        /// <summary>
        /// Test TimeValidatePostedTimecards
        /// </summary>
        [Test]
        public void TimeValidatePostedTimecardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = null;
            //var response = instance.TimeValidatePostedTimecards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardValidateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardValidateResponse), response, "response is E3EAPITimeModelsTimecardValidateResponse");
        }
        
        /// <summary>
        /// Test TimeValidateTimecaptureCard
        /// </summary>
        [Test]
        public void TimeValidateTimecaptureCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = null;
            //var response = instance.TimeValidateTimecaptureCard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardValidateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimeModelsTimecardValidateResponse), response, "response is E3EAPITimeModelsTimecardValidateResponse");
        }
        
    }

}
