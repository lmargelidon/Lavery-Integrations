/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ClientApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ClientApiTests
    {
        private ClientApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ClientApi();
            instance.Configuration.ApiClient.RestClient.Authenticator = new RestSharp.Authenticators.NtlmAuthenticator(System.Net.CredentialCache.DefaultNetworkCredentials);


        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ClientApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ClientApi
           Assert.IsInstanceOf(typeof(ClientApi), instance);
        }

        
        /// <summary>
        /// Test ClientCreateClient
        /// </summary>
        [Test]
        public void ClientCreateClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIClientModelsClientCreateRequest e3EAPIClientModelsClientCreateRequest = null;
            //var response = instance.ClientCreateClient(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIClientModelsClientCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIClientModelsClientCreateResponse), response, "response is E3EAPIClientModelsClientCreateResponse");
        }
        
        /// <summary>
        /// Test ClientGetClientSchema
        /// </summary>
        [Test]
        public void ClientGetClientSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.ClientGetClientSchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIClientModelsClientGetSchemaResponse), response, "response is E3EAPIClientModelsClientGetSchemaResponse");
        }
        
        /// <summary>
        /// Test ClientGetClients
        /// </summary>
        [Test]
        public void ClientGetClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            List<Guid> clientId = null;
            int? clientIndex = 1;
            string number = null;
            List<string> advancedFilterChildObjectsToInclude = null;
            List<string> advancedFilterAttributesToInclude = null;
            string advancedFilterFilterXOQL = null;
            List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            string x3ESessionId = null;
            string x3EUserId = null;
            string acceptLanguage = null;
            var response = instance.ClientGetClients(clientId, clientIndex, number, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            Assert.IsInstanceOf(typeof(E3EAPIClientModelsClientGetResponse), response, "response is E3EAPIClientModelsClientGetResponse");
        }
        
        /// <summary>
        /// Test ClientGetNewClient
        /// </summary>
        [Test]
        public void ClientGetNewClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.ClientGetNewClient(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIClientModelsClientTemplateResponse), response, "response is E3EAPIClientModelsClientTemplateResponse");
        }
        
        /// <summary>
        /// Test ClientModelFromClients
        /// </summary>
        [Test]
        public void ClientModelFromClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.ClientModelFromClients(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIClientModelsClientGetResponse), response, "response is E3EAPIClientModelsClientGetResponse");
        }
        
        /// <summary>
        /// Test ClientUpdateClient
        /// </summary>
        [Test]
        public void ClientUpdateClientTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIClientModelsClientUpdateRequest e3EAPIClientModelsClientUpdateRequest = null;
            //var response = instance.ClientUpdateClient(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIClientModelsClientUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIClientModelsClientUpdateResponse), response, "response is E3EAPIClientModelsClientUpdateResponse");
        }
        
        /// <summary>
        /// Test ClientValidateClients
        /// </summary>
        [Test]
        public void ClientValidateClientsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIClientModelsClientValidateRequest e3EAPIClientModelsClientValidateRequest = null;
            //var response = instance.ClientValidateClients(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIClientModelsClientValidateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIClientModelsClientValidateResponse), response, "response is E3EAPIClientModelsClientValidateResponse");
        }
        
    }

}
