/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CostApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CostApiTests
    {
        private CostApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CostApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CostApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CostApi
            //Assert.IsInstanceOf(typeof(CostApi), instance);
        }

        
        /// <summary>
        /// Test CostCreatePendingCostCard
        /// </summary>
        [Test]
        public void CostCreatePendingCostCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPICostModelsCostCardCreateRequest e3EAPICostModelsCostCardCreateRequest = null;
            //var response = instance.CostCreatePendingCostCard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPICostModelsCostCardCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardCreateResponse), response, "response is E3EAPICostModelsCostCardCreateResponse");
        }
        
        /// <summary>
        /// Test CostCreatePostedCostCard
        /// </summary>
        [Test]
        public void CostCreatePostedCostCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPICostModelsCostCardCreateRequest e3EAPICostModelsCostCardCreateRequest = null;
            //var response = instance.CostCreatePostedCostCard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPICostModelsCostCardCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardCreateResponse), response, "response is E3EAPICostModelsCostCardCreateResponse");
        }
        
        /// <summary>
        /// Test CostGetNewPendingCostCard
        /// </summary>
        [Test]
        public void CostGetNewPendingCostCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.CostGetNewPendingCostCard(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardTemplateResponse), response, "response is E3EAPICostModelsCostCardTemplateResponse");
        }
        
        /// <summary>
        /// Test CostGetNewPostedCostCard
        /// </summary>
        [Test]
        public void CostGetNewPostedCostCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.CostGetNewPostedCostCard(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardTemplateResponse), response, "response is E3EAPICostModelsCostCardTemplateResponse");
        }
        
        /// <summary>
        /// Test CostGetPendingCostCardSchema
        /// </summary>
        [Test]
        public void CostGetPendingCostCardSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.CostGetPendingCostCardSchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardGetSchemaResponse), response, "response is E3EAPICostModelsCostCardGetSchemaResponse");
        }
        
        /// <summary>
        /// Test CostGetPendingCostCards
        /// </summary>
        [Test]
        public void CostGetPendingCostCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //List<Guid> costcardID = null;
            //int? costPeindIndex = null;
            //string costType = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //int? matterIndex = null;
            //string matterNumber = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.CostGetPendingCostCards(startDate, endDate, costcardID, costPeindIndex, costType, timekeeperIndex, timekeeperNumber, timekeeperID, matterIndex, matterNumber, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardGetResponse), response, "response is E3EAPICostModelsCostCardGetResponse");
        }
        
        /// <summary>
        /// Test CostGetPostedCostCardSchema
        /// </summary>
        [Test]
        public void CostGetPostedCostCardSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.CostGetPostedCostCardSchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardGetSchemaResponse), response, "response is E3EAPICostModelsCostCardGetSchemaResponse");
        }
        
        /// <summary>
        /// Test CostGetPostedCostCards
        /// </summary>
        [Test]
        public void CostGetPostedCostCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //List<Guid> costcardID = null;
            //int? costIndex = null;
            //string costType = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //int? matterIndex = null;
            //string matterNumber = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.CostGetPostedCostCards(startDate, endDate, costcardID, costIndex, costType, timekeeperIndex, timekeeperNumber, timekeeperID, matterIndex, matterNumber, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardGetResponse), response, "response is E3EAPICostModelsCostCardGetResponse");
        }
        
        /// <summary>
        /// Test CostModelFromPendingCostCards
        /// </summary>
        [Test]
        public void CostModelFromPendingCostCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.CostModelFromPendingCostCards(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardGetResponse), response, "response is E3EAPICostModelsCostCardGetResponse");
        }
        
        /// <summary>
        /// Test CostModelFromPostedCostCards
        /// </summary>
        [Test]
        public void CostModelFromPostedCostCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.CostModelFromPostedCostCards(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardGetResponse), response, "response is E3EAPICostModelsCostCardGetResponse");
        }
        
        /// <summary>
        /// Test CostUpdatePendingCostCard
        /// </summary>
        [Test]
        public void CostUpdatePendingCostCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPICostModelsCostCardUpdateRequest e3EAPICostModelsCostCardUpdateRequest = null;
            //var response = instance.CostUpdatePendingCostCard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPICostModelsCostCardUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardUpdateResponse), response, "response is E3EAPICostModelsCostCardUpdateResponse");
        }
        
        /// <summary>
        /// Test CostUpdatePostedCostCard
        /// </summary>
        [Test]
        public void CostUpdatePostedCostCardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPICostModelsCostCardUpdateRequest e3EAPICostModelsCostCardUpdateRequest = null;
            //var response = instance.CostUpdatePostedCostCard(x3ESessionId, x3EUserId, acceptLanguage, e3EAPICostModelsCostCardUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardUpdateResponse), response, "response is E3EAPICostModelsCostCardUpdateResponse");
        }
        
        /// <summary>
        /// Test CostValidatePendingCostCards
        /// </summary>
        [Test]
        public void CostValidatePendingCostCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPICostModelsCostCardValidateRequest e3EAPICostModelsCostCardValidateRequest = null;
            //var response = instance.CostValidatePendingCostCards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPICostModelsCostCardValidateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardValidateResponse), response, "response is E3EAPICostModelsCostCardValidateResponse");
        }
        
        /// <summary>
        /// Test CostValidatePostedCostCards
        /// </summary>
        [Test]
        public void CostValidatePostedCostCardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPICostModelsCostCardValidateRequest e3EAPICostModelsCostCardValidateRequest = null;
            //var response = instance.CostValidatePostedCostCards(x3ESessionId, x3EUserId, acceptLanguage, e3EAPICostModelsCostCardValidateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPICostModelsCostCardValidateResponse), response, "response is E3EAPICostModelsCostCardValidateResponse");
        }
        
    }

}
