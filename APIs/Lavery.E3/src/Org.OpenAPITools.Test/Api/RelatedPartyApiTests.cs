/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing RelatedPartyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class RelatedPartyApiTests
    {
        private RelatedPartyApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RelatedPartyApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RelatedPartyApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' RelatedPartyApi
            //Assert.IsInstanceOf(typeof(RelatedPartyApi), instance);
        }

        
        /// <summary>
        /// Test RelatedPartyCreateRelatedParty
        /// </summary>
        [Test]
        public void RelatedPartyCreateRelatedPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIRelatedPartyModelsRelatedPartyCreateRequest e3EAPIRelatedPartyModelsRelatedPartyCreateRequest = null;
            //var response = instance.RelatedPartyCreateRelatedParty(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIRelatedPartyModelsRelatedPartyCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIRelatedPartyModelsRelatedPartyCreateResponse), response, "response is E3EAPIRelatedPartyModelsRelatedPartyCreateResponse");
        }
        
        /// <summary>
        /// Test RelatedPartyGetNewRelatedParty
        /// </summary>
        [Test]
        public void RelatedPartyGetNewRelatedPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.RelatedPartyGetNewRelatedParty(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse), response, "response is E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse");
        }
        
        /// <summary>
        /// Test RelatedPartyGetRelatedParties
        /// </summary>
        [Test]
        public void RelatedPartyGetRelatedPartiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> relatedPartyId = null;
            //int? relatedPartyIndex = null;
            //List<string> advancedFilterChildObjectsToInclude = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.RelatedPartyGetRelatedParties(relatedPartyId, relatedPartyIndex, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIRelatedPartyModelsRelatedPartyGetResponse), response, "response is E3EAPIRelatedPartyModelsRelatedPartyGetResponse");
        }
        
        /// <summary>
        /// Test RelatedPartyGetRelatedPartySchema
        /// </summary>
        [Test]
        public void RelatedPartyGetRelatedPartySchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.RelatedPartyGetRelatedPartySchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse), response, "response is E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse");
        }
        
        /// <summary>
        /// Test RelatedPartyModelFromRelatedParties
        /// </summary>
        [Test]
        public void RelatedPartyModelFromRelatedPartiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.RelatedPartyModelFromRelatedParties(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIRelatedPartyModelsRelatedPartyGetResponse), response, "response is E3EAPIRelatedPartyModelsRelatedPartyGetResponse");
        }
        
        /// <summary>
        /// Test RelatedPartyUpdateRelatedParty
        /// </summary>
        [Test]
        public void RelatedPartyUpdateRelatedPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest = null;
            //var response = instance.RelatedPartyUpdateRelatedParty(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse), response, "response is E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse");
        }
        
        /// <summary>
        /// Test RelatedPartyValidateRelatedParties
        /// </summary>
        [Test]
        public void RelatedPartyValidateRelatedPartiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIRelatedPartyModelsRelatedPartyValidateRequest e3EAPIRelatedPartyModelsRelatedPartyValidateRequest = null;
            //var response = instance.RelatedPartyValidateRelatedParties(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIRelatedPartyModelsRelatedPartyValidateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIRelatedPartyModelsRelatedPartyValidateResponse), response, "response is E3EAPIRelatedPartyModelsRelatedPartyValidateResponse");
        }
        
    }

}
