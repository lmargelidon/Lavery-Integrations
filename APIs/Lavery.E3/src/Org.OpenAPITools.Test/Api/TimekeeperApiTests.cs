/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing TimekeeperApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TimekeeperApiTests
    {
        private TimekeeperApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TimekeeperApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TimekeeperApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TimekeeperApi
            //Assert.IsInstanceOf(typeof(TimekeeperApi), instance);
        }

        
        /// <summary>
        /// Test TimekeeperCreateTimekeeper
        /// </summary>
        [Test]
        public void TimekeeperCreateTimekeeperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimekeeperModelsTimekeeperCreateRequest e3EAPITimekeeperModelsTimekeeperCreateRequest = null;
            //var response = instance.TimekeeperCreateTimekeeper(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimekeeperModelsTimekeeperCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimekeeperModelsTimekeeperCreateResponse), response, "response is E3EAPITimekeeperModelsTimekeeperCreateResponse");
        }
        
        /// <summary>
        /// Test TimekeeperGetNewTimekeeper
        /// </summary>
        [Test]
        public void TimekeeperGetNewTimekeeperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimekeeperGetNewTimekeeper(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimekeeperModelsTimekeeperTemplateResponse), response, "response is E3EAPITimekeeperModelsTimekeeperTemplateResponse");
        }
        
        /// <summary>
        /// Test TimekeeperGetTimekeeperSchema
        /// </summary>
        [Test]
        public void TimekeeperGetTimekeeperSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimekeeperGetTimekeeperSchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimekeeperModelsTimekeeperGetSchemaResponse), response, "response is E3EAPITimekeeperModelsTimekeeperGetSchemaResponse");
        }
        
        /// <summary>
        /// Test TimekeeperGetTimekeepers
        /// </summary>
        [Test]
        public void TimekeeperGetTimekeepersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> timekeeperId = null;
            //int? timekeeperIndex = null;
            //string number = null;
            //List<string> advancedFilterChildObjectsToInclude = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimekeeperGetTimekeepers(timekeeperId, timekeeperIndex, number, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimekeeperModelsTimekeeperGetResponse), response, "response is E3EAPITimekeeperModelsTimekeeperGetResponse");
        }
        
        /// <summary>
        /// Test TimekeeperModelFromTimekeepers
        /// </summary>
        [Test]
        public void TimekeeperModelFromTimekeepersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.TimekeeperModelFromTimekeepers(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITimekeeperModelsTimekeeperGetResponse), response, "response is E3EAPITimekeeperModelsTimekeeperGetResponse");
        }
        
        /// <summary>
        /// Test TimekeeperUpdateTimekeeper
        /// </summary>
        [Test]
        public void TimekeeperUpdateTimekeeperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimekeeperModelsTimekeeperUpdateRequest e3EAPITimekeeperModelsTimekeeperUpdateRequest = null;
            //var response = instance.TimekeeperUpdateTimekeeper(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimekeeperModelsTimekeeperUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimekeeperModelsTimekeeperUpdateResponse), response, "response is E3EAPITimekeeperModelsTimekeeperUpdateResponse");
        }
        
        /// <summary>
        /// Test TimekeeperValidateTimekeepers
        /// </summary>
        [Test]
        public void TimekeeperValidateTimekeepersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITimekeeperModelsTimekeeperValidateRequest e3EAPITimekeeperModelsTimekeeperValidateRequest = null;
            //var response = instance.TimekeeperValidateTimekeepers(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimekeeperModelsTimekeeperValidateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITimekeeperModelsTimekeeperValidateResponse), response, "response is E3EAPITimekeeperModelsTimekeeperValidateResponse");
        }
        
    }

}
