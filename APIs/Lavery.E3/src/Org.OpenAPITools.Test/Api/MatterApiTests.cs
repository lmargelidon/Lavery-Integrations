/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing MatterApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MatterApiTests
    {
        private MatterApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MatterApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MatterApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MatterApi
            //Assert.IsInstanceOf(typeof(MatterApi), instance);
        }

        
        /// <summary>
        /// Test MatterCreateMatter
        /// </summary>
        [Test]
        public void MatterCreateMatterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIMatterModelsMatterCreateRequest e3EAPIMatterModelsMatterCreateRequest = null;
            //var response = instance.MatterCreateMatter(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterModelsMatterCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsMatterCreateResponse), response, "response is E3EAPIMatterModelsMatterCreateResponse");
        }
        
        /// <summary>
        /// Test MatterCreateMatterNickname
        /// </summary>
        [Test]
        public void MatterCreateMatterNicknameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIMatterNicknameModelsMatterNicknameCreateRequest e3EAPIMatterNicknameModelsMatterNicknameCreateRequest = null;
            //var response = instance.MatterCreateMatterNickname(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterNicknameModelsMatterNicknameCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterNicknameModelsMatterNicknameCreateResponse), response, "response is E3EAPIMatterNicknameModelsMatterNicknameCreateResponse");
        }
        
        /// <summary>
        /// Test MatterCreateTempMatter
        /// </summary>
        [Test]
        public void MatterCreateTempMatterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITempMatterModelsTempMatterCreateRequest e3EAPITempMatterModelsTempMatterCreateRequest = null;
            //var response = instance.MatterCreateTempMatter(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITempMatterModelsTempMatterCreateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITempMatterModelsTempMatterCreateResponse), response, "response is E3EAPITempMatterModelsTempMatterCreateResponse");
        }
        
        /// <summary>
        /// Test MatterDeleteMatterNickname
        /// </summary>
        [Test]
        public void MatterDeleteMatterNicknameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest = null;
            //var response = instance.MatterDeleteMatterNickname(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse), response, "response is E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse");
        }
        
        /// <summary>
        /// Test MatterDeleteTempMatter
        /// </summary>
        [Test]
        public void MatterDeleteTempMatterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.MatterDeleteTempMatter(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPITempMatterModelsTempMatterDeleteResponse), response, "response is E3EAPITempMatterModelsTempMatterDeleteResponse");
        }
        
        /// <summary>
        /// Test MatterGetMatterNicknames
        /// </summary>
        [Test]
        public void MatterGetMatterNicknamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> matterNicknameId = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.MatterGetMatterNicknames(matterNicknameId, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsMatterNicknameGetResponse), response, "response is E3EAPIMatterModelsMatterNicknameGetResponse");
        }
        
        /// <summary>
        /// Test MatterGetMatterSchema
        /// </summary>
        [Test]
        public void MatterGetMatterSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.MatterGetMatterSchema(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsMatterGetSchemaResponse), response, "response is E3EAPIMatterModelsMatterGetSchemaResponse");
        }
        
        /// <summary>
        /// Test MatterGetMatters
        /// </summary>
        [Test]
        public void MatterGetMattersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> matterId = null;
            //int? mattIndex = null;
            //string number = null;
            //List<string> advancedFilterChildObjectsToInclude = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.MatterGetMatters(matterId, mattIndex, number, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsMatterGetResponse), response, "response is E3EAPIMatterModelsMatterGetResponse");
        }
        
        /// <summary>
        /// Test MatterGetNewMatter
        /// </summary>
        [Test]
        public void MatterGetNewMatterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.MatterGetNewMatter(x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsMatterTemplateResponse), response, "response is E3EAPIMatterModelsMatterTemplateResponse");
        }
        
        /// <summary>
        /// Test MatterGetTempMatterNameList
        /// </summary>
        [Test]
        public void MatterGetTempMatterNameListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> tempMatterID = null;
            //string tempMatterName = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.MatterGetTempMatterNameList(tempMatterID, tempMatterName, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsTempMatterGetResponse), response, "response is E3EAPIMatterModelsTempMatterGetResponse");
        }
        
        /// <summary>
        /// Test MatterGetTempMatters
        /// </summary>
        [Test]
        public void MatterGetTempMattersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> tempMatterID = null;
            //string tempMatterName = null;
            //int? timekeeperIndex = null;
            //string timekeeperNumber = null;
            //Guid? timekeeperID = null;
            //List<string> advancedFilterAttributesToInclude = null;
            //string advancedFilterFilterXOQL = null;
            //List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = null;
            //E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = null;
            //List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.MatterGetTempMatters(tempMatterID, tempMatterName, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsTempMatterGetResponse), response, "response is E3EAPIMatterModelsTempMatterGetResponse");
        }
        
        /// <summary>
        /// Test MatterModelFromMatters
        /// </summary>
        [Test]
        public void MatterModelFromMattersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> itemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.MatterModelFromMatters(itemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsMatterGetResponse), response, "response is E3EAPIMatterModelsMatterGetResponse");
        }
        
        /// <summary>
        /// Test MatterReplaceTempMatter
        /// </summary>
        [Test]
        public void MatterReplaceTempMatterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPITempMatterModelsTempMatterReplaceRequest e3EAPITempMatterModelsTempMatterReplaceRequest = null;
            //var response = instance.MatterReplaceTempMatter(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITempMatterModelsTempMatterReplaceRequest);
            //Assert.IsInstanceOf(typeof(E3EAPITempMatterModelsTempMatterReplaceResponse), response, "response is E3EAPITempMatterModelsTempMatterReplaceResponse");
        }
        
        /// <summary>
        /// Test MatterUpdateMatter
        /// </summary>
        [Test]
        public void MatterUpdateMatterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIMatterModelsMatterUpdateRequest e3EAPIMatterModelsMatterUpdateRequest = null;
            //var response = instance.MatterUpdateMatter(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterModelsMatterUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsMatterUpdateResponse), response, "response is E3EAPIMatterModelsMatterUpdateResponse");
        }
        
        /// <summary>
        /// Test MatterUpdateMatterNickname
        /// </summary>
        [Test]
        public void MatterUpdateMatterNicknameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest = null;
            //var response = instance.MatterUpdateMatterNickname(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse), response, "response is E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse");
        }
        
        /// <summary>
        /// Test MatterValidateMatters
        /// </summary>
        [Test]
        public void MatterValidateMattersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //E3EAPIMatterModelsMatterValidateRequest e3EAPIMatterModelsMatterValidateRequest = null;
            //var response = instance.MatterValidateMatters(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterModelsMatterValidateRequest);
            //Assert.IsInstanceOf(typeof(E3EAPIMatterModelsMatterValidateResponse), response, "response is E3EAPIMatterModelsMatterValidateResponse");
        }
        
    }

}
