/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing AttachmentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AttachmentApiTests
    {
        private AttachmentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AttachmentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AttachmentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' AttachmentApi
            //Assert.IsInstanceOf(typeof(AttachmentApi), instance);
        }

        
        /// <summary>
        /// Test AttachmentDownloadDMSAttachment
        /// </summary>
        [Test]
        public void AttachmentDownloadDMSAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid attachmentId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.AttachmentDownloadDMSAttachment(attachmentId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIAttachmentModelsAttachmentDownloadRequest), response, "response is E3EAPIAttachmentModelsAttachmentDownloadRequest");
        }
        
        /// <summary>
        /// Test AttachmentDownloadFileAttachment
        /// </summary>
        [Test]
        public void AttachmentDownloadFileAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid attachmentId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.AttachmentDownloadFileAttachment(attachmentId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIAttachmentModelsAttachmentDownloadRequest), response, "response is E3EAPIAttachmentModelsAttachmentDownloadRequest");
        }
        
        /// <summary>
        /// Test AttachmentDownloadICAttachment
        /// </summary>
        [Test]
        public void AttachmentDownloadICAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string syncId = null;
            //string archetype = null;
            //Guid parentItemId = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.AttachmentDownloadICAttachment(syncId, archetype, parentItemId, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIAttachmentModelsICAttachmentDownloadRequest), response, "response is E3EAPIAttachmentModelsICAttachmentDownloadRequest");
        }
        
        /// <summary>
        /// Test AttachmentGetAttachments
        /// </summary>
        [Test]
        public void AttachmentGetAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> parentItemIds = null;
            //string archetype = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.AttachmentGetAttachments(parentItemIds, archetype, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIAttachmentModelsAttachmentGetResponse), response, "response is E3EAPIAttachmentModelsAttachmentGetResponse");
        }
        
        /// <summary>
        /// Test AttachmentGetDMSParameters
        /// </summary>
        [Test]
        public void AttachmentGetDMSParametersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string archetype = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.AttachmentGetDMSParameters(archetype, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIAttachmentModelsDMSParametersGetResponse), response, "response is E3EAPIAttachmentModelsDMSParametersGetResponse");
        }
        
        /// <summary>
        /// Test AttachmentUploadDMSAttachment
        /// </summary>
        [Test]
        public void AttachmentUploadDMSAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string library = null;
            //string documentClass = null;
            //string documentType = null;
            //string dMSFolder = null;
            //Guid parentItemId = null;
            //string archetype = null;
            //Guid? syncMapID = null;
            //string subFolder = null;
            //string description = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.AttachmentUploadDMSAttachment(library, documentClass, documentType, dMSFolder, parentItemId, archetype, syncMapID, subFolder, description, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIAttachmentModelsAttachmentCreateResponse), response, "response is E3EAPIAttachmentModelsAttachmentCreateResponse");
        }
        
        /// <summary>
        /// Test AttachmentUploadFileAttachment
        /// </summary>
        [Test]
        public void AttachmentUploadFileAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid parentItemId = null;
            //string archetype = null;
            //string subFolder = null;
            //string description = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.AttachmentUploadFileAttachment(parentItemId, archetype, subFolder, description, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIAttachmentModelsAttachmentCreateResponse), response, "response is E3EAPIAttachmentModelsAttachmentCreateResponse");
        }
        
        /// <summary>
        /// Test AttachmentUploadICAttachment
        /// </summary>
        [Test]
        public void AttachmentUploadICAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string process = null;
            //Guid parentItemId = null;
            //string archetype = null;
            //string subFolder = null;
            //string description = null;
            //string x3ESessionId = null;
            //string x3EUserId = null;
            //string acceptLanguage = null;
            //var response = instance.AttachmentUploadICAttachment(process, parentItemId, archetype, subFolder, description, x3ESessionId, x3EUserId, acceptLanguage);
            //Assert.IsInstanceOf(typeof(E3EAPIAttachmentModelsAttachmentCreateResponse), response, "response is E3EAPIAttachmentModelsAttachmentCreateResponse");
        }
        
    }

}
