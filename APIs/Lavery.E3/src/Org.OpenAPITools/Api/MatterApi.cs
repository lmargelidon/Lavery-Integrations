/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIMatterModelsMatterCreateResponse</returns>
        E3EAPIMatterModelsMatterCreateResponse MatterCreateMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterCreateRequest e3EAPIMatterModelsMatterCreateRequest = default(E3EAPIMatterModelsMatterCreateRequest));

        /// <summary>
        /// Creates a new Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterCreateResponse</returns>
        ApiResponse<E3EAPIMatterModelsMatterCreateResponse> MatterCreateMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterCreateRequest e3EAPIMatterModelsMatterCreateRequest = default(E3EAPIMatterModelsMatterCreateRequest));
        /// <summary>
        /// Creates a new Matter Nickname.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIMatterNicknameModelsMatterNicknameCreateResponse</returns>
        E3EAPIMatterNicknameModelsMatterNicknameCreateResponse MatterCreateMatterNickname (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameCreateRequest e3EAPIMatterNicknameModelsMatterNicknameCreateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameCreateRequest));

        /// <summary>
        /// Creates a new Matter Nickname.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterNicknameModelsMatterNicknameCreateResponse</returns>
        ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse> MatterCreateMatterNicknameWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameCreateRequest e3EAPIMatterNicknameModelsMatterNicknameCreateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameCreateRequest));
        /// <summary>
        /// Creates a new Temp Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITempMatterModelsTempMatterCreateResponse</returns>
        E3EAPITempMatterModelsTempMatterCreateResponse MatterCreateTempMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterCreateRequest e3EAPITempMatterModelsTempMatterCreateRequest = default(E3EAPITempMatterModelsTempMatterCreateRequest));

        /// <summary>
        /// Creates a new Temp Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITempMatterModelsTempMatterCreateResponse</returns>
        ApiResponse<E3EAPITempMatterModelsTempMatterCreateResponse> MatterCreateTempMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterCreateRequest e3EAPITempMatterModelsTempMatterCreateRequest = default(E3EAPITempMatterModelsTempMatterCreateRequest));
        /// <summary>
        /// Deletes one or more existing matter nicknames.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest">The MatterNickname.MatterNicknameID values of the matter nicknames to be deleted. (optional)</param>
        /// <returns>E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse</returns>
        E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse MatterDeleteMatterNickname (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest = default(E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest));

        /// <summary>
        /// Deletes one or more existing matter nicknames.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest">The MatterNickname.MatterNicknameID values of the matter nicknames to be deleted. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse</returns>
        ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse> MatterDeleteMatterNicknameWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest = default(E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest));
        /// <summary>
        /// Deletes the specified Temp Matters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITempMatterModelsTempMatterDeleteResponse</returns>
        E3EAPITempMatterModelsTempMatterDeleteResponse MatterDeleteTempMatter (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Deletes the specified Temp Matters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITempMatterModelsTempMatterDeleteResponse</returns>
        ApiResponse<E3EAPITempMatterModelsTempMatterDeleteResponse> MatterDeleteTempMatterWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets Matter Nicknames and returns a MatterNicknameGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterNicknameId">Gets or sets the MatterNicknameIds. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterNicknameGetResponse</returns>
        E3EAPIMatterModelsMatterNicknameGetResponse MatterGetMatterNicknames (List<Guid> matterNicknameId = default(List<Guid>), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets Matter Nicknames and returns a MatterNicknameGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterNicknameId">Gets or sets the MatterNicknameIds. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterNicknameGetResponse</returns>
        ApiResponse<E3EAPIMatterModelsMatterNicknameGetResponse> MatterGetMatterNicknamesWithHttpInfo (List<Guid> matterNicknameId = default(List<Guid>), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets the schema for Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterGetSchemaResponse</returns>
        E3EAPIMatterModelsMatterGetSchemaResponse MatterGetMatterSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets the schema for Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterGetSchemaResponse</returns>
        ApiResponse<E3EAPIMatterModelsMatterGetSchemaResponse> MatterGetMatterSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets Matters and returns a MatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId">Gets or sets the MatterIds. (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Matter Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterGetResponse</returns>
        E3EAPIMatterModelsMatterGetResponse MatterGetMatters (List<Guid> matterId = default(List<Guid>), int? mattIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets Matters and returns a MatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId">Gets or sets the MatterIds. (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Matter Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterGetResponse</returns>
        ApiResponse<E3EAPIMatterModelsMatterGetResponse> MatterGetMattersWithHttpInfo (List<Guid> matterId = default(List<Guid>), int? mattIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets a new Matter with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateMatter with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterTemplateResponse</returns>
        E3EAPIMatterModelsMatterTemplateResponse MatterGetNewMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets a new Matter with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateMatter with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterTemplateResponse</returns>
        ApiResponse<E3EAPIMatterModelsMatterTemplateResponse> MatterGetNewMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets high level Temp Matter name list and returns a TempMatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsTempMatterGetResponse</returns>
        E3EAPIMatterModelsTempMatterGetResponse MatterGetTempMatterNameList (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets high level Temp Matter name list and returns a TempMatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsTempMatterGetResponse</returns>
        ApiResponse<E3EAPIMatterModelsTempMatterGetResponse> MatterGetTempMatterNameListWithHttpInfo (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets Temp Matters and returns a TempMatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsTempMatterGetResponse</returns>
        E3EAPIMatterModelsTempMatterGetResponse MatterGetTempMatters (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets Temp Matters and returns a TempMatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsTempMatterGetResponse</returns>
        ApiResponse<E3EAPIMatterModelsTempMatterGetResponse> MatterGetTempMattersWithHttpInfo (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets cloned Matters and returns a MatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterGetResponse</returns>
        E3EAPIMatterModelsMatterGetResponse MatterModelFromMatters (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets cloned Matters and returns a MatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterGetResponse</returns>
        ApiResponse<E3EAPIMatterModelsMatterGetResponse> MatterModelFromMattersWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Replaces a Temp Matter with an actual matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterReplaceRequest">The request details. (optional)</param>
        /// <returns>E3EAPITempMatterModelsTempMatterReplaceResponse</returns>
        E3EAPITempMatterModelsTempMatterReplaceResponse MatterReplaceTempMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterReplaceRequest e3EAPITempMatterModelsTempMatterReplaceRequest = default(E3EAPITempMatterModelsTempMatterReplaceRequest));

        /// <summary>
        /// Replaces a Temp Matter with an actual matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterReplaceRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITempMatterModelsTempMatterReplaceResponse</returns>
        ApiResponse<E3EAPITempMatterModelsTempMatterReplaceResponse> MatterReplaceTempMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterReplaceRequest e3EAPITempMatterModelsTempMatterReplaceRequest = default(E3EAPITempMatterModelsTempMatterReplaceRequest));
        /// <summary>
        /// Updates a Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIMatterModelsMatterUpdateResponse</returns>
        E3EAPIMatterModelsMatterUpdateResponse MatterUpdateMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterUpdateRequest e3EAPIMatterModelsMatterUpdateRequest = default(E3EAPIMatterModelsMatterUpdateRequest));

        /// <summary>
        /// Updates a Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterUpdateResponse</returns>
        ApiResponse<E3EAPIMatterModelsMatterUpdateResponse> MatterUpdateMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterUpdateRequest e3EAPIMatterModelsMatterUpdateRequest = default(E3EAPIMatterModelsMatterUpdateRequest));
        /// <summary>
        /// Updates a Matter Nickname.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse</returns>
        E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse MatterUpdateMatterNickname (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest));

        /// <summary>
        /// Updates a Matter Nickname.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse</returns>
        ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse> MatterUpdateMatterNicknameWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest));
        /// <summary>
        /// Validates one or more existing Matters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterValidateRequest">The Matter.MattIndex values of the Matters to be validated. (optional)</param>
        /// <returns>E3EAPIMatterModelsMatterValidateResponse</returns>
        E3EAPIMatterModelsMatterValidateResponse MatterValidateMatters (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterValidateRequest e3EAPIMatterModelsMatterValidateRequest = default(E3EAPIMatterModelsMatterValidateRequest));

        /// <summary>
        /// Validates one or more existing Matters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterValidateRequest">The Matter.MattIndex values of the Matters to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterValidateResponse</returns>
        ApiResponse<E3EAPIMatterModelsMatterValidateResponse> MatterValidateMattersWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterValidateRequest e3EAPIMatterModelsMatterValidateRequest = default(E3EAPIMatterModelsMatterValidateRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsMatterCreateResponse> MatterCreateMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterCreateRequest e3EAPIMatterModelsMatterCreateRequest = default(E3EAPIMatterModelsMatterCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterCreateResponse>> MatterCreateMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterCreateRequest e3EAPIMatterModelsMatterCreateRequest = default(E3EAPIMatterModelsMatterCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new Matter Nickname.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterNicknameModelsMatterNicknameCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse> MatterCreateMatterNicknameAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameCreateRequest e3EAPIMatterNicknameModelsMatterNicknameCreateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new Matter Nickname.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterNicknameModelsMatterNicknameCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse>> MatterCreateMatterNicknameWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameCreateRequest e3EAPIMatterNicknameModelsMatterNicknameCreateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new Temp Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITempMatterModelsTempMatterCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITempMatterModelsTempMatterCreateResponse> MatterCreateTempMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterCreateRequest e3EAPITempMatterModelsTempMatterCreateRequest = default(E3EAPITempMatterModelsTempMatterCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new Temp Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITempMatterModelsTempMatterCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITempMatterModelsTempMatterCreateResponse>> MatterCreateTempMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterCreateRequest e3EAPITempMatterModelsTempMatterCreateRequest = default(E3EAPITempMatterModelsTempMatterCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes one or more existing matter nicknames.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest">The MatterNickname.MatterNicknameID values of the matter nicknames to be deleted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse> MatterDeleteMatterNicknameAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest = default(E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes one or more existing matter nicknames.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest">The MatterNickname.MatterNicknameID values of the matter nicknames to be deleted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse>> MatterDeleteMatterNicknameWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest = default(E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes the specified Temp Matters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITempMatterModelsTempMatterDeleteResponse</returns>
        System.Threading.Tasks.Task<E3EAPITempMatterModelsTempMatterDeleteResponse> MatterDeleteTempMatterAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the specified Temp Matters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITempMatterModelsTempMatterDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITempMatterModelsTempMatterDeleteResponse>> MatterDeleteTempMatterWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Matter Nicknames and returns a MatterNicknameGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterNicknameId">Gets or sets the MatterNicknameIds. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterNicknameGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsMatterNicknameGetResponse> MatterGetMatterNicknamesAsync (List<Guid> matterNicknameId = default(List<Guid>), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Matter Nicknames and returns a MatterNicknameGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterNicknameId">Gets or sets the MatterNicknameIds. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterNicknameGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterNicknameGetResponse>> MatterGetMatterNicknamesWithHttpInfoAsync (List<Guid> matterNicknameId = default(List<Guid>), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the schema for Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterGetSchemaResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsMatterGetSchemaResponse> MatterGetMatterSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the schema for Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterGetSchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterGetSchemaResponse>> MatterGetMatterSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Matters and returns a MatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId">Gets or sets the MatterIds. (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Matter Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsMatterGetResponse> MatterGetMattersAsync (List<Guid> matterId = default(List<Guid>), int? mattIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Matters and returns a MatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId">Gets or sets the MatterIds. (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Matter Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterGetResponse>> MatterGetMattersWithHttpInfoAsync (List<Guid> matterId = default(List<Guid>), int? mattIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a new Matter with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateMatter with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterTemplateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsMatterTemplateResponse> MatterGetNewMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new Matter with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateMatter with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterTemplateResponse>> MatterGetNewMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets high level Temp Matter name list and returns a TempMatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsTempMatterGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsTempMatterGetResponse> MatterGetTempMatterNameListAsync (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets high level Temp Matter name list and returns a TempMatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsTempMatterGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsTempMatterGetResponse>> MatterGetTempMatterNameListWithHttpInfoAsync (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Temp Matters and returns a TempMatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsTempMatterGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsTempMatterGetResponse> MatterGetTempMattersAsync (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Temp Matters and returns a TempMatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsTempMatterGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsTempMatterGetResponse>> MatterGetTempMattersWithHttpInfoAsync (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets cloned Matters and returns a MatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsMatterGetResponse> MatterModelFromMattersAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets cloned Matters and returns a MatterGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterGetResponse>> MatterModelFromMattersWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Replaces a Temp Matter with an actual matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterReplaceRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITempMatterModelsTempMatterReplaceResponse</returns>
        System.Threading.Tasks.Task<E3EAPITempMatterModelsTempMatterReplaceResponse> MatterReplaceTempMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterReplaceRequest e3EAPITempMatterModelsTempMatterReplaceRequest = default(E3EAPITempMatterModelsTempMatterReplaceRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Replaces a Temp Matter with an actual matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterReplaceRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITempMatterModelsTempMatterReplaceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITempMatterModelsTempMatterReplaceResponse>> MatterReplaceTempMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterReplaceRequest e3EAPITempMatterModelsTempMatterReplaceRequest = default(E3EAPITempMatterModelsTempMatterReplaceRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterUpdateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsMatterUpdateResponse> MatterUpdateMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterUpdateRequest e3EAPIMatterModelsMatterUpdateRequest = default(E3EAPIMatterModelsMatterUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterUpdateResponse>> MatterUpdateMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterUpdateRequest e3EAPIMatterModelsMatterUpdateRequest = default(E3EAPIMatterModelsMatterUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a Matter Nickname.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse> MatterUpdateMatterNicknameAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a Matter Nickname.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse>> MatterUpdateMatterNicknameWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validates one or more existing Matters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterValidateRequest">The Matter.MattIndex values of the Matters to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterValidateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIMatterModelsMatterValidateResponse> MatterValidateMattersAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterValidateRequest e3EAPIMatterModelsMatterValidateRequest = default(E3EAPIMatterModelsMatterValidateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates one or more existing Matters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterValidateRequest">The Matter.MattIndex values of the Matters to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterValidateResponse>> MatterValidateMattersWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterValidateRequest e3EAPIMatterModelsMatterValidateRequest = default(E3EAPIMatterModelsMatterValidateRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MatterApi : IMatterApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MatterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatterApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatterApi"/> class
        /// </summary>
        /// <returns></returns>
        public MatterApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MatterApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIMatterModelsMatterCreateResponse</returns>
        public E3EAPIMatterModelsMatterCreateResponse MatterCreateMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterCreateRequest e3EAPIMatterModelsMatterCreateRequest = default(E3EAPIMatterModelsMatterCreateRequest))
        {
             ApiResponse<E3EAPIMatterModelsMatterCreateResponse> localVarResponse = MatterCreateMatterWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterModelsMatterCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterCreateResponse</returns>
        public ApiResponse<E3EAPIMatterModelsMatterCreateResponse> MatterCreateMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterCreateRequest e3EAPIMatterModelsMatterCreateRequest = default(E3EAPIMatterModelsMatterCreateRequest))
        {

            var localVarPath = "/api/v1/matter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterModelsMatterCreateRequest != null && e3EAPIMatterModelsMatterCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterModelsMatterCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterModelsMatterCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterCreateMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterCreateResponse)));
        }

        /// <summary>
        /// Creates a new Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsMatterCreateResponse> MatterCreateMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterCreateRequest e3EAPIMatterModelsMatterCreateRequest = default(E3EAPIMatterModelsMatterCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsMatterCreateResponse> localVarResponse = await MatterCreateMatterWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterModelsMatterCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterCreateResponse>> MatterCreateMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterCreateRequest e3EAPIMatterModelsMatterCreateRequest = default(E3EAPIMatterModelsMatterCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterModelsMatterCreateRequest != null && e3EAPIMatterModelsMatterCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterModelsMatterCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterModelsMatterCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterCreateMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterCreateResponse)));
        }

        /// <summary>
        /// Creates a new Matter Nickname. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIMatterNicknameModelsMatterNicknameCreateResponse</returns>
        public E3EAPIMatterNicknameModelsMatterNicknameCreateResponse MatterCreateMatterNickname (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameCreateRequest e3EAPIMatterNicknameModelsMatterNicknameCreateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameCreateRequest))
        {
             ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse> localVarResponse = MatterCreateMatterNicknameWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterNicknameModelsMatterNicknameCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Matter Nickname. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterNicknameModelsMatterNicknameCreateResponse</returns>
        public ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse> MatterCreateMatterNicknameWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameCreateRequest e3EAPIMatterNicknameModelsMatterNicknameCreateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameCreateRequest))
        {

            var localVarPath = "/api/v1/matter/nickname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterNicknameModelsMatterNicknameCreateRequest != null && e3EAPIMatterNicknameModelsMatterNicknameCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterNicknameModelsMatterNicknameCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterNicknameModelsMatterNicknameCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterCreateMatterNickname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterNicknameModelsMatterNicknameCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterNicknameModelsMatterNicknameCreateResponse)));
        }

        /// <summary>
        /// Creates a new Matter Nickname. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterNicknameModelsMatterNicknameCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse> MatterCreateMatterNicknameAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameCreateRequest e3EAPIMatterNicknameModelsMatterNicknameCreateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse> localVarResponse = await MatterCreateMatterNicknameWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterNicknameModelsMatterNicknameCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Matter Nickname. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterNicknameModelsMatterNicknameCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse>> MatterCreateMatterNicknameWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameCreateRequest e3EAPIMatterNicknameModelsMatterNicknameCreateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/nickname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterNicknameModelsMatterNicknameCreateRequest != null && e3EAPIMatterNicknameModelsMatterNicknameCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterNicknameModelsMatterNicknameCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterNicknameModelsMatterNicknameCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterCreateMatterNickname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterNicknameModelsMatterNicknameCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterNicknameModelsMatterNicknameCreateResponse)));
        }

        /// <summary>
        /// Creates a new Temp Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITempMatterModelsTempMatterCreateResponse</returns>
        public E3EAPITempMatterModelsTempMatterCreateResponse MatterCreateTempMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterCreateRequest e3EAPITempMatterModelsTempMatterCreateRequest = default(E3EAPITempMatterModelsTempMatterCreateRequest))
        {
             ApiResponse<E3EAPITempMatterModelsTempMatterCreateResponse> localVarResponse = MatterCreateTempMatterWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITempMatterModelsTempMatterCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Temp Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITempMatterModelsTempMatterCreateResponse</returns>
        public ApiResponse<E3EAPITempMatterModelsTempMatterCreateResponse> MatterCreateTempMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterCreateRequest e3EAPITempMatterModelsTempMatterCreateRequest = default(E3EAPITempMatterModelsTempMatterCreateRequest))
        {

            var localVarPath = "/api/v1/matter/temp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITempMatterModelsTempMatterCreateRequest != null && e3EAPITempMatterModelsTempMatterCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITempMatterModelsTempMatterCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITempMatterModelsTempMatterCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterCreateTempMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITempMatterModelsTempMatterCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITempMatterModelsTempMatterCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITempMatterModelsTempMatterCreateResponse)));
        }

        /// <summary>
        /// Creates a new Temp Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITempMatterModelsTempMatterCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITempMatterModelsTempMatterCreateResponse> MatterCreateTempMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterCreateRequest e3EAPITempMatterModelsTempMatterCreateRequest = default(E3EAPITempMatterModelsTempMatterCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITempMatterModelsTempMatterCreateResponse> localVarResponse = await MatterCreateTempMatterWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITempMatterModelsTempMatterCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Temp Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITempMatterModelsTempMatterCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITempMatterModelsTempMatterCreateResponse>> MatterCreateTempMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterCreateRequest e3EAPITempMatterModelsTempMatterCreateRequest = default(E3EAPITempMatterModelsTempMatterCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/temp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITempMatterModelsTempMatterCreateRequest != null && e3EAPITempMatterModelsTempMatterCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITempMatterModelsTempMatterCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITempMatterModelsTempMatterCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterCreateTempMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITempMatterModelsTempMatterCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITempMatterModelsTempMatterCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITempMatterModelsTempMatterCreateResponse)));
        }

        /// <summary>
        /// Deletes one or more existing matter nicknames. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest">The MatterNickname.MatterNicknameID values of the matter nicknames to be deleted. (optional)</param>
        /// <returns>E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse</returns>
        public E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse MatterDeleteMatterNickname (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest = default(E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest))
        {
             ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse> localVarResponse = MatterDeleteMatterNicknameWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more existing matter nicknames. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest">The MatterNickname.MatterNicknameID values of the matter nicknames to be deleted. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse</returns>
        public ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse> MatterDeleteMatterNicknameWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest = default(E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest))
        {

            var localVarPath = "/api/v1/matter/nickname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest != null && e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterDeleteMatterNickname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse)));
        }

        /// <summary>
        /// Deletes one or more existing matter nicknames. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest">The MatterNickname.MatterNicknameID values of the matter nicknames to be deleted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse> MatterDeleteMatterNicknameAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest = default(E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse> localVarResponse = await MatterDeleteMatterNicknameWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes one or more existing matter nicknames. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest">The MatterNickname.MatterNicknameID values of the matter nicknames to be deleted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse>> MatterDeleteMatterNicknameWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest = default(E3EAPIMatterNicknameModelsMatterNicknameDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/nickname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest != null && e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterNicknameModelsMatterNicknameDeleteRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterDeleteMatterNickname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterNicknameModelsMatterNicknameDeleteResponse)));
        }

        /// <summary>
        /// Deletes the specified Temp Matters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITempMatterModelsTempMatterDeleteResponse</returns>
        public E3EAPITempMatterModelsTempMatterDeleteResponse MatterDeleteTempMatter (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITempMatterModelsTempMatterDeleteResponse> localVarResponse = MatterDeleteTempMatterWithHttpInfo(itemId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the specified Temp Matters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITempMatterModelsTempMatterDeleteResponse</returns>
        public ApiResponse<E3EAPITempMatterModelsTempMatterDeleteResponse> MatterDeleteTempMatterWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/matter/temp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterDeleteTempMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITempMatterModelsTempMatterDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITempMatterModelsTempMatterDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITempMatterModelsTempMatterDeleteResponse)));
        }

        /// <summary>
        /// Deletes the specified Temp Matters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITempMatterModelsTempMatterDeleteResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITempMatterModelsTempMatterDeleteResponse> MatterDeleteTempMatterAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITempMatterModelsTempMatterDeleteResponse> localVarResponse = await MatterDeleteTempMatterWithHttpInfoAsync(itemId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the specified Temp Matters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITempMatterModelsTempMatterDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITempMatterModelsTempMatterDeleteResponse>> MatterDeleteTempMatterWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/temp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterDeleteTempMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITempMatterModelsTempMatterDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITempMatterModelsTempMatterDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITempMatterModelsTempMatterDeleteResponse)));
        }

        /// <summary>
        /// Gets Matter Nicknames and returns a MatterNicknameGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterNicknameId">Gets or sets the MatterNicknameIds. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterNicknameGetResponse</returns>
        public E3EAPIMatterModelsMatterNicknameGetResponse MatterGetMatterNicknames (List<Guid> matterNicknameId = default(List<Guid>), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIMatterModelsMatterNicknameGetResponse> localVarResponse = MatterGetMatterNicknamesWithHttpInfo(matterNicknameId, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Matter Nicknames and returns a MatterNicknameGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterNicknameId">Gets or sets the MatterNicknameIds. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterNicknameGetResponse</returns>
        public ApiResponse<E3EAPIMatterModelsMatterNicknameGetResponse> MatterGetMatterNicknamesWithHttpInfo (List<Guid> matterNicknameId = default(List<Guid>), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/matter/nickname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (matterNicknameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "MatterNicknameId", matterNicknameId)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetMatterNicknames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterNicknameGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterNicknameGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterNicknameGetResponse)));
        }

        /// <summary>
        /// Gets Matter Nicknames and returns a MatterNicknameGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterNicknameId">Gets or sets the MatterNicknameIds. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterNicknameGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsMatterNicknameGetResponse> MatterGetMatterNicknamesAsync (List<Guid> matterNicknameId = default(List<Guid>), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsMatterNicknameGetResponse> localVarResponse = await MatterGetMatterNicknamesWithHttpInfoAsync(matterNicknameId, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Matter Nicknames and returns a MatterNicknameGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterNicknameId">Gets or sets the MatterNicknameIds. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterNicknameGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterNicknameGetResponse>> MatterGetMatterNicknamesWithHttpInfoAsync (List<Guid> matterNicknameId = default(List<Guid>), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/nickname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (matterNicknameId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "MatterNicknameId", matterNicknameId)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetMatterNicknames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterNicknameGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterNicknameGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterNicknameGetResponse)));
        }

        /// <summary>
        /// Gets the schema for Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterGetSchemaResponse</returns>
        public E3EAPIMatterModelsMatterGetSchemaResponse MatterGetMatterSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIMatterModelsMatterGetSchemaResponse> localVarResponse = MatterGetMatterSchemaWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the schema for Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterGetSchemaResponse</returns>
        public ApiResponse<E3EAPIMatterModelsMatterGetSchemaResponse> MatterGetMatterSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/matter/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetMatterSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterGetSchemaResponse)));
        }

        /// <summary>
        /// Gets the schema for Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterGetSchemaResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsMatterGetSchemaResponse> MatterGetMatterSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsMatterGetSchemaResponse> localVarResponse = await MatterGetMatterSchemaWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the schema for Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterGetSchemaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterGetSchemaResponse>> MatterGetMatterSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetMatterSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterGetSchemaResponse)));
        }

        /// <summary>
        /// Gets Matters and returns a MatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId">Gets or sets the MatterIds. (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Matter Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterGetResponse</returns>
        public E3EAPIMatterModelsMatterGetResponse MatterGetMatters (List<Guid> matterId = default(List<Guid>), int? mattIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIMatterModelsMatterGetResponse> localVarResponse = MatterGetMattersWithHttpInfo(matterId, mattIndex, number, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Matters and returns a MatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId">Gets or sets the MatterIds. (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Matter Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterGetResponse</returns>
        public ApiResponse<E3EAPIMatterModelsMatterGetResponse> MatterGetMattersWithHttpInfo (List<Guid> matterId = default(List<Guid>), int? mattIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/matter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (matterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "MatterId", matterId)); // query parameter
            if (mattIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MattIndex", mattIndex)); // query parameter
            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Number", number)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetMatters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterGetResponse)));
        }

        /// <summary>
        /// Gets Matters and returns a MatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId">Gets or sets the MatterIds. (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Matter Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsMatterGetResponse> MatterGetMattersAsync (List<Guid> matterId = default(List<Guid>), int? mattIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsMatterGetResponse> localVarResponse = await MatterGetMattersWithHttpInfoAsync(matterId, mattIndex, number, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Matters and returns a MatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="matterId">Gets or sets the MatterIds. (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Matter Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterGetResponse>> MatterGetMattersWithHttpInfoAsync (List<Guid> matterId = default(List<Guid>), int? mattIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (matterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "MatterId", matterId)); // query parameter
            if (mattIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MattIndex", mattIndex)); // query parameter
            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Number", number)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetMatters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterGetResponse)));
        }

        /// <summary>
        /// Gets a new Matter with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateMatter with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterTemplateResponse</returns>
        public E3EAPIMatterModelsMatterTemplateResponse MatterGetNewMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIMatterModelsMatterTemplateResponse> localVarResponse = MatterGetNewMatterWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new Matter with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateMatter with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterTemplateResponse</returns>
        public ApiResponse<E3EAPIMatterModelsMatterTemplateResponse> MatterGetNewMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/matter/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetNewMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterTemplateResponse)));
        }

        /// <summary>
        /// Gets a new Matter with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateMatter with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterTemplateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsMatterTemplateResponse> MatterGetNewMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsMatterTemplateResponse> localVarResponse = await MatterGetNewMatterWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new Matter with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateMatter with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterTemplateResponse>> MatterGetNewMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetNewMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterTemplateResponse)));
        }

        /// <summary>
        /// Gets high level Temp Matter name list and returns a TempMatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsTempMatterGetResponse</returns>
        public E3EAPIMatterModelsTempMatterGetResponse MatterGetTempMatterNameList (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIMatterModelsTempMatterGetResponse> localVarResponse = MatterGetTempMatterNameListWithHttpInfo(tempMatterID, tempMatterName, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets high level Temp Matter name list and returns a TempMatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsTempMatterGetResponse</returns>
        public ApiResponse<E3EAPIMatterModelsTempMatterGetResponse> MatterGetTempMatterNameListWithHttpInfo (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/matter/temp/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tempMatterID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TempMatterID", tempMatterID)); // query parameter
            if (tempMatterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TempMatterName", tempMatterName)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetTempMatterNameList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsTempMatterGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsTempMatterGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsTempMatterGetResponse)));
        }

        /// <summary>
        /// Gets high level Temp Matter name list and returns a TempMatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsTempMatterGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsTempMatterGetResponse> MatterGetTempMatterNameListAsync (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsTempMatterGetResponse> localVarResponse = await MatterGetTempMatterNameListWithHttpInfoAsync(tempMatterID, tempMatterName, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets high level Temp Matter name list and returns a TempMatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsTempMatterGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsTempMatterGetResponse>> MatterGetTempMatterNameListWithHttpInfoAsync (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/temp/name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tempMatterID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TempMatterID", tempMatterID)); // query parameter
            if (tempMatterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TempMatterName", tempMatterName)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetTempMatterNameList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsTempMatterGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsTempMatterGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsTempMatterGetResponse)));
        }

        /// <summary>
        /// Gets Temp Matters and returns a TempMatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsTempMatterGetResponse</returns>
        public E3EAPIMatterModelsTempMatterGetResponse MatterGetTempMatters (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIMatterModelsTempMatterGetResponse> localVarResponse = MatterGetTempMattersWithHttpInfo(tempMatterID, tempMatterName, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Temp Matters and returns a TempMatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsTempMatterGetResponse</returns>
        public ApiResponse<E3EAPIMatterModelsTempMatterGetResponse> MatterGetTempMattersWithHttpInfo (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/matter/temp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tempMatterID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TempMatterID", tempMatterID)); // query parameter
            if (tempMatterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TempMatterName", tempMatterName)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetTempMatters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsTempMatterGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsTempMatterGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsTempMatterGetResponse)));
        }

        /// <summary>
        /// Gets Temp Matters and returns a TempMatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsTempMatterGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsTempMatterGetResponse> MatterGetTempMattersAsync (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsTempMatterGetResponse> localVarResponse = await MatterGetTempMattersWithHttpInfoAsync(tempMatterID, tempMatterName, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Temp Matters and returns a TempMatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tempMatterID">Gets or sets the TempMatterIDs. (optional)</param>
        /// <param name="tempMatterName">Gets or sets the TempMatterName. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsTempMatterGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsTempMatterGetResponse>> MatterGetTempMattersWithHttpInfoAsync (List<Guid> tempMatterID = default(List<Guid>), string tempMatterName = default(string), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/temp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tempMatterID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TempMatterID", tempMatterID)); // query parameter
            if (tempMatterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TempMatterName", tempMatterName)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterGetTempMatters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsTempMatterGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsTempMatterGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsTempMatterGetResponse)));
        }

        /// <summary>
        /// Gets cloned Matters and returns a MatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIMatterModelsMatterGetResponse</returns>
        public E3EAPIMatterModelsMatterGetResponse MatterModelFromMatters (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIMatterModelsMatterGetResponse> localVarResponse = MatterModelFromMattersWithHttpInfo(itemId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets cloned Matters and returns a MatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterGetResponse</returns>
        public ApiResponse<E3EAPIMatterModelsMatterGetResponse> MatterModelFromMattersWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/matter/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterModelFromMatters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterGetResponse)));
        }

        /// <summary>
        /// Gets cloned Matters and returns a MatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsMatterGetResponse> MatterModelFromMattersAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsMatterGetResponse> localVarResponse = await MatterModelFromMattersWithHttpInfoAsync(itemId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets cloned Matters and returns a MatterGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterGetResponse>> MatterModelFromMattersWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterModelFromMatters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterGetResponse)));
        }

        /// <summary>
        /// Replaces a Temp Matter with an actual matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterReplaceRequest">The request details. (optional)</param>
        /// <returns>E3EAPITempMatterModelsTempMatterReplaceResponse</returns>
        public E3EAPITempMatterModelsTempMatterReplaceResponse MatterReplaceTempMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterReplaceRequest e3EAPITempMatterModelsTempMatterReplaceRequest = default(E3EAPITempMatterModelsTempMatterReplaceRequest))
        {
             ApiResponse<E3EAPITempMatterModelsTempMatterReplaceResponse> localVarResponse = MatterReplaceTempMatterWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITempMatterModelsTempMatterReplaceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replaces a Temp Matter with an actual matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterReplaceRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITempMatterModelsTempMatterReplaceResponse</returns>
        public ApiResponse<E3EAPITempMatterModelsTempMatterReplaceResponse> MatterReplaceTempMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterReplaceRequest e3EAPITempMatterModelsTempMatterReplaceRequest = default(E3EAPITempMatterModelsTempMatterReplaceRequest))
        {

            var localVarPath = "/api/v1/matter/temp/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITempMatterModelsTempMatterReplaceRequest != null && e3EAPITempMatterModelsTempMatterReplaceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITempMatterModelsTempMatterReplaceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITempMatterModelsTempMatterReplaceRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterReplaceTempMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITempMatterModelsTempMatterReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITempMatterModelsTempMatterReplaceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITempMatterModelsTempMatterReplaceResponse)));
        }

        /// <summary>
        /// Replaces a Temp Matter with an actual matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterReplaceRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITempMatterModelsTempMatterReplaceResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITempMatterModelsTempMatterReplaceResponse> MatterReplaceTempMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterReplaceRequest e3EAPITempMatterModelsTempMatterReplaceRequest = default(E3EAPITempMatterModelsTempMatterReplaceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITempMatterModelsTempMatterReplaceResponse> localVarResponse = await MatterReplaceTempMatterWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITempMatterModelsTempMatterReplaceRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replaces a Temp Matter with an actual matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITempMatterModelsTempMatterReplaceRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITempMatterModelsTempMatterReplaceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITempMatterModelsTempMatterReplaceResponse>> MatterReplaceTempMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITempMatterModelsTempMatterReplaceRequest e3EAPITempMatterModelsTempMatterReplaceRequest = default(E3EAPITempMatterModelsTempMatterReplaceRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/temp/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITempMatterModelsTempMatterReplaceRequest != null && e3EAPITempMatterModelsTempMatterReplaceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITempMatterModelsTempMatterReplaceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITempMatterModelsTempMatterReplaceRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterReplaceTempMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITempMatterModelsTempMatterReplaceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITempMatterModelsTempMatterReplaceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITempMatterModelsTempMatterReplaceResponse)));
        }

        /// <summary>
        /// Updates a Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIMatterModelsMatterUpdateResponse</returns>
        public E3EAPIMatterModelsMatterUpdateResponse MatterUpdateMatter (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterUpdateRequest e3EAPIMatterModelsMatterUpdateRequest = default(E3EAPIMatterModelsMatterUpdateRequest))
        {
             ApiResponse<E3EAPIMatterModelsMatterUpdateResponse> localVarResponse = MatterUpdateMatterWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterModelsMatterUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterUpdateResponse</returns>
        public ApiResponse<E3EAPIMatterModelsMatterUpdateResponse> MatterUpdateMatterWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterUpdateRequest e3EAPIMatterModelsMatterUpdateRequest = default(E3EAPIMatterModelsMatterUpdateRequest))
        {

            var localVarPath = "/api/v1/matter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterModelsMatterUpdateRequest != null && e3EAPIMatterModelsMatterUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterModelsMatterUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterModelsMatterUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterUpdateMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterUpdateResponse)));
        }

        /// <summary>
        /// Updates a Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterUpdateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsMatterUpdateResponse> MatterUpdateMatterAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterUpdateRequest e3EAPIMatterModelsMatterUpdateRequest = default(E3EAPIMatterModelsMatterUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsMatterUpdateResponse> localVarResponse = await MatterUpdateMatterWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterModelsMatterUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterUpdateResponse>> MatterUpdateMatterWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterUpdateRequest e3EAPIMatterModelsMatterUpdateRequest = default(E3EAPIMatterModelsMatterUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterModelsMatterUpdateRequest != null && e3EAPIMatterModelsMatterUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterModelsMatterUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterModelsMatterUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterUpdateMatter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterUpdateResponse)));
        }

        /// <summary>
        /// Updates a Matter Nickname. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse</returns>
        public E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse MatterUpdateMatterNickname (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest))
        {
             ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse> localVarResponse = MatterUpdateMatterNicknameWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Matter Nickname. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse</returns>
        public ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse> MatterUpdateMatterNicknameWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest))
        {

            var localVarPath = "/api/v1/matter/nickname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest != null && e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterUpdateMatterNickname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse)));
        }

        /// <summary>
        /// Updates a Matter Nickname. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse> MatterUpdateMatterNicknameAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse> localVarResponse = await MatterUpdateMatterNicknameWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Matter Nickname. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse>> MatterUpdateMatterNicknameWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest = default(E3EAPIMatterNicknameModelsMatterNicknameUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/nickname";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest != null && e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterNicknameModelsMatterNicknameUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterUpdateMatterNickname", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterNicknameModelsMatterNicknameUpdateResponse)));
        }

        /// <summary>
        /// Validates one or more existing Matters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterValidateRequest">The Matter.MattIndex values of the Matters to be validated. (optional)</param>
        /// <returns>E3EAPIMatterModelsMatterValidateResponse</returns>
        public E3EAPIMatterModelsMatterValidateResponse MatterValidateMatters (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterValidateRequest e3EAPIMatterModelsMatterValidateRequest = default(E3EAPIMatterModelsMatterValidateRequest))
        {
             ApiResponse<E3EAPIMatterModelsMatterValidateResponse> localVarResponse = MatterValidateMattersWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterModelsMatterValidateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates one or more existing Matters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterValidateRequest">The Matter.MattIndex values of the Matters to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPIMatterModelsMatterValidateResponse</returns>
        public ApiResponse<E3EAPIMatterModelsMatterValidateResponse> MatterValidateMattersWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterValidateRequest e3EAPIMatterModelsMatterValidateRequest = default(E3EAPIMatterModelsMatterValidateRequest))
        {

            var localVarPath = "/api/v1/matter/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterModelsMatterValidateRequest != null && e3EAPIMatterModelsMatterValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterModelsMatterValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterModelsMatterValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterValidateMatters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterValidateResponse)));
        }

        /// <summary>
        /// Validates one or more existing Matters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterValidateRequest">The Matter.MattIndex values of the Matters to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIMatterModelsMatterValidateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIMatterModelsMatterValidateResponse> MatterValidateMattersAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterValidateRequest e3EAPIMatterModelsMatterValidateRequest = default(E3EAPIMatterModelsMatterValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIMatterModelsMatterValidateResponse> localVarResponse = await MatterValidateMattersWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIMatterModelsMatterValidateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates one or more existing Matters. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIMatterModelsMatterValidateRequest">The Matter.MattIndex values of the Matters to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIMatterModelsMatterValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIMatterModelsMatterValidateResponse>> MatterValidateMattersWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIMatterModelsMatterValidateRequest e3EAPIMatterModelsMatterValidateRequest = default(E3EAPIMatterModelsMatterValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/matter/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIMatterModelsMatterValidateRequest != null && e3EAPIMatterModelsMatterValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIMatterModelsMatterValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIMatterModelsMatterValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MatterValidateMatters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIMatterModelsMatterValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIMatterModelsMatterValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIMatterModelsMatterValidateResponse)));
        }

    }
}
