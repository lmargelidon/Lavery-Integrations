/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clones one or more Entities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCloneRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityCloneResponse</returns>
        E3EAPIEntityModelsEntityCloneResponse EntityCloneEntity (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCloneRequest e3EAPIEntityModelsEntityCloneRequest = default(E3EAPIEntityModelsEntityCloneRequest));

        /// <summary>
        /// Clones one or more Entities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCloneRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityCloneResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityCloneResponse> EntityCloneEntityWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCloneRequest e3EAPIEntityModelsEntityCloneRequest = default(E3EAPIEntityModelsEntityCloneRequest));
        /// <summary>
        /// Creates a new Entity Organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityCreateResponse</returns>
        E3EAPIEntityModelsEntityCreateResponse EntityCreateOrganization (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest));

        /// <summary>
        /// Creates a new Entity Organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityCreateResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityCreateResponse> EntityCreateOrganizationWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest));
        /// <summary>
        /// Creates a new Entity Person.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityCreateResponse</returns>
        E3EAPIEntityModelsEntityCreateResponse EntityCreatePerson (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest));

        /// <summary>
        /// Creates a new Entity Person.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityCreateResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityCreateResponse> EntityCreatePersonWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest));
        /// <summary>
        /// Deletes one or more existing Entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityDeleteRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityDeleteResponse</returns>
        E3EAPIEntityModelsEntityDeleteResponse EntityDeleteEntity (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityDeleteRequest e3EAPIEntityModelsEntityDeleteRequest = default(E3EAPIEntityModelsEntityDeleteRequest));

        /// <summary>
        /// Deletes one or more existing Entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityDeleteRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityDeleteResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityDeleteResponse> EntityDeleteEntityWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityDeleteRequest e3EAPIEntityModelsEntityDeleteRequest = default(E3EAPIEntityModelsEntityDeleteRequest));
        /// <summary>
        /// Gets Entities and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetRequest</returns>
        E3EAPIEntityModelsEntityGetRequest EntityGetAllEntities (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets Entities and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetRequest</returns>
        ApiResponse<E3EAPIEntityModelsEntityGetRequest> EntityGetAllEntitiesWithHttpInfo (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets a new EntityOrg with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityOrg with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityTemplateResponse</returns>
        E3EAPIEntityModelsEntityTemplateResponse EntityGetNewOrganization (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets a new EntityOrg with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityOrg with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityTemplateResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityTemplateResponse> EntityGetNewOrganizationWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets a new EntityPerson with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityPerson with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityTemplateResponse</returns>
        E3EAPIEntityModelsEntityTemplateResponse EntityGetNewPerson (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets a new EntityPerson with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityPerson with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityTemplateResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityTemplateResponse> EntityGetNewPersonWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets the schema for Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        E3EAPIEntityModelsEntityGetSchemaResponse EntityGetOrganizationSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets the schema for Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse> EntityGetOrganizationSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets EntityOrganizations and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetRequest</returns>
        E3EAPIEntityModelsEntityGetRequest EntityGetOrganizations (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets EntityOrganizations and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetRequest</returns>
        ApiResponse<E3EAPIEntityModelsEntityGetRequest> EntityGetOrganizationsWithHttpInfo (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets the schema for EntityPerson.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        E3EAPIEntityModelsEntityGetSchemaResponse EntityGetPersonSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets the schema for EntityPerson.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse> EntityGetPersonSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets EntityPersons and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetRequest</returns>
        E3EAPIEntityModelsEntityGetRequest EntityGetPersons (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets EntityPersons and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetRequest</returns>
        ApiResponse<E3EAPIEntityModelsEntityGetRequest> EntityGetPersonsWithHttpInfo (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets cloned Entities and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetResponse</returns>
        E3EAPIEntityModelsEntityGetResponse EntityModelFromEntities (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets cloned Entities and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityGetResponse> EntityModelFromEntitiesWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Updates an Entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityUpdateResponse</returns>
        E3EAPIEntityModelsEntityUpdateResponse EntityUpdateEntity (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityUpdateRequest e3EAPIEntityModelsEntityUpdateRequest = default(E3EAPIEntityModelsEntityUpdateRequest));

        /// <summary>
        /// Updates an Entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityUpdateResponse</returns>
        ApiResponse<E3EAPIEntityModelsEntityUpdateResponse> EntityUpdateEntityWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityUpdateRequest e3EAPIEntityModelsEntityUpdateRequest = default(E3EAPIEntityModelsEntityUpdateRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clones one or more Entities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCloneRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityCloneResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityCloneResponse> EntityCloneEntityAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCloneRequest e3EAPIEntityModelsEntityCloneRequest = default(E3EAPIEntityModelsEntityCloneRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clones one or more Entities.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCloneRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityCloneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityCloneResponse>> EntityCloneEntityWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCloneRequest e3EAPIEntityModelsEntityCloneRequest = default(E3EAPIEntityModelsEntityCloneRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new Entity Organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityCreateResponse> EntityCreateOrganizationAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new Entity Organization.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityCreateResponse>> EntityCreateOrganizationWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new Entity Person.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityCreateResponse> EntityCreatePersonAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new Entity Person.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityCreateResponse>> EntityCreatePersonWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes one or more existing Entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityDeleteRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityDeleteResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityDeleteResponse> EntityDeleteEntityAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityDeleteRequest e3EAPIEntityModelsEntityDeleteRequest = default(E3EAPIEntityModelsEntityDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes one or more existing Entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityDeleteRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityDeleteResponse>> EntityDeleteEntityWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityDeleteRequest e3EAPIEntityModelsEntityDeleteRequest = default(E3EAPIEntityModelsEntityDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Entities and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetRequest</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetRequest> EntityGetAllEntitiesAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Entities and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetRequest>> EntityGetAllEntitiesWithHttpInfoAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a new EntityOrg with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityOrg with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityTemplateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityTemplateResponse> EntityGetNewOrganizationAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new EntityOrg with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityOrg with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityTemplateResponse>> EntityGetNewOrganizationWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a new EntityPerson with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityPerson with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityTemplateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityTemplateResponse> EntityGetNewPersonAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new EntityPerson with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityPerson with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityTemplateResponse>> EntityGetNewPersonWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the schema for Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetSchemaResponse> EntityGetOrganizationSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the schema for Matter.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetSchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse>> EntityGetOrganizationSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets EntityOrganizations and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetRequest</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetRequest> EntityGetOrganizationsAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets EntityOrganizations and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetRequest>> EntityGetOrganizationsWithHttpInfoAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the schema for EntityPerson.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetSchemaResponse> EntityGetPersonSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the schema for EntityPerson.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetSchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse>> EntityGetPersonSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets EntityPersons and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetRequest</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetRequest> EntityGetPersonsAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets EntityPersons and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetRequest>> EntityGetPersonsWithHttpInfoAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets cloned Entities and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetResponse> EntityModelFromEntitiesAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets cloned Entities and returns a EntityGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetResponse>> EntityModelFromEntitiesWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates an Entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityUpdateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIEntityModelsEntityUpdateResponse> EntityUpdateEntityAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityUpdateRequest e3EAPIEntityModelsEntityUpdateRequest = default(E3EAPIEntityModelsEntityUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an Entity.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityUpdateResponse>> EntityUpdateEntityWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityUpdateRequest e3EAPIEntityModelsEntityUpdateRequest = default(E3EAPIEntityModelsEntityUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntityApi : IEntityApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntityApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityApi"/> class
        /// </summary>
        /// <returns></returns>
        public EntityApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntityApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clones one or more Entities. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCloneRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityCloneResponse</returns>
        public E3EAPIEntityModelsEntityCloneResponse EntityCloneEntity (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCloneRequest e3EAPIEntityModelsEntityCloneRequest = default(E3EAPIEntityModelsEntityCloneRequest))
        {
             ApiResponse<E3EAPIEntityModelsEntityCloneResponse> localVarResponse = EntityCloneEntityWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityCloneRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clones one or more Entities. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCloneRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityCloneResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityCloneResponse> EntityCloneEntityWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCloneRequest e3EAPIEntityModelsEntityCloneRequest = default(E3EAPIEntityModelsEntityCloneRequest))
        {

            var localVarPath = "/api/v1/entity/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityCloneRequest != null && e3EAPIEntityModelsEntityCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityCloneEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityCloneResponse)));
        }

        /// <summary>
        /// Clones one or more Entities. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCloneRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityCloneResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityCloneResponse> EntityCloneEntityAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCloneRequest e3EAPIEntityModelsEntityCloneRequest = default(E3EAPIEntityModelsEntityCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityCloneResponse> localVarResponse = await EntityCloneEntityWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityCloneRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clones one or more Entities. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCloneRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityCloneResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityCloneResponse>> EntityCloneEntityWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCloneRequest e3EAPIEntityModelsEntityCloneRequest = default(E3EAPIEntityModelsEntityCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityCloneRequest != null && e3EAPIEntityModelsEntityCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityCloneEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityCloneResponse)));
        }

        /// <summary>
        /// Creates a new Entity Organization. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityCreateResponse</returns>
        public E3EAPIEntityModelsEntityCreateResponse EntityCreateOrganization (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest))
        {
             ApiResponse<E3EAPIEntityModelsEntityCreateResponse> localVarResponse = EntityCreateOrganizationWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Entity Organization. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityCreateResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityCreateResponse> EntityCreateOrganizationWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest))
        {

            var localVarPath = "/api/v1/entity/organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityCreateRequest != null && e3EAPIEntityModelsEntityCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityCreateOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityCreateResponse)));
        }

        /// <summary>
        /// Creates a new Entity Organization. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityCreateResponse> EntityCreateOrganizationAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityCreateResponse> localVarResponse = await EntityCreateOrganizationWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Entity Organization. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityCreateResponse>> EntityCreateOrganizationWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityCreateRequest != null && e3EAPIEntityModelsEntityCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityCreateOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityCreateResponse)));
        }

        /// <summary>
        /// Creates a new Entity Person. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityCreateResponse</returns>
        public E3EAPIEntityModelsEntityCreateResponse EntityCreatePerson (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest))
        {
             ApiResponse<E3EAPIEntityModelsEntityCreateResponse> localVarResponse = EntityCreatePersonWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Entity Person. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityCreateResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityCreateResponse> EntityCreatePersonWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest))
        {

            var localVarPath = "/api/v1/entity/person";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityCreateRequest != null && e3EAPIEntityModelsEntityCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityCreatePerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityCreateResponse)));
        }

        /// <summary>
        /// Creates a new Entity Person. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityCreateResponse> EntityCreatePersonAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityCreateResponse> localVarResponse = await EntityCreatePersonWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Entity Person. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityCreateResponse>> EntityCreatePersonWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityCreateRequest e3EAPIEntityModelsEntityCreateRequest = default(E3EAPIEntityModelsEntityCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/person";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityCreateRequest != null && e3EAPIEntityModelsEntityCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityCreatePerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityCreateResponse)));
        }

        /// <summary>
        /// Deletes one or more existing Entity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityDeleteRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityDeleteResponse</returns>
        public E3EAPIEntityModelsEntityDeleteResponse EntityDeleteEntity (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityDeleteRequest e3EAPIEntityModelsEntityDeleteRequest = default(E3EAPIEntityModelsEntityDeleteRequest))
        {
             ApiResponse<E3EAPIEntityModelsEntityDeleteResponse> localVarResponse = EntityDeleteEntityWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityDeleteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more existing Entity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityDeleteRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityDeleteResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityDeleteResponse> EntityDeleteEntityWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityDeleteRequest e3EAPIEntityModelsEntityDeleteRequest = default(E3EAPIEntityModelsEntityDeleteRequest))
        {

            var localVarPath = "/api/v1/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityDeleteRequest != null && e3EAPIEntityModelsEntityDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityDeleteRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityDeleteEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityDeleteResponse)));
        }

        /// <summary>
        /// Deletes one or more existing Entity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityDeleteRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityDeleteResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityDeleteResponse> EntityDeleteEntityAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityDeleteRequest e3EAPIEntityModelsEntityDeleteRequest = default(E3EAPIEntityModelsEntityDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityDeleteResponse> localVarResponse = await EntityDeleteEntityWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityDeleteRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes one or more existing Entity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityDeleteRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityDeleteResponse>> EntityDeleteEntityWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityDeleteRequest e3EAPIEntityModelsEntityDeleteRequest = default(E3EAPIEntityModelsEntityDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityDeleteRequest != null && e3EAPIEntityModelsEntityDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityDeleteRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityDeleteEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityDeleteResponse)));
        }

        /// <summary>
        /// Gets Entities and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetRequest</returns>
        public E3EAPIEntityModelsEntityGetRequest EntityGetAllEntities (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetRequest> localVarResponse = EntityGetAllEntitiesWithHttpInfo(entityId, entityIndex, displayName, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Entities and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetRequest</returns>
        public ApiResponse<E3EAPIEntityModelsEntityGetRequest> EntityGetAllEntitiesWithHttpInfo (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/entity/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "EntityId", entityId)); // query parameter
            if (entityIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EntityIndex", entityIndex)); // query parameter
            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DisplayName", displayName)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetAllEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetRequest)));
        }

        /// <summary>
        /// Gets Entities and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetRequest</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetRequest> EntityGetAllEntitiesAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetRequest> localVarResponse = await EntityGetAllEntitiesWithHttpInfoAsync(entityId, entityIndex, displayName, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Entities and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetRequest>> EntityGetAllEntitiesWithHttpInfoAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "EntityId", entityId)); // query parameter
            if (entityIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EntityIndex", entityIndex)); // query parameter
            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DisplayName", displayName)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetAllEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetRequest)));
        }

        /// <summary>
        /// Gets a new EntityOrg with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityOrg with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityTemplateResponse</returns>
        public E3EAPIEntityModelsEntityTemplateResponse EntityGetNewOrganization (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIEntityModelsEntityTemplateResponse> localVarResponse = EntityGetNewOrganizationWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new EntityOrg with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityOrg with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityTemplateResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityTemplateResponse> EntityGetNewOrganizationWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/entity/organization/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetNewOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityTemplateResponse)));
        }

        /// <summary>
        /// Gets a new EntityOrg with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityOrg with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityTemplateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityTemplateResponse> EntityGetNewOrganizationAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityTemplateResponse> localVarResponse = await EntityGetNewOrganizationWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new EntityOrg with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityOrg with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityTemplateResponse>> EntityGetNewOrganizationWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/organization/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetNewOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityTemplateResponse)));
        }

        /// <summary>
        /// Gets a new EntityPerson with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityPerson with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityTemplateResponse</returns>
        public E3EAPIEntityModelsEntityTemplateResponse EntityGetNewPerson (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIEntityModelsEntityTemplateResponse> localVarResponse = EntityGetNewPersonWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new EntityPerson with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityPerson with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityTemplateResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityTemplateResponse> EntityGetNewPersonWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/entity/person/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetNewPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityTemplateResponse)));
        }

        /// <summary>
        /// Gets a new EntityPerson with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityPerson with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityTemplateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityTemplateResponse> EntityGetNewPersonAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityTemplateResponse> localVarResponse = await EntityGetNewPersonWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new EntityPerson with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateMatter.  e.g. call this method, then set whichever attributes need to be changed and then call CreateEntityPerson with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityTemplateResponse>> EntityGetNewPersonWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/person/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetNewPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityTemplateResponse)));
        }

        /// <summary>
        /// Gets the schema for Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        public E3EAPIEntityModelsEntityGetSchemaResponse EntityGetOrganizationSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse> localVarResponse = EntityGetOrganizationSchemaWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the schema for Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse> EntityGetOrganizationSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/entity/organization/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetOrganizationSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetSchemaResponse)));
        }

        /// <summary>
        /// Gets the schema for Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetSchemaResponse> EntityGetOrganizationSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse> localVarResponse = await EntityGetOrganizationSchemaWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the schema for Matter. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetSchemaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse>> EntityGetOrganizationSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/organization/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetOrganizationSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetSchemaResponse)));
        }

        /// <summary>
        /// Gets EntityOrganizations and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetRequest</returns>
        public E3EAPIEntityModelsEntityGetRequest EntityGetOrganizations (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetRequest> localVarResponse = EntityGetOrganizationsWithHttpInfo(entityId, entityIndex, displayName, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets EntityOrganizations and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetRequest</returns>
        public ApiResponse<E3EAPIEntityModelsEntityGetRequest> EntityGetOrganizationsWithHttpInfo (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/entity/organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "EntityId", entityId)); // query parameter
            if (entityIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EntityIndex", entityIndex)); // query parameter
            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DisplayName", displayName)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetOrganizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetRequest)));
        }

        /// <summary>
        /// Gets EntityOrganizations and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetRequest</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetRequest> EntityGetOrganizationsAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetRequest> localVarResponse = await EntityGetOrganizationsWithHttpInfoAsync(entityId, entityIndex, displayName, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets EntityOrganizations and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetRequest>> EntityGetOrganizationsWithHttpInfoAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "EntityId", entityId)); // query parameter
            if (entityIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EntityIndex", entityIndex)); // query parameter
            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DisplayName", displayName)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetOrganizations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetRequest)));
        }

        /// <summary>
        /// Gets the schema for EntityPerson. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        public E3EAPIEntityModelsEntityGetSchemaResponse EntityGetPersonSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse> localVarResponse = EntityGetPersonSchemaWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the schema for EntityPerson. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse> EntityGetPersonSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/entity/person/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetPersonSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetSchemaResponse)));
        }

        /// <summary>
        /// Gets the schema for EntityPerson. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetSchemaResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetSchemaResponse> EntityGetPersonSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse> localVarResponse = await EntityGetPersonSchemaWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the schema for EntityPerson. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetSchemaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse>> EntityGetPersonSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/person/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetPersonSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetSchemaResponse)));
        }

        /// <summary>
        /// Gets EntityPersons and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetRequest</returns>
        public E3EAPIEntityModelsEntityGetRequest EntityGetPersons (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetRequest> localVarResponse = EntityGetPersonsWithHttpInfo(entityId, entityIndex, displayName, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets EntityPersons and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetRequest</returns>
        public ApiResponse<E3EAPIEntityModelsEntityGetRequest> EntityGetPersonsWithHttpInfo (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/entity/person";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "EntityId", entityId)); // query parameter
            if (entityIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EntityIndex", entityIndex)); // query parameter
            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DisplayName", displayName)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetPersons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetRequest)));
        }

        /// <summary>
        /// Gets EntityPersons and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetRequest</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetRequest> EntityGetPersonsAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetRequest> localVarResponse = await EntityGetPersonsWithHttpInfoAsync(entityId, entityIndex, displayName, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets EntityPersons and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Gets or sets the EntityIds. (optional)</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex. (optional)</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetRequest>> EntityGetPersonsWithHttpInfoAsync (List<Guid> entityId = default(List<Guid>), int? entityIndex = default(int?), string displayName = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/person";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "EntityId", entityId)); // query parameter
            if (entityIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EntityIndex", entityIndex)); // query parameter
            if (displayName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DisplayName", displayName)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityGetPersons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetRequest)));
        }

        /// <summary>
        /// Gets cloned Entities and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIEntityModelsEntityGetResponse</returns>
        public E3EAPIEntityModelsEntityGetResponse EntityModelFromEntities (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetResponse> localVarResponse = EntityModelFromEntitiesWithHttpInfo(itemId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets cloned Entities and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityGetResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityGetResponse> EntityModelFromEntitiesWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/entity/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityModelFromEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetResponse)));
        }

        /// <summary>
        /// Gets cloned Entities and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityGetResponse> EntityModelFromEntitiesAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityGetResponse> localVarResponse = await EntityModelFromEntitiesWithHttpInfoAsync(itemId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets cloned Entities and returns a EntityGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityGetResponse>> EntityModelFromEntitiesWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityModelFromEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityGetResponse)));
        }

        /// <summary>
        /// Updates an Entity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIEntityModelsEntityUpdateResponse</returns>
        public E3EAPIEntityModelsEntityUpdateResponse EntityUpdateEntity (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityUpdateRequest e3EAPIEntityModelsEntityUpdateRequest = default(E3EAPIEntityModelsEntityUpdateRequest))
        {
             ApiResponse<E3EAPIEntityModelsEntityUpdateResponse> localVarResponse = EntityUpdateEntityWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an Entity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIEntityModelsEntityUpdateResponse</returns>
        public ApiResponse<E3EAPIEntityModelsEntityUpdateResponse> EntityUpdateEntityWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityUpdateRequest e3EAPIEntityModelsEntityUpdateRequest = default(E3EAPIEntityModelsEntityUpdateRequest))
        {

            var localVarPath = "/api/v1/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityUpdateRequest != null && e3EAPIEntityModelsEntityUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityUpdateEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityUpdateResponse)));
        }

        /// <summary>
        /// Updates an Entity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIEntityModelsEntityUpdateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIEntityModelsEntityUpdateResponse> EntityUpdateEntityAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityUpdateRequest e3EAPIEntityModelsEntityUpdateRequest = default(E3EAPIEntityModelsEntityUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIEntityModelsEntityUpdateResponse> localVarResponse = await EntityUpdateEntityWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIEntityModelsEntityUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an Entity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIEntityModelsEntityUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIEntityModelsEntityUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIEntityModelsEntityUpdateResponse>> EntityUpdateEntityWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIEntityModelsEntityUpdateRequest e3EAPIEntityModelsEntityUpdateRequest = default(E3EAPIEntityModelsEntityUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/entity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIEntityModelsEntityUpdateRequest != null && e3EAPIEntityModelsEntityUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIEntityModelsEntityUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIEntityModelsEntityUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntityUpdateEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIEntityModelsEntityUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIEntityModelsEntityUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIEntityModelsEntityUpdateResponse)));
        }

    }
}
