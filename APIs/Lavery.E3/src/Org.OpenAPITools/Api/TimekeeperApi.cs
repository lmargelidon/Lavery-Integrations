/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimekeeperApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperCreateResponse</returns>
        E3EAPITimekeeperModelsTimekeeperCreateResponse TimekeeperCreateTimekeeper (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperCreateRequest e3EAPITimekeeperModelsTimekeeperCreateRequest = default(E3EAPITimekeeperModelsTimekeeperCreateRequest));

        /// <summary>
        /// Creates a new Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperCreateResponse</returns>
        ApiResponse<E3EAPITimekeeperModelsTimekeeperCreateResponse> TimekeeperCreateTimekeeperWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperCreateRequest e3EAPITimekeeperModelsTimekeeperCreateRequest = default(E3EAPITimekeeperModelsTimekeeperCreateRequest));
        /// <summary>
        /// Gets a new Timekeeper with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimekeeper.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimekeeper with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperTemplateResponse</returns>
        E3EAPITimekeeperModelsTimekeeperTemplateResponse TimekeeperGetNewTimekeeper (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets a new Timekeeper with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimekeeper.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimekeeper with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperTemplateResponse</returns>
        ApiResponse<E3EAPITimekeeperModelsTimekeeperTemplateResponse> TimekeeperGetNewTimekeeperWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets the schema for Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperGetSchemaResponse</returns>
        E3EAPITimekeeperModelsTimekeeperGetSchemaResponse TimekeeperGetTimekeeperSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets the schema for Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperGetSchemaResponse</returns>
        ApiResponse<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse> TimekeeperGetTimekeeperSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets Timekeepers and returns a TimekeeperGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeperId">Gets or sets the TimekeeperIds. (optional)</param>
        /// <param name="timekeeperIndex">Gets or sets the TimekeeperIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Timekeeper Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        E3EAPITimekeeperModelsTimekeeperGetResponse TimekeeperGetTimekeepers (List<Guid> timekeeperId = default(List<Guid>), int? timekeeperIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets Timekeepers and returns a TimekeeperGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeperId">Gets or sets the TimekeeperIds. (optional)</param>
        /// <param name="timekeeperIndex">Gets or sets the TimekeeperIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Timekeeper Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse> TimekeeperGetTimekeepersWithHttpInfo (List<Guid> timekeeperId = default(List<Guid>), int? timekeeperIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets cloned Timekeepers and returns a TimekeeperGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        E3EAPITimekeeperModelsTimekeeperGetResponse TimekeeperModelFromTimekeepers (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets cloned Timekeepers and returns a TimekeeperGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse> TimekeeperModelFromTimekeepersWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Updates a Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperUpdateResponse</returns>
        E3EAPITimekeeperModelsTimekeeperUpdateResponse TimekeeperUpdateTimekeeper (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperUpdateRequest e3EAPITimekeeperModelsTimekeeperUpdateRequest = default(E3EAPITimekeeperModelsTimekeeperUpdateRequest));

        /// <summary>
        /// Updates a Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperUpdateResponse</returns>
        ApiResponse<E3EAPITimekeeperModelsTimekeeperUpdateResponse> TimekeeperUpdateTimekeeperWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperUpdateRequest e3EAPITimekeeperModelsTimekeeperUpdateRequest = default(E3EAPITimekeeperModelsTimekeeperUpdateRequest));
        /// <summary>
        /// Validates one or more existing Timekeepers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperValidateRequest">The Timekeeper.MattIndex values of the Timekeepers to be validated. (optional)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperValidateResponse</returns>
        E3EAPITimekeeperModelsTimekeeperValidateResponse TimekeeperValidateTimekeepers (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperValidateRequest e3EAPITimekeeperModelsTimekeeperValidateRequest = default(E3EAPITimekeeperModelsTimekeeperValidateRequest));

        /// <summary>
        /// Validates one or more existing Timekeepers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperValidateRequest">The Timekeeper.MattIndex values of the Timekeepers to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperValidateResponse</returns>
        ApiResponse<E3EAPITimekeeperModelsTimekeeperValidateResponse> TimekeeperValidateTimekeepersWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperValidateRequest e3EAPITimekeeperModelsTimekeeperValidateRequest = default(E3EAPITimekeeperModelsTimekeeperValidateRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperCreateResponse> TimekeeperCreateTimekeeperAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperCreateRequest e3EAPITimekeeperModelsTimekeeperCreateRequest = default(E3EAPITimekeeperModelsTimekeeperCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperCreateResponse>> TimekeeperCreateTimekeeperWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperCreateRequest e3EAPITimekeeperModelsTimekeeperCreateRequest = default(E3EAPITimekeeperModelsTimekeeperCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a new Timekeeper with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimekeeper.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimekeeper with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperTemplateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperTemplateResponse> TimekeeperGetNewTimekeeperAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new Timekeeper with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimekeeper.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimekeeper with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperTemplateResponse>> TimekeeperGetNewTimekeeperWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the schema for Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperGetSchemaResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse> TimekeeperGetTimekeeperSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the schema for Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperGetSchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse>> TimekeeperGetTimekeeperSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Timekeepers and returns a TimekeeperGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeperId">Gets or sets the TimekeeperIds. (optional)</param>
        /// <param name="timekeeperIndex">Gets or sets the TimekeeperIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Timekeeper Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperGetResponse> TimekeeperGetTimekeepersAsync (List<Guid> timekeeperId = default(List<Guid>), int? timekeeperIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Timekeepers and returns a TimekeeperGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeperId">Gets or sets the TimekeeperIds. (optional)</param>
        /// <param name="timekeeperIndex">Gets or sets the TimekeeperIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Timekeeper Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse>> TimekeeperGetTimekeepersWithHttpInfoAsync (List<Guid> timekeeperId = default(List<Guid>), int? timekeeperIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets cloned Timekeepers and returns a TimekeeperGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperGetResponse> TimekeeperModelFromTimekeepersAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets cloned Timekeepers and returns a TimekeeperGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse>> TimekeeperModelFromTimekeepersWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperUpdateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperUpdateResponse> TimekeeperUpdateTimekeeperAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperUpdateRequest e3EAPITimekeeperModelsTimekeeperUpdateRequest = default(E3EAPITimekeeperModelsTimekeeperUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a Timekeeper.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperUpdateResponse>> TimekeeperUpdateTimekeeperWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperUpdateRequest e3EAPITimekeeperModelsTimekeeperUpdateRequest = default(E3EAPITimekeeperModelsTimekeeperUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validates one or more existing Timekeepers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperValidateRequest">The Timekeeper.MattIndex values of the Timekeepers to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperValidateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperValidateResponse> TimekeeperValidateTimekeepersAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperValidateRequest e3EAPITimekeeperModelsTimekeeperValidateRequest = default(E3EAPITimekeeperModelsTimekeeperValidateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates one or more existing Timekeepers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperValidateRequest">The Timekeeper.MattIndex values of the Timekeepers to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperValidateResponse>> TimekeeperValidateTimekeepersWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperValidateRequest e3EAPITimekeeperModelsTimekeeperValidateRequest = default(E3EAPITimekeeperModelsTimekeeperValidateRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimekeeperApi : ITimekeeperApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimekeeperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimekeeperApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimekeeperApi"/> class
        /// </summary>
        /// <returns></returns>
        public TimekeeperApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimekeeperApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimekeeperApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperCreateResponse</returns>
        public E3EAPITimekeeperModelsTimekeeperCreateResponse TimekeeperCreateTimekeeper (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperCreateRequest e3EAPITimekeeperModelsTimekeeperCreateRequest = default(E3EAPITimekeeperModelsTimekeeperCreateRequest))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperCreateResponse> localVarResponse = TimekeeperCreateTimekeeperWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimekeeperModelsTimekeeperCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperCreateResponse</returns>
        public ApiResponse<E3EAPITimekeeperModelsTimekeeperCreateResponse> TimekeeperCreateTimekeeperWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperCreateRequest e3EAPITimekeeperModelsTimekeeperCreateRequest = default(E3EAPITimekeeperModelsTimekeeperCreateRequest))
        {

            var localVarPath = "/api/v1/timekeeper";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimekeeperModelsTimekeeperCreateRequest != null && e3EAPITimekeeperModelsTimekeeperCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimekeeperModelsTimekeeperCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimekeeperModelsTimekeeperCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperCreateTimekeeper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperCreateResponse)));
        }

        /// <summary>
        /// Creates a new Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperCreateResponse> TimekeeperCreateTimekeeperAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperCreateRequest e3EAPITimekeeperModelsTimekeeperCreateRequest = default(E3EAPITimekeeperModelsTimekeeperCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperCreateResponse> localVarResponse = await TimekeeperCreateTimekeeperWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimekeeperModelsTimekeeperCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperCreateResponse>> TimekeeperCreateTimekeeperWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperCreateRequest e3EAPITimekeeperModelsTimekeeperCreateRequest = default(E3EAPITimekeeperModelsTimekeeperCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/timekeeper";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimekeeperModelsTimekeeperCreateRequest != null && e3EAPITimekeeperModelsTimekeeperCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimekeeperModelsTimekeeperCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimekeeperModelsTimekeeperCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperCreateTimekeeper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperCreateResponse)));
        }

        /// <summary>
        /// Gets a new Timekeeper with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimekeeper.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimekeeper with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperTemplateResponse</returns>
        public E3EAPITimekeeperModelsTimekeeperTemplateResponse TimekeeperGetNewTimekeeper (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperTemplateResponse> localVarResponse = TimekeeperGetNewTimekeeperWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new Timekeeper with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimekeeper.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimekeeper with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperTemplateResponse</returns>
        public ApiResponse<E3EAPITimekeeperModelsTimekeeperTemplateResponse> TimekeeperGetNewTimekeeperWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/timekeeper/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperGetNewTimekeeper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperTemplateResponse)));
        }

        /// <summary>
        /// Gets a new Timekeeper with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimekeeper.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimekeeper with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperTemplateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperTemplateResponse> TimekeeperGetNewTimekeeperAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperTemplateResponse> localVarResponse = await TimekeeperGetNewTimekeeperWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new Timekeeper with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimekeeper.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimekeeper with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperTemplateResponse>> TimekeeperGetNewTimekeeperWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/timekeeper/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperGetNewTimekeeper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperTemplateResponse)));
        }

        /// <summary>
        /// Gets the schema for Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperGetSchemaResponse</returns>
        public E3EAPITimekeeperModelsTimekeeperGetSchemaResponse TimekeeperGetTimekeeperSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse> localVarResponse = TimekeeperGetTimekeeperSchemaWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the schema for Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperGetSchemaResponse</returns>
        public ApiResponse<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse> TimekeeperGetTimekeeperSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/timekeeper/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperGetTimekeeperSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperGetSchemaResponse)));
        }

        /// <summary>
        /// Gets the schema for Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperGetSchemaResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse> TimekeeperGetTimekeeperSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse> localVarResponse = await TimekeeperGetTimekeeperSchemaWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the schema for Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperGetSchemaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse>> TimekeeperGetTimekeeperSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/timekeeper/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperGetTimekeeperSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperGetSchemaResponse)));
        }

        /// <summary>
        /// Gets Timekeepers and returns a TimekeeperGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeperId">Gets or sets the TimekeeperIds. (optional)</param>
        /// <param name="timekeeperIndex">Gets or sets the TimekeeperIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Timekeeper Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        public E3EAPITimekeeperModelsTimekeeperGetResponse TimekeeperGetTimekeepers (List<Guid> timekeeperId = default(List<Guid>), int? timekeeperIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse> localVarResponse = TimekeeperGetTimekeepersWithHttpInfo(timekeeperId, timekeeperIndex, number, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Timekeepers and returns a TimekeeperGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeperId">Gets or sets the TimekeeperIds. (optional)</param>
        /// <param name="timekeeperIndex">Gets or sets the TimekeeperIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Timekeeper Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        public ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse> TimekeeperGetTimekeepersWithHttpInfo (List<Guid> timekeeperId = default(List<Guid>), int? timekeeperIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/timekeeper";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timekeeperId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TimekeeperId", timekeeperId)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Number", number)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperGetTimekeepers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperGetResponse)));
        }

        /// <summary>
        /// Gets Timekeepers and returns a TimekeeperGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeperId">Gets or sets the TimekeeperIds. (optional)</param>
        /// <param name="timekeeperIndex">Gets or sets the TimekeeperIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Timekeeper Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperGetResponse> TimekeeperGetTimekeepersAsync (List<Guid> timekeeperId = default(List<Guid>), int? timekeeperIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse> localVarResponse = await TimekeeperGetTimekeepersWithHttpInfoAsync(timekeeperId, timekeeperIndex, number, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Timekeepers and returns a TimekeeperGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeperId">Gets or sets the TimekeeperIds. (optional)</param>
        /// <param name="timekeeperIndex">Gets or sets the TimekeeperIndex. (optional)</param>
        /// <param name="number">Gets or sets the Number (Timekeeper Alias). (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse>> TimekeeperGetTimekeepersWithHttpInfoAsync (List<Guid> timekeeperId = default(List<Guid>), int? timekeeperIndex = default(int?), string number = default(string), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/timekeeper";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timekeeperId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TimekeeperId", timekeeperId)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (number != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Number", number)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperGetTimekeepers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperGetResponse)));
        }

        /// <summary>
        /// Gets cloned Timekeepers and returns a TimekeeperGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        public E3EAPITimekeeperModelsTimekeeperGetResponse TimekeeperModelFromTimekeepers (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse> localVarResponse = TimekeeperModelFromTimekeepersWithHttpInfo(itemId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets cloned Timekeepers and returns a TimekeeperGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        public ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse> TimekeeperModelFromTimekeepersWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/timekeeper/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperModelFromTimekeepers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperGetResponse)));
        }

        /// <summary>
        /// Gets cloned Timekeepers and returns a TimekeeperGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperGetResponse> TimekeeperModelFromTimekeepersAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse> localVarResponse = await TimekeeperModelFromTimekeepersWithHttpInfoAsync(itemId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets cloned Timekeepers and returns a TimekeeperGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse>> TimekeeperModelFromTimekeepersWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/timekeeper/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperModelFromTimekeepers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperGetResponse)));
        }

        /// <summary>
        /// Updates a Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperUpdateResponse</returns>
        public E3EAPITimekeeperModelsTimekeeperUpdateResponse TimekeeperUpdateTimekeeper (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperUpdateRequest e3EAPITimekeeperModelsTimekeeperUpdateRequest = default(E3EAPITimekeeperModelsTimekeeperUpdateRequest))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperUpdateResponse> localVarResponse = TimekeeperUpdateTimekeeperWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimekeeperModelsTimekeeperUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperUpdateResponse</returns>
        public ApiResponse<E3EAPITimekeeperModelsTimekeeperUpdateResponse> TimekeeperUpdateTimekeeperWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperUpdateRequest e3EAPITimekeeperModelsTimekeeperUpdateRequest = default(E3EAPITimekeeperModelsTimekeeperUpdateRequest))
        {

            var localVarPath = "/api/v1/timekeeper";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimekeeperModelsTimekeeperUpdateRequest != null && e3EAPITimekeeperModelsTimekeeperUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimekeeperModelsTimekeeperUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimekeeperModelsTimekeeperUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperUpdateTimekeeper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperUpdateResponse)));
        }

        /// <summary>
        /// Updates a Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperUpdateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperUpdateResponse> TimekeeperUpdateTimekeeperAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperUpdateRequest e3EAPITimekeeperModelsTimekeeperUpdateRequest = default(E3EAPITimekeeperModelsTimekeeperUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperUpdateResponse> localVarResponse = await TimekeeperUpdateTimekeeperWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimekeeperModelsTimekeeperUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Timekeeper. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperUpdateResponse>> TimekeeperUpdateTimekeeperWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperUpdateRequest e3EAPITimekeeperModelsTimekeeperUpdateRequest = default(E3EAPITimekeeperModelsTimekeeperUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/timekeeper";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimekeeperModelsTimekeeperUpdateRequest != null && e3EAPITimekeeperModelsTimekeeperUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimekeeperModelsTimekeeperUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimekeeperModelsTimekeeperUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperUpdateTimekeeper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperUpdateResponse)));
        }

        /// <summary>
        /// Validates one or more existing Timekeepers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperValidateRequest">The Timekeeper.MattIndex values of the Timekeepers to be validated. (optional)</param>
        /// <returns>E3EAPITimekeeperModelsTimekeeperValidateResponse</returns>
        public E3EAPITimekeeperModelsTimekeeperValidateResponse TimekeeperValidateTimekeepers (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperValidateRequest e3EAPITimekeeperModelsTimekeeperValidateRequest = default(E3EAPITimekeeperModelsTimekeeperValidateRequest))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperValidateResponse> localVarResponse = TimekeeperValidateTimekeepersWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimekeeperModelsTimekeeperValidateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates one or more existing Timekeepers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperValidateRequest">The Timekeeper.MattIndex values of the Timekeepers to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimekeeperModelsTimekeeperValidateResponse</returns>
        public ApiResponse<E3EAPITimekeeperModelsTimekeeperValidateResponse> TimekeeperValidateTimekeepersWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperValidateRequest e3EAPITimekeeperModelsTimekeeperValidateRequest = default(E3EAPITimekeeperModelsTimekeeperValidateRequest))
        {

            var localVarPath = "/api/v1/timekeeper/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimekeeperModelsTimekeeperValidateRequest != null && e3EAPITimekeeperModelsTimekeeperValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimekeeperModelsTimekeeperValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimekeeperModelsTimekeeperValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperValidateTimekeepers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperValidateResponse)));
        }

        /// <summary>
        /// Validates one or more existing Timekeepers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperValidateRequest">The Timekeeper.MattIndex values of the Timekeepers to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimekeeperModelsTimekeeperValidateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimekeeperModelsTimekeeperValidateResponse> TimekeeperValidateTimekeepersAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperValidateRequest e3EAPITimekeeperModelsTimekeeperValidateRequest = default(E3EAPITimekeeperModelsTimekeeperValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimekeeperModelsTimekeeperValidateResponse> localVarResponse = await TimekeeperValidateTimekeepersWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimekeeperModelsTimekeeperValidateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates one or more existing Timekeepers. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimekeeperModelsTimekeeperValidateRequest">The Timekeeper.MattIndex values of the Timekeepers to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimekeeperModelsTimekeeperValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimekeeperModelsTimekeeperValidateResponse>> TimekeeperValidateTimekeepersWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimekeeperModelsTimekeeperValidateRequest e3EAPITimekeeperModelsTimekeeperValidateRequest = default(E3EAPITimekeeperModelsTimekeeperValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/timekeeper/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimekeeperModelsTimekeeperValidateRequest != null && e3EAPITimekeeperModelsTimekeeperValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimekeeperModelsTimekeeperValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimekeeperModelsTimekeeperValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimekeeperValidateTimekeepers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimekeeperModelsTimekeeperValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimekeeperModelsTimekeeperValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimekeeperModelsTimekeeperValidateResponse)));
        }

    }
}
