/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new pending timecard with default values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardAddResponse</returns>
        E3EAPITimeModelsTimecardAddResponse TimeAddPendingTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Add a new pending timecard with default values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardAddResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardAddResponse> TimeAddPendingTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Applies a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecaptureModelApplyRequest">The request details. (optional)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelApplyResponse</returns>
        E3EAPIDataObjectModelModelsDataObjectModelApplyResponse TimeApplyTimeCaptureModel (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecaptureModelApplyRequest e3EAPITimeModelsTimecaptureModelApplyRequest = default(E3EAPITimeModelsTimecaptureModelApplyRequest));

        /// <summary>
        /// Applies a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecaptureModelApplyRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelApplyResponse</returns>
        ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse> TimeApplyTimeCaptureModelWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecaptureModelApplyRequest e3EAPITimeModelsTimecaptureModelApplyRequest = default(E3EAPITimeModelsTimecaptureModelApplyRequest));
        /// <summary>
        /// Cleans up pending timecards, so that only timecards with works hours or timecards with work hours or narrative remain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCleanupRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCleanupResponse</returns>
        E3EAPITimeModelsTimecardCleanupResponse TimeCleanupPendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCleanupRequest e3EAPITimeModelsTimecardCleanupRequest = default(E3EAPITimeModelsTimecardCleanupRequest));

        /// <summary>
        /// Cleans up pending timecards, so that only timecards with works hours or timecards with work hours or narrative remain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCleanupRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCleanupResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardCleanupResponse> TimeCleanupPendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCleanupRequest e3EAPITimeModelsTimecardCleanupRequest = default(E3EAPITimeModelsTimecardCleanupRequest));
        /// <summary>
        /// Cleaars timecapture post exceptions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardClearRequest">The ItemId values of the timecards. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardClearResponse</returns>
        E3EAPITimeModelsTimecardClearResponse TimeClearTimecapturePostExceptions (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardClearRequest e3EAPITimeModelsTimecardClearRequest = default(E3EAPITimeModelsTimecardClearRequest));

        /// <summary>
        /// Cleaars timecapture post exceptions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardClearRequest">The ItemId values of the timecards. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardClearResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardClearResponse> TimeClearTimecapturePostExceptionsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardClearRequest e3EAPITimeModelsTimecardClearRequest = default(E3EAPITimeModelsTimecardClearRequest));
        /// <summary>
        /// Clones one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        E3EAPITimeModelsTimecardCloneResponse TimeClonePendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));

        /// <summary>
        /// Clones one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeClonePendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));
        /// <summary>
        /// Clones one or more existing posted timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        E3EAPITimeModelsTimecardCloneResponse TimeClonePostedTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));

        /// <summary>
        /// Clones one or more existing posted timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeClonePostedTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));
        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more pending timecards from them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        E3EAPITimeModelsTimecardCloneResponse TimeClonePostedTimecardsAsPendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more pending timecards from them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeClonePostedTimecardsAsPendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));
        /// <summary>
        /// Clones one or more existing timecapture records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        E3EAPITimeModelsTimecardCloneResponse TimeCloneTimecaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));

        /// <summary>
        /// Clones one or more existing timecapture records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeCloneTimecaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));
        /// <summary>
        /// Creates a pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCreateResponse</returns>
        E3EAPITimeModelsTimecardCreateResponse TimeCreatePendingTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest));

        /// <summary>
        /// Creates a pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCreateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardCreateResponse> TimeCreatePendingTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest));
        /// <summary>
        /// Creates a posted timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCreateResponse</returns>
        E3EAPITimeModelsTimecardCreateResponse TimeCreatePostedTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest));

        /// <summary>
        /// Creates a posted timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCreateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardCreateResponse> TimeCreatePostedTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest));
        /// <summary>
        /// Creates a new timecapture record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCreateResponse</returns>
        E3EAPITimeModelsTimecardCreateResponse TimeCreateTimeCaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest));

        /// <summary>
        /// Creates a new timecapture record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCreateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardCreateResponse> TimeCreateTimeCaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest));
        /// <summary>
        /// Creates a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelCreateResponse</returns>
        E3EAPIDataObjectModelModelsDataObjectModelCreateResponse TimeCreateTimeCaptureModel (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelCreateRequest e3EAPIDataObjectModelModelsDataObjectModelCreateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelCreateRequest));

        /// <summary>
        /// Creates a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelCreateResponse</returns>
        ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse> TimeCreateTimeCaptureModelWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelCreateRequest e3EAPIDataObjectModelModelsDataObjectModelCreateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelCreateRequest));
        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more timecapture records from them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        E3EAPITimeModelsTimecardCloneResponse TimeCreateTimecaptureCardFromPosted (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more timecapture records from them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeCreateTimecaptureCardFromPostedWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest));
        /// <summary>
        /// Deletes one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardDeleteRequest">The TimecardPending.TimePendIndex values of the timecards to be deleted. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardDeleteResponse</returns>
        E3EAPITimeModelsTimecardDeleteResponse TimeDeletePendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardDeleteRequest e3EAPITimeModelsTimecardDeleteRequest = default(E3EAPITimeModelsTimecardDeleteRequest));

        /// <summary>
        /// Deletes one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardDeleteRequest">The TimecardPending.TimePendIndex values of the timecards to be deleted. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardDeleteResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardDeleteResponse> TimeDeletePendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardDeleteRequest e3EAPITimeModelsTimecardDeleteRequest = default(E3EAPITimeModelsTimecardDeleteRequest));
        /// <summary>
        /// Deletes a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest">The request details. (optional)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse</returns>
        E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse TimeDeleteTimeCaptureModel (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest = default(E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest));

        /// <summary>
        /// Deletes a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse</returns>
        ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse> TimeDeleteTimeCaptureModelWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest = default(E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest));
        /// <summary>
        /// Gets active timers for a given timekeeper and returns a ActiveTimersResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsActiveTimersResponse</returns>
        E3EAPITimeModelsActiveTimersResponse TimeGetActiveTimers (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets active timers for a given timekeeper and returns a ActiveTimersResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsActiveTimersResponse</returns>
        ApiResponse<E3EAPITimeModelsActiveTimersResponse> TimeGetActiveTimersWithHttpInfo (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets calendar data report for a given timekeeper and period.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeper">Gets or sets the timekeeper index.</param>
        /// <param name="startDate">Gets or sets the start date for a reporting period.</param>
        /// <param name="endDate">Gets or sets the end date for a reporting period.</param>
        /// <param name="matter">Gets or sets the matter index. (optional)</param>
        /// <param name="_client">Gets or sets the client index. (optional)</param>
        /// <param name="includeHours">Gets or sets a value indicating whether to return week hours objectives. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsCalendarReportGetResponse</returns>
        E3EAPITimeModelsCalendarReportGetResponse TimeGetCalendarReport (int timekeeper, DateTime startDate, DateTime endDate, int? matter = default(int?), int? _client = default(int?), bool? includeHours = default(bool?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets calendar data report for a given timekeeper and period.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeper">Gets or sets the timekeeper index.</param>
        /// <param name="startDate">Gets or sets the start date for a reporting period.</param>
        /// <param name="endDate">Gets or sets the end date for a reporting period.</param>
        /// <param name="matter">Gets or sets the matter index. (optional)</param>
        /// <param name="_client">Gets or sets the client index. (optional)</param>
        /// <param name="includeHours">Gets or sets a value indicating whether to return week hours objectives. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsCalendarReportGetResponse</returns>
        ApiResponse<E3EAPITimeModelsCalendarReportGetResponse> TimeGetCalendarReportWithHttpInfo (int timekeeper, DateTime startDate, DateTime endDate, int? matter = default(int?), int? _client = default(int?), bool? includeHours = default(bool?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets a new pending timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardTemplateResponse</returns>
        E3EAPITimeModelsTimecardTemplateResponse TimeGetNewPendingTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets a new pending timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardTemplateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewPendingTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets a new posted timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreatePendingTimecard.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPosted with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardTemplateResponse</returns>
        E3EAPITimeModelsTimecardTemplateResponse TimeGetNewPostedTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets a new posted timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreatePendingTimecard.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPosted with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardTemplateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewPostedTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets a new timecapture timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardTemplateResponse</returns>
        E3EAPITimeModelsTimecardTemplateResponse TimeGetNewTimeCaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets a new timecapture timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardTemplateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewTimeCaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets the schema for pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        E3EAPITimeModelsTimecardGetSchemaResponse TimeGetPendingTimecardSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets the schema for pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse> TimeGetPendingTimecardSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets pending timecards for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        E3EAPITimeModelsTimecardGetResponse TimeGetPendingTimecards (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets pending timecards for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeGetPendingTimecardsWithHttpInfo (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets the schema for posted timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        E3EAPITimeModelsTimecardGetSchemaResponse TimeGetPostedTimecardSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets the schema for posted timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse> TimeGetPostedTimecardSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets posted timecards for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timecardID">Gets or sets the TimecardIDs. (optional)</param>
        /// <param name="timeIndex">Gets or sets the TimeIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        E3EAPITimeModelsTimecardGetResponse TimeGetPostedTimecards (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timecardID = default(List<Guid>), int? timeIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets posted timecards for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timecardID">Gets or sets the TimecardIDs. (optional)</param>
        /// <param name="timeIndex">Gets or sets the TimeIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeGetPostedTimecardsWithHttpInfo (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timecardID = default(List<Guid>), int? timeIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets timecapture records (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetAllResponse</returns>
        E3EAPITimeModelsTimecardGetAllResponse TimeGetTimeCaptureAllCards (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets timecapture records (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetAllResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> TimeGetTimeCaptureAllCardsWithHttpInfo (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets TimeCapture models.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">Gets or sets the ID of a model. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelGetResponse</returns>
        E3EAPIDataObjectModelModelsDataObjectModelGetResponse TimeGetTimeCaptureModels (Guid? modelId = default(Guid?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets TimeCapture models.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">Gets or sets the ID of a model. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelGetResponse</returns>
        ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelGetResponse> TimeGetTimeCaptureModelsWithHttpInfo (Guid? modelId = default(Guid?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets timecapture pending records for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        E3EAPITimeModelsTimecardGetResponse TimeGetTimeCapturePendingCards (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets timecapture pending records for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeGetTimeCapturePendingCardsWithHttpInfo (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets timecards (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetAllResponse</returns>
        E3EAPITimeModelsTimecardGetAllResponse TimeGetTimecards (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets timecards (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetAllResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> TimeGetTimecardsWithHttpInfo (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets pending and posted timecards grouped for display in weekly view.
        /// </summary>
        /// <remarks>
        /// The following attributes are always returned by default (in addition to anything specified in AttributesToInclude):  WorkDate, TimePendIndex, TimeIndex, WorkHrs, IsNB, IsNoCharge, WorkType, TimeType, Office, Matter, Phase, Task, Activity, IsFlatFeeComplete, Phase2, Task2, Activity2.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate.</param>
        /// <param name="endDate">Gets or sets the EndDate.</param>
        /// <param name="lastDays">Gets or sets the LastDays. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="clientIndex">Gets or sets the ClientIndex. (optional)</param>
        /// <param name="attributesToInclude">Gets or sets a collection of attributes that should be returned with the response. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse</returns>
        E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse TimeGetTimecardsGroupedByDay (DateTime startDate, DateTime endDate, int? lastDays = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), int? mattIndex = default(int?), int? clientIndex = default(int?), List<string> attributesToInclude = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets pending and posted timecards grouped for display in weekly view.
        /// </summary>
        /// <remarks>
        /// The following attributes are always returned by default (in addition to anything specified in AttributesToInclude):  WorkDate, TimePendIndex, TimeIndex, WorkHrs, IsNB, IsNoCharge, WorkType, TimeType, Office, Matter, Phase, Task, Activity, IsFlatFeeComplete, Phase2, Task2, Activity2.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate.</param>
        /// <param name="endDate">Gets or sets the EndDate.</param>
        /// <param name="lastDays">Gets or sets the LastDays. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="clientIndex">Gets or sets the ClientIndex. (optional)</param>
        /// <param name="attributesToInclude">Gets or sets a collection of attributes that should be returned with the response. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse</returns>
        ApiResponse<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse> TimeGetTimecardsGroupedByDayWithHttpInfo (DateTime startDate, DateTime endDate, int? lastDays = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), int? mattIndex = default(int?), int? clientIndex = default(int?), List<string> attributesToInclude = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets cloned pending timecards and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        E3EAPITimeModelsTimecardGetResponse TimeModelFromPendingTimecards (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets cloned pending timecards and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeModelFromPendingTimecardsWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets cloned timecards and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIDataObjectModelsDataObjectGetResponse</returns>
        E3EAPIDataObjectModelsDataObjectGetResponse TimeModelFromPostedTimecards (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets cloned timecards and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelsDataObjectGetResponse</returns>
        ApiResponse<E3EAPIDataObjectModelsDataObjectGetResponse> TimeModelFromPostedTimecardsWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Posts one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardPostRequest">The TimecardPending.TimePendIndex values of the timecards to be posted. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardPostResponse</returns>
        E3EAPITimeModelsTimecardPostResponse TimePostPendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardPostRequest e3EAPITimeModelsTimecardPostRequest = default(E3EAPITimeModelsTimecardPostRequest));

        /// <summary>
        /// Posts one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardPostRequest">The TimecardPending.TimePendIndex values of the timecards to be posted. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardPostResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardPostResponse> TimePostPendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardPostRequest e3EAPITimeModelsTimecardPostRequest = default(E3EAPITimeModelsTimecardPostRequest));
        /// <summary>
        /// Queries timecapture records (both posted and pending) filtered out according to request body conditions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardGetAllResponse</returns>
        E3EAPITimeModelsTimecardGetAllResponse TimeQueryTimeCaptureAllCards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest));

        /// <summary>
        /// Queries timecapture records (both posted and pending) filtered out according to request body conditions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetAllResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> TimeQueryTimeCaptureAllCardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest));
        /// <summary>
        /// Queries timecapture records (pending only) filtered out according to request body conditions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        E3EAPITimeModelsTimecardGetResponse TimeQueryTimeCapturePendingCards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest));

        /// <summary>
        /// Queries timecapture records (pending only) filtered out according to request body conditions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeQueryTimeCapturePendingCardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest));
        /// <summary>
        /// Spellchecks one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardSpellCheckResponse</returns>
        E3EAPITimeModelsTimecardSpellCheckResponse TimeSpellcheckPendingTimecards (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Spellchecks one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardSpellCheckResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardSpellCheckResponse> TimeSpellcheckPendingTimecardsWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Starts/stops a timer for a given pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsStartStopTimerRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsStartStopTimerResponse</returns>
        E3EAPITimeModelsStartStopTimerResponse TimeStartStopTimer (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsStartStopTimerRequest e3EAPITimeModelsStartStopTimerRequest = default(E3EAPITimeModelsStartStopTimerRequest));

        /// <summary>
        /// Starts/stops a timer for a given pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsStartStopTimerRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsStartStopTimerResponse</returns>
        ApiResponse<E3EAPITimeModelsStartStopTimerResponse> TimeStartStopTimerWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsStartStopTimerRequest e3EAPITimeModelsStartStopTimerRequest = default(E3EAPITimeModelsStartStopTimerRequest));
        /// <summary>
        /// Updates a pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardUpdateResponse</returns>
        E3EAPITimeModelsTimecardUpdateResponse TimeUpdatePendingTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest));

        /// <summary>
        /// Updates a pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardUpdateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdatePendingTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest));
        /// <summary>
        /// Updates a posted timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardUpdateResponse</returns>
        E3EAPITimeModelsTimecardUpdateResponse TimeUpdatePostedTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest));

        /// <summary>
        /// Updates a posted timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardUpdateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdatePostedTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest));
        /// <summary>
        /// Updates an existing timecapture record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardUpdateResponse</returns>
        E3EAPITimeModelsTimecardUpdateResponse TimeUpdateTimeCaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest));

        /// <summary>
        /// Updates an existing timecapture record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardUpdateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdateTimeCaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest));
        /// <summary>
        /// Updates a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse</returns>
        E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse TimeUpdateTimeCaptureModel (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest));

        /// <summary>
        /// Updates a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse</returns>
        ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse> TimeUpdateTimeCaptureModelWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest));
        /// <summary>
        /// Validates one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecardpending.TimePendIndex values of the timecards to be validated. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardValidateResponse</returns>
        E3EAPITimeModelsTimecardValidateResponse TimeValidatePendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest));

        /// <summary>
        /// Validates one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecardpending.TimePendIndex values of the timecards to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardValidateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardValidateResponse> TimeValidatePendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest));
        /// <summary>
        /// Validates one or more existing timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecard.TimeIndex values of the timecards to be validated. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardValidateResponse</returns>
        E3EAPITimeModelsTimecardValidateResponse TimeValidatePostedTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest));

        /// <summary>
        /// Validates one or more existing timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecard.TimeIndex values of the timecards to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardValidateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardValidateResponse> TimeValidatePostedTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest));
        /// <summary>
        /// Validates one or more existing timecapture records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The ItemId values of the timecards to be validated. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardValidateResponse</returns>
        E3EAPITimeModelsTimecardValidateResponse TimeValidateTimecaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest));

        /// <summary>
        /// Validates one or more existing timecapture records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The ItemId values of the timecards to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardValidateResponse</returns>
        ApiResponse<E3EAPITimeModelsTimecardValidateResponse> TimeValidateTimecaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a new pending timecard with default values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardAddResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardAddResponse> TimeAddPendingTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a new pending timecard with default values.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardAddResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardAddResponse>> TimeAddPendingTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Applies a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecaptureModelApplyRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelApplyResponse</returns>
        System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse> TimeApplyTimeCaptureModelAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecaptureModelApplyRequest e3EAPITimeModelsTimecaptureModelApplyRequest = default(E3EAPITimeModelsTimecaptureModelApplyRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Applies a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecaptureModelApplyRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelApplyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse>> TimeApplyTimeCaptureModelWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecaptureModelApplyRequest e3EAPITimeModelsTimecaptureModelApplyRequest = default(E3EAPITimeModelsTimecaptureModelApplyRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cleans up pending timecards, so that only timecards with works hours or timecards with work hours or narrative remain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCleanupRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCleanupResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCleanupResponse> TimeCleanupPendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCleanupRequest e3EAPITimeModelsTimecardCleanupRequest = default(E3EAPITimeModelsTimecardCleanupRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cleans up pending timecards, so that only timecards with works hours or timecards with work hours or narrative remain.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCleanupRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCleanupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCleanupResponse>> TimeCleanupPendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCleanupRequest e3EAPITimeModelsTimecardCleanupRequest = default(E3EAPITimeModelsTimecardCleanupRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cleaars timecapture post exceptions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardClearRequest">The ItemId values of the timecards. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardClearResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardClearResponse> TimeClearTimecapturePostExceptionsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardClearRequest e3EAPITimeModelsTimecardClearRequest = default(E3EAPITimeModelsTimecardClearRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cleaars timecapture post exceptions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardClearRequest">The ItemId values of the timecards. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardClearResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardClearResponse>> TimeClearTimecapturePostExceptionsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardClearRequest e3EAPITimeModelsTimecardClearRequest = default(E3EAPITimeModelsTimecardClearRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clones one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeClonePendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clones one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeClonePendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clones one or more existing posted timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeClonePostedTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clones one or more existing posted timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeClonePostedTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more pending timecards from them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeClonePostedTimecardsAsPendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more pending timecards from them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeClonePostedTimecardsAsPendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clones one or more existing timecapture records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeCloneTimecaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clones one or more existing timecapture records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeCloneTimecaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCreateResponse> TimeCreatePendingTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCreateResponse>> TimeCreatePendingTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a posted timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCreateResponse> TimeCreatePostedTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a posted timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCreateResponse>> TimeCreatePostedTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a new timecapture record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCreateResponse> TimeCreateTimeCaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new timecapture record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCreateResponse>> TimeCreateTimeCaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Creates a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse> TimeCreateTimeCaptureModelAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelCreateRequest e3EAPIDataObjectModelModelsDataObjectModelCreateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse>> TimeCreateTimeCaptureModelWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelCreateRequest e3EAPIDataObjectModelModelsDataObjectModelCreateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more timecapture records from them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeCreateTimecaptureCardFromPostedAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more timecapture records from them.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeCreateTimecaptureCardFromPostedWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardDeleteRequest">The TimecardPending.TimePendIndex values of the timecards to be deleted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardDeleteResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardDeleteResponse> TimeDeletePendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardDeleteRequest e3EAPITimeModelsTimecardDeleteRequest = default(E3EAPITimeModelsTimecardDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardDeleteRequest">The TimecardPending.TimePendIndex values of the timecards to be deleted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardDeleteResponse>> TimeDeletePendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardDeleteRequest e3EAPITimeModelsTimecardDeleteRequest = default(E3EAPITimeModelsTimecardDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Deletes a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse</returns>
        System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse> TimeDeleteTimeCaptureModelAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest = default(E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse>> TimeDeleteTimeCaptureModelWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest = default(E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets active timers for a given timekeeper and returns a ActiveTimersResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsActiveTimersResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsActiveTimersResponse> TimeGetActiveTimersAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets active timers for a given timekeeper and returns a ActiveTimersResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsActiveTimersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsActiveTimersResponse>> TimeGetActiveTimersWithHttpInfoAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets calendar data report for a given timekeeper and period.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeper">Gets or sets the timekeeper index.</param>
        /// <param name="startDate">Gets or sets the start date for a reporting period.</param>
        /// <param name="endDate">Gets or sets the end date for a reporting period.</param>
        /// <param name="matter">Gets or sets the matter index. (optional)</param>
        /// <param name="_client">Gets or sets the client index. (optional)</param>
        /// <param name="includeHours">Gets or sets a value indicating whether to return week hours objectives. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsCalendarReportGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsCalendarReportGetResponse> TimeGetCalendarReportAsync (int timekeeper, DateTime startDate, DateTime endDate, int? matter = default(int?), int? _client = default(int?), bool? includeHours = default(bool?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets calendar data report for a given timekeeper and period.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeper">Gets or sets the timekeeper index.</param>
        /// <param name="startDate">Gets or sets the start date for a reporting period.</param>
        /// <param name="endDate">Gets or sets the end date for a reporting period.</param>
        /// <param name="matter">Gets or sets the matter index. (optional)</param>
        /// <param name="_client">Gets or sets the client index. (optional)</param>
        /// <param name="includeHours">Gets or sets a value indicating whether to return week hours objectives. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsCalendarReportGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsCalendarReportGetResponse>> TimeGetCalendarReportWithHttpInfoAsync (int timekeeper, DateTime startDate, DateTime endDate, int? matter = default(int?), int? _client = default(int?), bool? includeHours = default(bool?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a new pending timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardTemplateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewPendingTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new pending timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>> TimeGetNewPendingTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a new posted timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreatePendingTimecard.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPosted with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardTemplateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewPostedTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new posted timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreatePendingTimecard.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPosted with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>> TimeGetNewPostedTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a new timecapture timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardTemplateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewTimeCaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new timecapture timecard with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>> TimeGetNewTimeCaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the schema for pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetSchemaResponse> TimeGetPendingTimecardSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the schema for pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetSchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse>> TimeGetPendingTimecardSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets pending timecards for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeGetPendingTimecardsAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets pending timecards for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeGetPendingTimecardsWithHttpInfoAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the schema for posted timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetSchemaResponse> TimeGetPostedTimecardSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the schema for posted timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetSchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse>> TimeGetPostedTimecardSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets posted timecards for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timecardID">Gets or sets the TimecardIDs. (optional)</param>
        /// <param name="timeIndex">Gets or sets the TimeIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeGetPostedTimecardsAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timecardID = default(List<Guid>), int? timeIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets posted timecards for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timecardID">Gets or sets the TimecardIDs. (optional)</param>
        /// <param name="timeIndex">Gets or sets the TimeIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeGetPostedTimecardsWithHttpInfoAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timecardID = default(List<Guid>), int? timeIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets timecapture records (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetAllResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetAllResponse> TimeGetTimeCaptureAllCardsAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets timecapture records (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>> TimeGetTimeCaptureAllCardsWithHttpInfoAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets TimeCapture models.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">Gets or sets the ID of a model. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelGetResponse> TimeGetTimeCaptureModelsAsync (Guid? modelId = default(Guid?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets TimeCapture models.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">Gets or sets the ID of a model. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelGetResponse>> TimeGetTimeCaptureModelsWithHttpInfoAsync (Guid? modelId = default(Guid?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets timecapture pending records for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeGetTimeCapturePendingCardsAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets timecapture pending records for a given timekeeper and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeGetTimeCapturePendingCardsWithHttpInfoAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets timecards (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetAllResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetAllResponse> TimeGetTimecardsAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets timecards (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>> TimeGetTimecardsWithHttpInfoAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets pending and posted timecards grouped for display in weekly view.
        /// </summary>
        /// <remarks>
        /// The following attributes are always returned by default (in addition to anything specified in AttributesToInclude):  WorkDate, TimePendIndex, TimeIndex, WorkHrs, IsNB, IsNoCharge, WorkType, TimeType, Office, Matter, Phase, Task, Activity, IsFlatFeeComplete, Phase2, Task2, Activity2.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate.</param>
        /// <param name="endDate">Gets or sets the EndDate.</param>
        /// <param name="lastDays">Gets or sets the LastDays. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="clientIndex">Gets or sets the ClientIndex. (optional)</param>
        /// <param name="attributesToInclude">Gets or sets a collection of attributes that should be returned with the response. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse> TimeGetTimecardsGroupedByDayAsync (DateTime startDate, DateTime endDate, int? lastDays = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), int? mattIndex = default(int?), int? clientIndex = default(int?), List<string> attributesToInclude = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets pending and posted timecards grouped for display in weekly view.
        /// </summary>
        /// <remarks>
        /// The following attributes are always returned by default (in addition to anything specified in AttributesToInclude):  WorkDate, TimePendIndex, TimeIndex, WorkHrs, IsNB, IsNoCharge, WorkType, TimeType, Office, Matter, Phase, Task, Activity, IsFlatFeeComplete, Phase2, Task2, Activity2.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate.</param>
        /// <param name="endDate">Gets or sets the EndDate.</param>
        /// <param name="lastDays">Gets or sets the LastDays. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="clientIndex">Gets or sets the ClientIndex. (optional)</param>
        /// <param name="attributesToInclude">Gets or sets a collection of attributes that should be returned with the response. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse>> TimeGetTimecardsGroupedByDayWithHttpInfoAsync (DateTime startDate, DateTime endDate, int? lastDays = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), int? mattIndex = default(int?), int? clientIndex = default(int?), List<string> attributesToInclude = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets cloned pending timecards and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeModelFromPendingTimecardsAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets cloned pending timecards and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeModelFromPendingTimecardsWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets cloned timecards and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelsDataObjectGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIDataObjectModelsDataObjectGetResponse> TimeModelFromPostedTimecardsAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets cloned timecards and returns a TimecardGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelsDataObjectGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelsDataObjectGetResponse>> TimeModelFromPostedTimecardsWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Posts one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardPostRequest">The TimecardPending.TimePendIndex values of the timecards to be posted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardPostResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardPostResponse> TimePostPendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardPostRequest e3EAPITimeModelsTimecardPostRequest = default(E3EAPITimeModelsTimecardPostRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Posts one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardPostRequest">The TimecardPending.TimePendIndex values of the timecards to be posted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardPostResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardPostResponse>> TimePostPendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardPostRequest e3EAPITimeModelsTimecardPostRequest = default(E3EAPITimeModelsTimecardPostRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Queries timecapture records (both posted and pending) filtered out according to request body conditions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetAllResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetAllResponse> TimeQueryTimeCaptureAllCardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Queries timecapture records (both posted and pending) filtered out according to request body conditions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetAllResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>> TimeQueryTimeCaptureAllCardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Queries timecapture records (pending only) filtered out according to request body conditions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeQueryTimeCapturePendingCardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Queries timecapture records (pending only) filtered out according to request body conditions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeQueryTimeCapturePendingCardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Spellchecks one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardSpellCheckResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardSpellCheckResponse> TimeSpellcheckPendingTimecardsAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Spellchecks one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardSpellCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardSpellCheckResponse>> TimeSpellcheckPendingTimecardsWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Starts/stops a timer for a given pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsStartStopTimerRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsStartStopTimerResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsStartStopTimerResponse> TimeStartStopTimerAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsStartStopTimerRequest e3EAPITimeModelsStartStopTimerRequest = default(E3EAPITimeModelsStartStopTimerRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Starts/stops a timer for a given pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsStartStopTimerRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsStartStopTimerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsStartStopTimerResponse>> TimeStartStopTimerWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsStartStopTimerRequest e3EAPITimeModelsStartStopTimerRequest = default(E3EAPITimeModelsStartStopTimerRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardUpdateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdatePendingTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a pending timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>> TimeUpdatePendingTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a posted timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardUpdateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdatePostedTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a posted timecard.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>> TimeUpdatePostedTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates an existing timecapture record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardUpdateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdateTimeCaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates an existing timecapture record.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>> TimeUpdateTimeCaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse> TimeUpdateTimeCaptureModelAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a TimeCapture model.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse>> TimeUpdateTimeCaptureModelWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validates one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecardpending.TimePendIndex values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardValidateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardValidateResponse> TimeValidatePendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates one or more existing pending timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecardpending.TimePendIndex values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardValidateResponse>> TimeValidatePendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validates one or more existing timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecard.TimeIndex values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardValidateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardValidateResponse> TimeValidatePostedTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates one or more existing timecards.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecard.TimeIndex values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardValidateResponse>> TimeValidatePostedTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validates one or more existing timecapture records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The ItemId values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardValidateResponse</returns>
        System.Threading.Tasks.Task<E3EAPITimeModelsTimecardValidateResponse> TimeValidateTimecaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates one or more existing timecapture records.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The ItemId values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardValidateResponse>> TimeValidateTimecaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimeApi : ITimeApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimeApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeApi"/> class
        /// </summary>
        /// <returns></returns>
        public TimeApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimeApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a new pending timecard with default values. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardAddResponse</returns>
        public E3EAPITimeModelsTimecardAddResponse TimeAddPendingTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardAddResponse> localVarResponse = TimeAddPendingTimecardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new pending timecard with default values. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardAddResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardAddResponse> TimeAddPendingTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/pending/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeAddPendingTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardAddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardAddResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardAddResponse)));
        }

        /// <summary>
        /// Add a new pending timecard with default values. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardAddResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardAddResponse> TimeAddPendingTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardAddResponse> localVarResponse = await TimeAddPendingTimecardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new pending timecard with default values. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardAddResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardAddResponse>> TimeAddPendingTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeAddPendingTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardAddResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardAddResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardAddResponse)));
        }

        /// <summary>
        /// Applies a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecaptureModelApplyRequest">The request details. (optional)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelApplyResponse</returns>
        public E3EAPIDataObjectModelModelsDataObjectModelApplyResponse TimeApplyTimeCaptureModel (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecaptureModelApplyRequest e3EAPITimeModelsTimecaptureModelApplyRequest = default(E3EAPITimeModelsTimecaptureModelApplyRequest))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse> localVarResponse = TimeApplyTimeCaptureModelWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecaptureModelApplyRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Applies a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecaptureModelApplyRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelApplyResponse</returns>
        public ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse> TimeApplyTimeCaptureModelWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecaptureModelApplyRequest e3EAPITimeModelsTimecaptureModelApplyRequest = default(E3EAPITimeModelsTimecaptureModelApplyRequest))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecaptureModelApplyRequest != null && e3EAPITimeModelsTimecaptureModelApplyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecaptureModelApplyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecaptureModelApplyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeApplyTimeCaptureModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelApplyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelApplyResponse)));
        }

        /// <summary>
        /// Applies a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecaptureModelApplyRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelApplyResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse> TimeApplyTimeCaptureModelAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecaptureModelApplyRequest e3EAPITimeModelsTimecaptureModelApplyRequest = default(E3EAPITimeModelsTimecaptureModelApplyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse> localVarResponse = await TimeApplyTimeCaptureModelWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecaptureModelApplyRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Applies a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecaptureModelApplyRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelApplyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse>> TimeApplyTimeCaptureModelWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecaptureModelApplyRequest e3EAPITimeModelsTimecaptureModelApplyRequest = default(E3EAPITimeModelsTimecaptureModelApplyRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecaptureModelApplyRequest != null && e3EAPITimeModelsTimecaptureModelApplyRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecaptureModelApplyRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecaptureModelApplyRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeApplyTimeCaptureModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelApplyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelApplyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelApplyResponse)));
        }

        /// <summary>
        /// Cleans up pending timecards, so that only timecards with works hours or timecards with work hours or narrative remain. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCleanupRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCleanupResponse</returns>
        public E3EAPITimeModelsTimecardCleanupResponse TimeCleanupPendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCleanupRequest e3EAPITimeModelsTimecardCleanupRequest = default(E3EAPITimeModelsTimecardCleanupRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardCleanupResponse> localVarResponse = TimeCleanupPendingTimecardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCleanupRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cleans up pending timecards, so that only timecards with works hours or timecards with work hours or narrative remain. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCleanupRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCleanupResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardCleanupResponse> TimeCleanupPendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCleanupRequest e3EAPITimeModelsTimecardCleanupRequest = default(E3EAPITimeModelsTimecardCleanupRequest))
        {

            var localVarPath = "/api/v1/time/pending/cleanup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCleanupRequest != null && e3EAPITimeModelsTimecardCleanupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCleanupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCleanupRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCleanupPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCleanupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCleanupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCleanupResponse)));
        }

        /// <summary>
        /// Cleans up pending timecards, so that only timecards with works hours or timecards with work hours or narrative remain. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCleanupRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCleanupResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCleanupResponse> TimeCleanupPendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCleanupRequest e3EAPITimeModelsTimecardCleanupRequest = default(E3EAPITimeModelsTimecardCleanupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardCleanupResponse> localVarResponse = await TimeCleanupPendingTimecardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCleanupRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cleans up pending timecards, so that only timecards with works hours or timecards with work hours or narrative remain. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCleanupRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCleanupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCleanupResponse>> TimeCleanupPendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCleanupRequest e3EAPITimeModelsTimecardCleanupRequest = default(E3EAPITimeModelsTimecardCleanupRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending/cleanup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCleanupRequest != null && e3EAPITimeModelsTimecardCleanupRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCleanupRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCleanupRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCleanupPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCleanupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCleanupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCleanupResponse)));
        }

        /// <summary>
        /// Cleaars timecapture post exceptions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardClearRequest">The ItemId values of the timecards. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardClearResponse</returns>
        public E3EAPITimeModelsTimecardClearResponse TimeClearTimecapturePostExceptions (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardClearRequest e3EAPITimeModelsTimecardClearRequest = default(E3EAPITimeModelsTimecardClearRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardClearResponse> localVarResponse = TimeClearTimecapturePostExceptionsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardClearRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cleaars timecapture post exceptions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardClearRequest">The ItemId values of the timecards. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardClearResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardClearResponse> TimeClearTimecapturePostExceptionsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardClearRequest e3EAPITimeModelsTimecardClearRequest = default(E3EAPITimeModelsTimecardClearRequest))
        {

            var localVarPath = "/api/v1/time/timecapture/clearPostExceptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardClearRequest != null && e3EAPITimeModelsTimecardClearRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardClearRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardClearRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeClearTimecapturePostExceptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardClearResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardClearResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardClearResponse)));
        }

        /// <summary>
        /// Cleaars timecapture post exceptions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardClearRequest">The ItemId values of the timecards. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardClearResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardClearResponse> TimeClearTimecapturePostExceptionsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardClearRequest e3EAPITimeModelsTimecardClearRequest = default(E3EAPITimeModelsTimecardClearRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardClearResponse> localVarResponse = await TimeClearTimecapturePostExceptionsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardClearRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cleaars timecapture post exceptions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardClearRequest">The ItemId values of the timecards. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardClearResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardClearResponse>> TimeClearTimecapturePostExceptionsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardClearRequest e3EAPITimeModelsTimecardClearRequest = default(E3EAPITimeModelsTimecardClearRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture/clearPostExceptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardClearRequest != null && e3EAPITimeModelsTimecardClearRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardClearRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardClearRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeClearTimecapturePostExceptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardClearResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardClearResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardClearResponse)));
        }

        /// <summary>
        /// Clones one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        public E3EAPITimeModelsTimecardCloneResponse TimeClonePendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = TimeClonePendingTimecardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clones one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeClonePendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {

            var localVarPath = "/api/v1/time/pending/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeClonePendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Clones one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeClonePendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = await TimeClonePendingTimecardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clones one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeClonePendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeClonePendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Clones one or more existing posted timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        public E3EAPITimeModelsTimecardCloneResponse TimeClonePostedTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = TimeClonePostedTimecardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clones one or more existing posted timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeClonePostedTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {

            var localVarPath = "/api/v1/time/posted/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeClonePostedTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Clones one or more existing posted timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeClonePostedTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = await TimeClonePostedTimecardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clones one or more existing posted timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeClonePostedTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/posted/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeClonePostedTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more pending timecards from them. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        public E3EAPITimeModelsTimecardCloneResponse TimeClonePostedTimecardsAsPendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = TimeClonePostedTimecardsAsPendingTimecardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more pending timecards from them. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeClonePostedTimecardsAsPendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {

            var localVarPath = "/api/v1/time/posted/cloneaspending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeClonePostedTimecardsAsPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more pending timecards from them. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeClonePostedTimecardsAsPendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = await TimeClonePostedTimecardsAsPendingTimecardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more pending timecards from them. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeClonePostedTimecardsAsPendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/posted/cloneaspending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeClonePostedTimecardsAsPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Clones one or more existing timecapture records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        public E3EAPITimeModelsTimecardCloneResponse TimeCloneTimecaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = TimeCloneTimecaptureCardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clones one or more existing timecapture records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeCloneTimecaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {

            var localVarPath = "/api/v1/time/timecapture/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCloneTimecaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Clones one or more existing timecapture records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeCloneTimecaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = await TimeCloneTimecaptureCardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clones one or more existing timecapture records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The TimecardPending.TimePendIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeCloneTimecaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCloneTimecaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Creates a pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCreateResponse</returns>
        public E3EAPITimeModelsTimecardCreateResponse TimeCreatePendingTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardCreateResponse> localVarResponse = TimeCreatePendingTimecardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCreateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardCreateResponse> TimeCreatePendingTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest))
        {

            var localVarPath = "/api/v1/time/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCreateRequest != null && e3EAPITimeModelsTimecardCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreatePendingTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCreateResponse)));
        }

        /// <summary>
        /// Creates a pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCreateResponse> TimeCreatePendingTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardCreateResponse> localVarResponse = await TimeCreatePendingTimecardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCreateResponse>> TimeCreatePendingTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCreateRequest != null && e3EAPITimeModelsTimecardCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreatePendingTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCreateResponse)));
        }

        /// <summary>
        /// Creates a posted timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCreateResponse</returns>
        public E3EAPITimeModelsTimecardCreateResponse TimeCreatePostedTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardCreateResponse> localVarResponse = TimeCreatePostedTimecardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a posted timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCreateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardCreateResponse> TimeCreatePostedTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest))
        {

            var localVarPath = "/api/v1/time/posted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCreateRequest != null && e3EAPITimeModelsTimecardCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreatePostedTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCreateResponse)));
        }

        /// <summary>
        /// Creates a posted timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCreateResponse> TimeCreatePostedTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardCreateResponse> localVarResponse = await TimeCreatePostedTimecardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a posted timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCreateResponse>> TimeCreatePostedTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/posted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCreateRequest != null && e3EAPITimeModelsTimecardCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreatePostedTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCreateResponse)));
        }

        /// <summary>
        /// Creates a new timecapture record. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCreateResponse</returns>
        public E3EAPITimeModelsTimecardCreateResponse TimeCreateTimeCaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardCreateResponse> localVarResponse = TimeCreateTimeCaptureCardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new timecapture record. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCreateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardCreateResponse> TimeCreateTimeCaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest))
        {

            var localVarPath = "/api/v1/time/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCreateRequest != null && e3EAPITimeModelsTimecardCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreateTimeCaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCreateResponse)));
        }

        /// <summary>
        /// Creates a new timecapture record. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCreateResponse> TimeCreateTimeCaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardCreateResponse> localVarResponse = await TimeCreateTimeCaptureCardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new timecapture record. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCreateResponse>> TimeCreateTimeCaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCreateRequest e3EAPITimeModelsTimecardCreateRequest = default(E3EAPITimeModelsTimecardCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCreateRequest != null && e3EAPITimeModelsTimecardCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreateTimeCaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCreateResponse)));
        }

        /// <summary>
        /// Creates a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelCreateResponse</returns>
        public E3EAPIDataObjectModelModelsDataObjectModelCreateResponse TimeCreateTimeCaptureModel (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelCreateRequest e3EAPIDataObjectModelModelsDataObjectModelCreateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelCreateRequest))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse> localVarResponse = TimeCreateTimeCaptureModelWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIDataObjectModelModelsDataObjectModelCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelCreateResponse</returns>
        public ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse> TimeCreateTimeCaptureModelWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelCreateRequest e3EAPIDataObjectModelModelsDataObjectModelCreateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelCreateRequest))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIDataObjectModelModelsDataObjectModelCreateRequest != null && e3EAPIDataObjectModelModelsDataObjectModelCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIDataObjectModelModelsDataObjectModelCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIDataObjectModelModelsDataObjectModelCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreateTimeCaptureModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelCreateResponse)));
        }

        /// <summary>
        /// Creates a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse> TimeCreateTimeCaptureModelAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelCreateRequest e3EAPIDataObjectModelModelsDataObjectModelCreateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse> localVarResponse = await TimeCreateTimeCaptureModelWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIDataObjectModelModelsDataObjectModelCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse>> TimeCreateTimeCaptureModelWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelCreateRequest e3EAPIDataObjectModelModelsDataObjectModelCreateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIDataObjectModelModelsDataObjectModelCreateRequest != null && e3EAPIDataObjectModelModelsDataObjectModelCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIDataObjectModelModelsDataObjectModelCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIDataObjectModelModelsDataObjectModelCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreateTimeCaptureModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelCreateResponse)));
        }

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more timecapture records from them. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardCloneResponse</returns>
        public E3EAPITimeModelsTimecardCloneResponse TimeCreateTimecaptureCardFromPosted (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = TimeCreateTimecaptureCardFromPostedWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more timecapture records from them. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardCloneResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardCloneResponse> TimeCreateTimecaptureCardFromPostedWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest))
        {

            var localVarPath = "/api/v1/time/timecapture/clonefromposted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreateTimecaptureCardFromPosted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more timecapture records from them. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardCloneResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardCloneResponse> TimeCreateTimecaptureCardFromPostedAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardCloneResponse> localVarResponse = await TimeCreateTimecaptureCardFromPostedWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardCloneRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clones one or more existing posted timecards and creates one or more timecapture records from them. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardCloneRequest">The Timecard.TimeIndex values of the timecards to be cloned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardCloneResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardCloneResponse>> TimeCreateTimecaptureCardFromPostedWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardCloneRequest e3EAPITimeModelsTimecardCloneRequest = default(E3EAPITimeModelsTimecardCloneRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture/clonefromposted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardCloneRequest != null && e3EAPITimeModelsTimecardCloneRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardCloneRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardCloneRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeCreateTimecaptureCardFromPosted", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardCloneResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardCloneResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardCloneResponse)));
        }

        /// <summary>
        /// Deletes one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardDeleteRequest">The TimecardPending.TimePendIndex values of the timecards to be deleted. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardDeleteResponse</returns>
        public E3EAPITimeModelsTimecardDeleteResponse TimeDeletePendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardDeleteRequest e3EAPITimeModelsTimecardDeleteRequest = default(E3EAPITimeModelsTimecardDeleteRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardDeleteResponse> localVarResponse = TimeDeletePendingTimecardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardDeleteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardDeleteRequest">The TimecardPending.TimePendIndex values of the timecards to be deleted. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardDeleteResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardDeleteResponse> TimeDeletePendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardDeleteRequest e3EAPITimeModelsTimecardDeleteRequest = default(E3EAPITimeModelsTimecardDeleteRequest))
        {

            var localVarPath = "/api/v1/time/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardDeleteRequest != null && e3EAPITimeModelsTimecardDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardDeleteRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeDeletePendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardDeleteResponse)));
        }

        /// <summary>
        /// Deletes one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardDeleteRequest">The TimecardPending.TimePendIndex values of the timecards to be deleted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardDeleteResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardDeleteResponse> TimeDeletePendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardDeleteRequest e3EAPITimeModelsTimecardDeleteRequest = default(E3EAPITimeModelsTimecardDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardDeleteResponse> localVarResponse = await TimeDeletePendingTimecardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardDeleteRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardDeleteRequest">The TimecardPending.TimePendIndex values of the timecards to be deleted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardDeleteResponse>> TimeDeletePendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardDeleteRequest e3EAPITimeModelsTimecardDeleteRequest = default(E3EAPITimeModelsTimecardDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardDeleteRequest != null && e3EAPITimeModelsTimecardDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardDeleteRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeDeletePendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardDeleteResponse)));
        }

        /// <summary>
        /// Deletes a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest">The request details. (optional)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse</returns>
        public E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse TimeDeleteTimeCaptureModel (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest = default(E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse> localVarResponse = TimeDeleteTimeCaptureModelWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse</returns>
        public ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse> TimeDeleteTimeCaptureModelWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest = default(E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest != null && e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeDeleteTimeCaptureModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse)));
        }

        /// <summary>
        /// Deletes a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse> TimeDeleteTimeCaptureModelAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest = default(E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse> localVarResponse = await TimeDeleteTimeCaptureModelWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse>> TimeDeleteTimeCaptureModelWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest = default(E3EAPIDataObjectModelModelsDataObjectModelDeleteRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest != null && e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIDataObjectModelModelsDataObjectModelDeleteRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeDeleteTimeCaptureModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelDeleteResponse)));
        }

        /// <summary>
        /// Gets active timers for a given timekeeper and returns a ActiveTimersResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsActiveTimersResponse</returns>
        public E3EAPITimeModelsActiveTimersResponse TimeGetActiveTimers (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsActiveTimersResponse> localVarResponse = TimeGetActiveTimersWithHttpInfo(index, startDate, endDate, timekeeperIndex, timekeeperNumber, timekeeperID, itemIds, attributesToInclude, filterXOQL, filterPredicates, filterOperator, filterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets active timers for a given timekeeper and returns a ActiveTimersResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsActiveTimersResponse</returns>
        public ApiResponse<E3EAPITimeModelsActiveTimersResponse> TimeGetActiveTimersWithHttpInfo (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/timer/activetimers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemIds", itemIds)); // query parameter
            if (attributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AttributesToInclude", attributesToInclude)); // query parameter
            if (filterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FilterXOQL", filterXOQL)); // query parameter
            if (filterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Predicates", filterPredicates)); // query parameter
            if (filterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filter.Operator", filterOperator)); // query parameter
            if (filterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Groups", filterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetActiveTimers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsActiveTimersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsActiveTimersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsActiveTimersResponse)));
        }

        /// <summary>
        /// Gets active timers for a given timekeeper and returns a ActiveTimersResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsActiveTimersResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsActiveTimersResponse> TimeGetActiveTimersAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsActiveTimersResponse> localVarResponse = await TimeGetActiveTimersWithHttpInfoAsync(index, startDate, endDate, timekeeperIndex, timekeeperNumber, timekeeperID, itemIds, attributesToInclude, filterXOQL, filterPredicates, filterOperator, filterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets active timers for a given timekeeper and returns a ActiveTimersResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsActiveTimersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsActiveTimersResponse>> TimeGetActiveTimersWithHttpInfoAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timer/activetimers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemIds", itemIds)); // query parameter
            if (attributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AttributesToInclude", attributesToInclude)); // query parameter
            if (filterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FilterXOQL", filterXOQL)); // query parameter
            if (filterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Predicates", filterPredicates)); // query parameter
            if (filterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filter.Operator", filterOperator)); // query parameter
            if (filterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Groups", filterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetActiveTimers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsActiveTimersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsActiveTimersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsActiveTimersResponse)));
        }

        /// <summary>
        /// Gets calendar data report for a given timekeeper and period. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeper">Gets or sets the timekeeper index.</param>
        /// <param name="startDate">Gets or sets the start date for a reporting period.</param>
        /// <param name="endDate">Gets or sets the end date for a reporting period.</param>
        /// <param name="matter">Gets or sets the matter index. (optional)</param>
        /// <param name="_client">Gets or sets the client index. (optional)</param>
        /// <param name="includeHours">Gets or sets a value indicating whether to return week hours objectives. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsCalendarReportGetResponse</returns>
        public E3EAPITimeModelsCalendarReportGetResponse TimeGetCalendarReport (int timekeeper, DateTime startDate, DateTime endDate, int? matter = default(int?), int? _client = default(int?), bool? includeHours = default(bool?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsCalendarReportGetResponse> localVarResponse = TimeGetCalendarReportWithHttpInfo(timekeeper, startDate, endDate, matter, _client, includeHours, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets calendar data report for a given timekeeper and period. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeper">Gets or sets the timekeeper index.</param>
        /// <param name="startDate">Gets or sets the start date for a reporting period.</param>
        /// <param name="endDate">Gets or sets the end date for a reporting period.</param>
        /// <param name="matter">Gets or sets the matter index. (optional)</param>
        /// <param name="_client">Gets or sets the client index. (optional)</param>
        /// <param name="includeHours">Gets or sets a value indicating whether to return week hours objectives. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsCalendarReportGetResponse</returns>
        public ApiResponse<E3EAPITimeModelsCalendarReportGetResponse> TimeGetCalendarReportWithHttpInfo (int timekeeper, DateTime startDate, DateTime endDate, int? matter = default(int?), int? _client = default(int?), bool? includeHours = default(bool?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
            // verify the required parameter 'timekeeper' is set
            if (timekeeper == null)
                throw new ApiException(400, "Missing required parameter 'timekeeper' when calling TimeApi->TimeGetCalendarReport");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling TimeApi->TimeGetCalendarReport");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling TimeApi->TimeGetCalendarReport");

            var localVarPath = "/api/v1/time/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timekeeper != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Timekeeper", timekeeper)); // query parameter
            if (matter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Matter", matter)); // query parameter
            if (_client != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Client", _client)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (includeHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeHours", includeHours)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetCalendarReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsCalendarReportGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsCalendarReportGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsCalendarReportGetResponse)));
        }

        /// <summary>
        /// Gets calendar data report for a given timekeeper and period. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeper">Gets or sets the timekeeper index.</param>
        /// <param name="startDate">Gets or sets the start date for a reporting period.</param>
        /// <param name="endDate">Gets or sets the end date for a reporting period.</param>
        /// <param name="matter">Gets or sets the matter index. (optional)</param>
        /// <param name="_client">Gets or sets the client index. (optional)</param>
        /// <param name="includeHours">Gets or sets a value indicating whether to return week hours objectives. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsCalendarReportGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsCalendarReportGetResponse> TimeGetCalendarReportAsync (int timekeeper, DateTime startDate, DateTime endDate, int? matter = default(int?), int? _client = default(int?), bool? includeHours = default(bool?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsCalendarReportGetResponse> localVarResponse = await TimeGetCalendarReportWithHttpInfoAsync(timekeeper, startDate, endDate, matter, _client, includeHours, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets calendar data report for a given timekeeper and period. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timekeeper">Gets or sets the timekeeper index.</param>
        /// <param name="startDate">Gets or sets the start date for a reporting period.</param>
        /// <param name="endDate">Gets or sets the end date for a reporting period.</param>
        /// <param name="matter">Gets or sets the matter index. (optional)</param>
        /// <param name="_client">Gets or sets the client index. (optional)</param>
        /// <param name="includeHours">Gets or sets a value indicating whether to return week hours objectives. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsCalendarReportGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsCalendarReportGetResponse>> TimeGetCalendarReportWithHttpInfoAsync (int timekeeper, DateTime startDate, DateTime endDate, int? matter = default(int?), int? _client = default(int?), bool? includeHours = default(bool?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'timekeeper' is set
            if (timekeeper == null)
                throw new ApiException(400, "Missing required parameter 'timekeeper' when calling TimeApi->TimeGetCalendarReport");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling TimeApi->TimeGetCalendarReport");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling TimeApi->TimeGetCalendarReport");

            var localVarPath = "/api/v1/time/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timekeeper != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Timekeeper", timekeeper)); // query parameter
            if (matter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Matter", matter)); // query parameter
            if (_client != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Client", _client)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (includeHours != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "IncludeHours", includeHours)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetCalendarReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsCalendarReportGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsCalendarReportGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsCalendarReportGetResponse)));
        }

        /// <summary>
        /// Gets a new pending timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardTemplateResponse</returns>
        public E3EAPITimeModelsTimecardTemplateResponse TimeGetNewPendingTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> localVarResponse = TimeGetNewPendingTimecardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new pending timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardTemplateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewPendingTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/pending/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetNewPendingTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardTemplateResponse)));
        }

        /// <summary>
        /// Gets a new pending timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardTemplateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewPendingTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> localVarResponse = await TimeGetNewPendingTimecardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new pending timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>> TimeGetNewPendingTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetNewPendingTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardTemplateResponse)));
        }

        /// <summary>
        /// Gets a new posted timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreatePendingTimecard.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPosted with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardTemplateResponse</returns>
        public E3EAPITimeModelsTimecardTemplateResponse TimeGetNewPostedTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> localVarResponse = TimeGetNewPostedTimecardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new posted timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreatePendingTimecard.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPosted with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardTemplateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewPostedTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/posted/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetNewPostedTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardTemplateResponse)));
        }

        /// <summary>
        /// Gets a new posted timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreatePendingTimecard.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPosted with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardTemplateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewPostedTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> localVarResponse = await TimeGetNewPostedTimecardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new posted timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreatePendingTimecard.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPosted with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>> TimeGetNewPostedTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/posted/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetNewPostedTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardTemplateResponse)));
        }

        /// <summary>
        /// Gets a new timecapture timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardTemplateResponse</returns>
        public E3EAPITimeModelsTimecardTemplateResponse TimeGetNewTimeCaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> localVarResponse = TimeGetNewTimeCaptureCardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new timecapture timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardTemplateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewTimeCaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/timecapture/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetNewTimeCaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardTemplateResponse)));
        }

        /// <summary>
        /// Gets a new timecapture timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardTemplateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardTemplateResponse> TimeGetNewTimeCaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardTemplateResponse> localVarResponse = await TimeGetNewTimeCaptureCardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new timecapture timecard with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateTimecardPending.  e.g. call this method, then set whichever attributes need to be changed and then call CreateTimecardPending with the modified RootData.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>> TimeGetNewTimeCaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetNewTimeCaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardTemplateResponse)));
        }

        /// <summary>
        /// Gets the schema for pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        public E3EAPITimeModelsTimecardGetSchemaResponse TimeGetPendingTimecardSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse> localVarResponse = TimeGetPendingTimecardSchemaWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the schema for pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse> TimeGetPendingTimecardSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/pending/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetPendingTimecardSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetSchemaResponse)));
        }

        /// <summary>
        /// Gets the schema for pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetSchemaResponse> TimeGetPendingTimecardSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse> localVarResponse = await TimeGetPendingTimecardSchemaWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the schema for pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetSchemaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse>> TimeGetPendingTimecardSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetPendingTimecardSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetSchemaResponse)));
        }

        /// <summary>
        /// Gets pending timecards for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        public E3EAPITimeModelsTimecardGetResponse TimeGetPendingTimecards (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = TimeGetPendingTimecardsWithHttpInfo(startDate, endDate, timeCardPendingID, timePendIndex, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets pending timecards for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeGetPendingTimecardsWithHttpInfo (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timeCardPendingID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TimeCardPendingID", timeCardPendingID)); // query parameter
            if (timePendIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimePendIndex", timePendIndex)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Gets pending timecards for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeGetPendingTimecardsAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = await TimeGetPendingTimecardsWithHttpInfoAsync(startDate, endDate, timeCardPendingID, timePendIndex, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets pending timecards for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeGetPendingTimecardsWithHttpInfoAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timeCardPendingID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TimeCardPendingID", timeCardPendingID)); // query parameter
            if (timePendIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimePendIndex", timePendIndex)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Gets the schema for posted timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        public E3EAPITimeModelsTimecardGetSchemaResponse TimeGetPostedTimecardSchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse> localVarResponse = TimeGetPostedTimecardSchemaWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the schema for posted timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse> TimeGetPostedTimecardSchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/posted/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetPostedTimecardSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetSchemaResponse)));
        }

        /// <summary>
        /// Gets the schema for posted timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetSchemaResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetSchemaResponse> TimeGetPostedTimecardSchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse> localVarResponse = await TimeGetPostedTimecardSchemaWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the schema for posted timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetSchemaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse>> TimeGetPostedTimecardSchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/posted/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetPostedTimecardSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetSchemaResponse)));
        }

        /// <summary>
        /// Gets posted timecards for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timecardID">Gets or sets the TimecardIDs. (optional)</param>
        /// <param name="timeIndex">Gets or sets the TimeIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        public E3EAPITimeModelsTimecardGetResponse TimeGetPostedTimecards (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timecardID = default(List<Guid>), int? timeIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = TimeGetPostedTimecardsWithHttpInfo(startDate, endDate, timecardID, timeIndex, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets posted timecards for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timecardID">Gets or sets the TimecardIDs. (optional)</param>
        /// <param name="timeIndex">Gets or sets the TimeIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeGetPostedTimecardsWithHttpInfo (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timecardID = default(List<Guid>), int? timeIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/posted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timecardID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TimecardID", timecardID)); // query parameter
            if (timeIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimeIndex", timeIndex)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetPostedTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Gets posted timecards for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timecardID">Gets or sets the TimecardIDs. (optional)</param>
        /// <param name="timeIndex">Gets or sets the TimeIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeGetPostedTimecardsAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timecardID = default(List<Guid>), int? timeIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = await TimeGetPostedTimecardsWithHttpInfoAsync(startDate, endDate, timecardID, timeIndex, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets posted timecards for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timecardID">Gets or sets the TimecardIDs. (optional)</param>
        /// <param name="timeIndex">Gets or sets the TimeIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeGetPostedTimecardsWithHttpInfoAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timecardID = default(List<Guid>), int? timeIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/posted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timecardID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TimecardID", timecardID)); // query parameter
            if (timeIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimeIndex", timeIndex)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetPostedTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Gets timecapture records (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetAllResponse</returns>
        public E3EAPITimeModelsTimecardGetAllResponse TimeGetTimeCaptureAllCards (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> localVarResponse = TimeGetTimeCaptureAllCardsWithHttpInfo(index, startDate, endDate, timekeeperIndex, timekeeperNumber, timekeeperID, itemIds, attributesToInclude, filterXOQL, filterPredicates, filterOperator, filterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets timecapture records (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetAllResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> TimeGetTimeCaptureAllCardsWithHttpInfo (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/timecapture/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemIds", itemIds)); // query parameter
            if (attributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AttributesToInclude", attributesToInclude)); // query parameter
            if (filterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FilterXOQL", filterXOQL)); // query parameter
            if (filterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Predicates", filterPredicates)); // query parameter
            if (filterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filter.Operator", filterOperator)); // query parameter
            if (filterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Groups", filterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimeCaptureAllCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetAllResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetAllResponse)));
        }

        /// <summary>
        /// Gets timecapture records (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetAllResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetAllResponse> TimeGetTimeCaptureAllCardsAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> localVarResponse = await TimeGetTimeCaptureAllCardsWithHttpInfoAsync(index, startDate, endDate, timekeeperIndex, timekeeperNumber, timekeeperID, itemIds, attributesToInclude, filterXOQL, filterPredicates, filterOperator, filterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets timecapture records (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetAllResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>> TimeGetTimeCaptureAllCardsWithHttpInfoAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemIds", itemIds)); // query parameter
            if (attributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AttributesToInclude", attributesToInclude)); // query parameter
            if (filterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FilterXOQL", filterXOQL)); // query parameter
            if (filterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Predicates", filterPredicates)); // query parameter
            if (filterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filter.Operator", filterOperator)); // query parameter
            if (filterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Groups", filterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimeCaptureAllCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetAllResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetAllResponse)));
        }

        /// <summary>
        /// Gets TimeCapture models. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">Gets or sets the ID of a model. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelGetResponse</returns>
        public E3EAPIDataObjectModelModelsDataObjectModelGetResponse TimeGetTimeCaptureModels (Guid? modelId = default(Guid?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelGetResponse> localVarResponse = TimeGetTimeCaptureModelsWithHttpInfo(modelId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets TimeCapture models. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">Gets or sets the ID of a model. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelGetResponse</returns>
        public ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelGetResponse> TimeGetTimeCaptureModelsWithHttpInfo (Guid? modelId = default(Guid?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ModelId", modelId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimeCaptureModels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelGetResponse)));
        }

        /// <summary>
        /// Gets TimeCapture models. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">Gets or sets the ID of a model. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelGetResponse> TimeGetTimeCaptureModelsAsync (Guid? modelId = default(Guid?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelGetResponse> localVarResponse = await TimeGetTimeCaptureModelsWithHttpInfoAsync(modelId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets TimeCapture models. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">Gets or sets the ID of a model. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelGetResponse>> TimeGetTimeCaptureModelsWithHttpInfoAsync (Guid? modelId = default(Guid?), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ModelId", modelId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimeCaptureModels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelGetResponse)));
        }

        /// <summary>
        /// Gets timecapture pending records for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        public E3EAPITimeModelsTimecardGetResponse TimeGetTimeCapturePendingCards (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = TimeGetTimeCapturePendingCardsWithHttpInfo(startDate, endDate, timeCardPendingID, timePendIndex, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets timecapture pending records for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeGetTimeCapturePendingCardsWithHttpInfo (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timeCardPendingID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TimeCardPendingID", timeCardPendingID)); // query parameter
            if (timePendIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimePendIndex", timePendIndex)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimeCapturePendingCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Gets timecapture pending records for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeGetTimeCapturePendingCardsAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = await TimeGetTimeCapturePendingCardsWithHttpInfoAsync(startDate, endDate, timeCardPendingID, timePendIndex, timekeeperIndex, timekeeperNumber, timekeeperID, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets timecapture pending records for a given timekeeper and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timeCardPendingID">Gets or sets the TimeCardPendingIDs. (optional)</param>
        /// <param name="timePendIndex">Gets or sets the TimePendIndex. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeGetTimeCapturePendingCardsWithHttpInfoAsync (DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), List<Guid> timeCardPendingID = default(List<Guid>), int? timePendIndex = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timeCardPendingID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "TimeCardPendingID", timeCardPendingID)); // query parameter
            if (timePendIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimePendIndex", timePendIndex)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimeCapturePendingCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Gets timecards (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetAllResponse</returns>
        public E3EAPITimeModelsTimecardGetAllResponse TimeGetTimecards (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> localVarResponse = TimeGetTimecardsWithHttpInfo(index, startDate, endDate, timekeeperIndex, timekeeperNumber, timekeeperID, itemIds, attributesToInclude, filterXOQL, filterPredicates, filterOperator, filterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets timecards (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetAllResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> TimeGetTimecardsWithHttpInfo (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemIds", itemIds)); // query parameter
            if (attributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AttributesToInclude", attributesToInclude)); // query parameter
            if (filterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FilterXOQL", filterXOQL)); // query parameter
            if (filterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Predicates", filterPredicates)); // query parameter
            if (filterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filter.Operator", filterOperator)); // query parameter
            if (filterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Groups", filterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetAllResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetAllResponse)));
        }

        /// <summary>
        /// Gets timecards (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetAllResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetAllResponse> TimeGetTimecardsAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> localVarResponse = await TimeGetTimecardsWithHttpInfoAsync(index, startDate, endDate, timekeeperIndex, timekeeperNumber, timekeeperID, itemIds, attributesToInclude, filterXOQL, filterPredicates, filterOperator, filterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets timecards (both posted and pending) for a given timekeeper and returns a TimecardGetAllResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="index"> (optional)</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate). (optional)</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate). (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="itemIds"> (optional)</param>
        /// <param name="attributesToInclude"> (optional)</param>
        /// <param name="filterXOQL"> (optional)</param>
        /// <param name="filterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="filterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="filterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetAllResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>> TimeGetTimecardsWithHttpInfoAsync (int? index = default(int?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> filterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? filterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> filterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (index != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Index", index)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (itemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemIds", itemIds)); // query parameter
            if (attributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AttributesToInclude", attributesToInclude)); // query parameter
            if (filterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "FilterXOQL", filterXOQL)); // query parameter
            if (filterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Predicates", filterPredicates)); // query parameter
            if (filterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Filter.Operator", filterOperator)); // query parameter
            if (filterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "Filter.Groups", filterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetAllResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetAllResponse)));
        }

        /// <summary>
        /// Gets pending and posted timecards grouped for display in weekly view. The following attributes are always returned by default (in addition to anything specified in AttributesToInclude):  WorkDate, TimePendIndex, TimeIndex, WorkHrs, IsNB, IsNoCharge, WorkType, TimeType, Office, Matter, Phase, Task, Activity, IsFlatFeeComplete, Phase2, Task2, Activity2.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate.</param>
        /// <param name="endDate">Gets or sets the EndDate.</param>
        /// <param name="lastDays">Gets or sets the LastDays. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="clientIndex">Gets or sets the ClientIndex. (optional)</param>
        /// <param name="attributesToInclude">Gets or sets a collection of attributes that should be returned with the response. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse</returns>
        public E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse TimeGetTimecardsGroupedByDay (DateTime startDate, DateTime endDate, int? lastDays = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), int? mattIndex = default(int?), int? clientIndex = default(int?), List<string> attributesToInclude = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse> localVarResponse = TimeGetTimecardsGroupedByDayWithHttpInfo(startDate, endDate, lastDays, timekeeperIndex, timekeeperNumber, timekeeperID, mattIndex, clientIndex, attributesToInclude, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets pending and posted timecards grouped for display in weekly view. The following attributes are always returned by default (in addition to anything specified in AttributesToInclude):  WorkDate, TimePendIndex, TimeIndex, WorkHrs, IsNB, IsNoCharge, WorkType, TimeType, Office, Matter, Phase, Task, Activity, IsFlatFeeComplete, Phase2, Task2, Activity2.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate.</param>
        /// <param name="endDate">Gets or sets the EndDate.</param>
        /// <param name="lastDays">Gets or sets the LastDays. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="clientIndex">Gets or sets the ClientIndex. (optional)</param>
        /// <param name="attributesToInclude">Gets or sets a collection of attributes that should be returned with the response. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse</returns>
        public ApiResponse<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse> TimeGetTimecardsGroupedByDayWithHttpInfo (DateTime startDate, DateTime endDate, int? lastDays = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), int? mattIndex = default(int?), int? clientIndex = default(int?), List<string> attributesToInclude = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling TimeApi->TimeGetTimecardsGroupedByDay");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling TimeApi->TimeGetTimecardsGroupedByDay");

            var localVarPath = "/api/v1/time/weeklyview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastDays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastDays", lastDays)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (mattIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MattIndex", mattIndex)); // query parameter
            if (clientIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ClientIndex", clientIndex)); // query parameter
            if (attributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AttributesToInclude", attributesToInclude)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimecardsGroupedByDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse)));
        }

        /// <summary>
        /// Gets pending and posted timecards grouped for display in weekly view. The following attributes are always returned by default (in addition to anything specified in AttributesToInclude):  WorkDate, TimePendIndex, TimeIndex, WorkHrs, IsNB, IsNoCharge, WorkType, TimeType, Office, Matter, Phase, Task, Activity, IsFlatFeeComplete, Phase2, Task2, Activity2.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate.</param>
        /// <param name="endDate">Gets or sets the EndDate.</param>
        /// <param name="lastDays">Gets or sets the LastDays. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="clientIndex">Gets or sets the ClientIndex. (optional)</param>
        /// <param name="attributesToInclude">Gets or sets a collection of attributes that should be returned with the response. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse> TimeGetTimecardsGroupedByDayAsync (DateTime startDate, DateTime endDate, int? lastDays = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), int? mattIndex = default(int?), int? clientIndex = default(int?), List<string> attributesToInclude = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse> localVarResponse = await TimeGetTimecardsGroupedByDayWithHttpInfoAsync(startDate, endDate, lastDays, timekeeperIndex, timekeeperNumber, timekeeperID, mattIndex, clientIndex, attributesToInclude, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets pending and posted timecards grouped for display in weekly view. The following attributes are always returned by default (in addition to anything specified in AttributesToInclude):  WorkDate, TimePendIndex, TimeIndex, WorkHrs, IsNB, IsNoCharge, WorkType, TimeType, Office, Matter, Phase, Task, Activity, IsFlatFeeComplete, Phase2, Task2, Activity2.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Gets or sets the StartDate.</param>
        /// <param name="endDate">Gets or sets the EndDate.</param>
        /// <param name="lastDays">Gets or sets the LastDays. (optional)</param>
        /// <param name="timekeeperIndex"> (optional)</param>
        /// <param name="timekeeperNumber"> (optional)</param>
        /// <param name="timekeeperID"> (optional)</param>
        /// <param name="mattIndex">Gets or sets the MattIndex. (optional)</param>
        /// <param name="clientIndex">Gets or sets the ClientIndex. (optional)</param>
        /// <param name="attributesToInclude">Gets or sets a collection of attributes that should be returned with the response. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse>> TimeGetTimecardsGroupedByDayWithHttpInfoAsync (DateTime startDate, DateTime endDate, int? lastDays = default(int?), int? timekeeperIndex = default(int?), string timekeeperNumber = default(string), Guid? timekeeperID = default(Guid?), int? mattIndex = default(int?), int? clientIndex = default(int?), List<string> attributesToInclude = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling TimeApi->TimeGetTimecardsGroupedByDay");
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling TimeApi->TimeGetTimecardsGroupedByDay");

            var localVarPath = "/api/v1/time/weeklyview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastDays != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastDays", lastDays)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "StartDate", startDate)); // query parameter
            if (endDate != default(DateTime)) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "EndDate", endDate)); // query parameter
            if (timekeeperIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperIndex", timekeeperIndex)); // query parameter
            if (timekeeperNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperNumber", timekeeperNumber)); // query parameter
            if (timekeeperID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimekeeperID", timekeeperID)); // query parameter
            if (mattIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MattIndex", mattIndex)); // query parameter
            if (clientIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ClientIndex", clientIndex)); // query parameter
            if (attributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AttributesToInclude", attributesToInclude)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeGetTimecardsGroupedByDay", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeWeeklyViewModelsTimeWeeklyViewGetResponse)));
        }

        /// <summary>
        /// Gets cloned pending timecards and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        public E3EAPITimeModelsTimecardGetResponse TimeModelFromPendingTimecards (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = TimeModelFromPendingTimecardsWithHttpInfo(itemId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets cloned pending timecards and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeModelFromPendingTimecardsWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/pending/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeModelFromPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Gets cloned pending timecards and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeModelFromPendingTimecardsAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = await TimeModelFromPendingTimecardsWithHttpInfoAsync(itemId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets cloned pending timecards and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeModelFromPendingTimecardsWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeModelFromPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Gets cloned timecards and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIDataObjectModelsDataObjectGetResponse</returns>
        public E3EAPIDataObjectModelsDataObjectGetResponse TimeModelFromPostedTimecards (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIDataObjectModelsDataObjectGetResponse> localVarResponse = TimeModelFromPostedTimecardsWithHttpInfo(itemId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets cloned timecards and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelsDataObjectGetResponse</returns>
        public ApiResponse<E3EAPIDataObjectModelsDataObjectGetResponse> TimeModelFromPostedTimecardsWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/posted/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeModelFromPostedTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelsDataObjectGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelsDataObjectGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelsDataObjectGetResponse)));
        }

        /// <summary>
        /// Gets cloned timecards and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelsDataObjectGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIDataObjectModelsDataObjectGetResponse> TimeModelFromPostedTimecardsAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIDataObjectModelsDataObjectGetResponse> localVarResponse = await TimeModelFromPostedTimecardsWithHttpInfoAsync(itemId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets cloned timecards and returns a TimecardGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelsDataObjectGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelsDataObjectGetResponse>> TimeModelFromPostedTimecardsWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/posted/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeModelFromPostedTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelsDataObjectGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelsDataObjectGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelsDataObjectGetResponse)));
        }

        /// <summary>
        /// Posts one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardPostRequest">The TimecardPending.TimePendIndex values of the timecards to be posted. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardPostResponse</returns>
        public E3EAPITimeModelsTimecardPostResponse TimePostPendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardPostRequest e3EAPITimeModelsTimecardPostRequest = default(E3EAPITimeModelsTimecardPostRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardPostResponse> localVarResponse = TimePostPendingTimecardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardPostRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Posts one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardPostRequest">The TimecardPending.TimePendIndex values of the timecards to be posted. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardPostResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardPostResponse> TimePostPendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardPostRequest e3EAPITimeModelsTimecardPostRequest = default(E3EAPITimeModelsTimecardPostRequest))
        {

            var localVarPath = "/api/v1/time/pending/post";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardPostRequest != null && e3EAPITimeModelsTimecardPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimePostPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardPostResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardPostResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardPostResponse)));
        }

        /// <summary>
        /// Posts one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardPostRequest">The TimecardPending.TimePendIndex values of the timecards to be posted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardPostResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardPostResponse> TimePostPendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardPostRequest e3EAPITimeModelsTimecardPostRequest = default(E3EAPITimeModelsTimecardPostRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardPostResponse> localVarResponse = await TimePostPendingTimecardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardPostRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Posts one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardPostRequest">The TimecardPending.TimePendIndex values of the timecards to be posted. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardPostResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardPostResponse>> TimePostPendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardPostRequest e3EAPITimeModelsTimecardPostRequest = default(E3EAPITimeModelsTimecardPostRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending/post";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardPostRequest != null && e3EAPITimeModelsTimecardPostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardPostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardPostRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimePostPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardPostResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardPostResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardPostResponse)));
        }

        /// <summary>
        /// Queries timecapture records (both posted and pending) filtered out according to request body conditions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardGetAllResponse</returns>
        public E3EAPITimeModelsTimecardGetAllResponse TimeQueryTimeCaptureAllCards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> localVarResponse = TimeQueryTimeCaptureAllCardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardGetRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries timecapture records (both posted and pending) filtered out according to request body conditions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetAllResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> TimeQueryTimeCaptureAllCardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest))
        {

            var localVarPath = "/api/v1/time/timecapture/query/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardGetRequest != null && e3EAPITimeModelsTimecardGetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardGetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardGetRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeQueryTimeCaptureAllCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetAllResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetAllResponse)));
        }

        /// <summary>
        /// Queries timecapture records (both posted and pending) filtered out according to request body conditions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetAllResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetAllResponse> TimeQueryTimeCaptureAllCardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetAllResponse> localVarResponse = await TimeQueryTimeCaptureAllCardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardGetRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries timecapture records (both posted and pending) filtered out according to request body conditions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetAllResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>> TimeQueryTimeCaptureAllCardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture/query/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardGetRequest != null && e3EAPITimeModelsTimecardGetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardGetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardGetRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeQueryTimeCaptureAllCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetAllResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetAllResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetAllResponse)));
        }

        /// <summary>
        /// Queries timecapture records (pending only) filtered out according to request body conditions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardGetResponse</returns>
        public E3EAPITimeModelsTimecardGetResponse TimeQueryTimeCapturePendingCards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = TimeQueryTimeCapturePendingCardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardGetRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries timecapture records (pending only) filtered out according to request body conditions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardGetResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardGetResponse> TimeQueryTimeCapturePendingCardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest))
        {

            var localVarPath = "/api/v1/time/timecapture/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardGetRequest != null && e3EAPITimeModelsTimecardGetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardGetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardGetRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeQueryTimeCapturePendingCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Queries timecapture records (pending only) filtered out according to request body conditions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardGetResponse> TimeQueryTimeCapturePendingCardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardGetResponse> localVarResponse = await TimeQueryTimeCapturePendingCardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardGetRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries timecapture records (pending only) filtered out according to request body conditions. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardGetRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardGetResponse>> TimeQueryTimeCapturePendingCardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardGetRequest e3EAPITimeModelsTimecardGetRequest = default(E3EAPITimeModelsTimecardGetRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardGetRequest != null && e3EAPITimeModelsTimecardGetRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardGetRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardGetRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeQueryTimeCapturePendingCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardGetResponse)));
        }

        /// <summary>
        /// Spellchecks one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPITimeModelsTimecardSpellCheckResponse</returns>
        public E3EAPITimeModelsTimecardSpellCheckResponse TimeSpellcheckPendingTimecards (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPITimeModelsTimecardSpellCheckResponse> localVarResponse = TimeSpellcheckPendingTimecardsWithHttpInfo(itemId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Spellchecks one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardSpellCheckResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardSpellCheckResponse> TimeSpellcheckPendingTimecardsWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/time/pending/spellcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeSpellcheckPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardSpellCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardSpellCheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardSpellCheckResponse)));
        }

        /// <summary>
        /// Spellchecks one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardSpellCheckResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardSpellCheckResponse> TimeSpellcheckPendingTimecardsAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardSpellCheckResponse> localVarResponse = await TimeSpellcheckPendingTimecardsWithHttpInfoAsync(itemId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Spellchecks one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardSpellCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardSpellCheckResponse>> TimeSpellcheckPendingTimecardsWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending/spellcheck";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeSpellcheckPendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardSpellCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardSpellCheckResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardSpellCheckResponse)));
        }

        /// <summary>
        /// Starts/stops a timer for a given pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsStartStopTimerRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsStartStopTimerResponse</returns>
        public E3EAPITimeModelsStartStopTimerResponse TimeStartStopTimer (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsStartStopTimerRequest e3EAPITimeModelsStartStopTimerRequest = default(E3EAPITimeModelsStartStopTimerRequest))
        {
             ApiResponse<E3EAPITimeModelsStartStopTimerResponse> localVarResponse = TimeStartStopTimerWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsStartStopTimerRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts/stops a timer for a given pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsStartStopTimerRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsStartStopTimerResponse</returns>
        public ApiResponse<E3EAPITimeModelsStartStopTimerResponse> TimeStartStopTimerWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsStartStopTimerRequest e3EAPITimeModelsStartStopTimerRequest = default(E3EAPITimeModelsStartStopTimerRequest))
        {

            var localVarPath = "/api/v1/time/timer/startstop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsStartStopTimerRequest != null && e3EAPITimeModelsStartStopTimerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsStartStopTimerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsStartStopTimerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeStartStopTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsStartStopTimerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsStartStopTimerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsStartStopTimerResponse)));
        }

        /// <summary>
        /// Starts/stops a timer for a given pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsStartStopTimerRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsStartStopTimerResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsStartStopTimerResponse> TimeStartStopTimerAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsStartStopTimerRequest e3EAPITimeModelsStartStopTimerRequest = default(E3EAPITimeModelsStartStopTimerRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsStartStopTimerResponse> localVarResponse = await TimeStartStopTimerWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsStartStopTimerRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts/stops a timer for a given pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsStartStopTimerRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsStartStopTimerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsStartStopTimerResponse>> TimeStartStopTimerWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsStartStopTimerRequest e3EAPITimeModelsStartStopTimerRequest = default(E3EAPITimeModelsStartStopTimerRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timer/startstop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsStartStopTimerRequest != null && e3EAPITimeModelsStartStopTimerRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsStartStopTimerRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsStartStopTimerRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeStartStopTimer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsStartStopTimerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsStartStopTimerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsStartStopTimerResponse)));
        }

        /// <summary>
        /// Updates a pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardUpdateResponse</returns>
        public E3EAPITimeModelsTimecardUpdateResponse TimeUpdatePendingTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> localVarResponse = TimeUpdatePendingTimecardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardUpdateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdatePendingTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest))
        {

            var localVarPath = "/api/v1/time/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardUpdateRequest != null && e3EAPITimeModelsTimecardUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUpdatePendingTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardUpdateResponse)));
        }

        /// <summary>
        /// Updates a pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardUpdateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdatePendingTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> localVarResponse = await TimeUpdatePendingTimecardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a pending timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>> TimeUpdatePendingTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardUpdateRequest != null && e3EAPITimeModelsTimecardUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUpdatePendingTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardUpdateResponse)));
        }

        /// <summary>
        /// Updates a posted timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardUpdateResponse</returns>
        public E3EAPITimeModelsTimecardUpdateResponse TimeUpdatePostedTimecard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> localVarResponse = TimeUpdatePostedTimecardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a posted timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardUpdateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdatePostedTimecardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest))
        {

            var localVarPath = "/api/v1/time/posted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardUpdateRequest != null && e3EAPITimeModelsTimecardUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUpdatePostedTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardUpdateResponse)));
        }

        /// <summary>
        /// Updates a posted timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardUpdateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdatePostedTimecardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> localVarResponse = await TimeUpdatePostedTimecardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a posted timecard. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>> TimeUpdatePostedTimecardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/posted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardUpdateRequest != null && e3EAPITimeModelsTimecardUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUpdatePostedTimecard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardUpdateResponse)));
        }

        /// <summary>
        /// Updates an existing timecapture record. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardUpdateResponse</returns>
        public E3EAPITimeModelsTimecardUpdateResponse TimeUpdateTimeCaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> localVarResponse = TimeUpdateTimeCaptureCardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing timecapture record. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardUpdateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdateTimeCaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest))
        {

            var localVarPath = "/api/v1/time/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardUpdateRequest != null && e3EAPITimeModelsTimecardUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUpdateTimeCaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardUpdateResponse)));
        }

        /// <summary>
        /// Updates an existing timecapture record. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardUpdateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardUpdateResponse> TimeUpdateTimeCaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardUpdateResponse> localVarResponse = await TimeUpdateTimeCaptureCardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates an existing timecapture record. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>> TimeUpdateTimeCaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardUpdateRequest e3EAPITimeModelsTimecardUpdateRequest = default(E3EAPITimeModelsTimecardUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardUpdateRequest != null && e3EAPITimeModelsTimecardUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUpdateTimeCaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardUpdateResponse)));
        }

        /// <summary>
        /// Updates a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse</returns>
        public E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse TimeUpdateTimeCaptureModel (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse> localVarResponse = TimeUpdateTimeCaptureModelWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse</returns>
        public ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse> TimeUpdateTimeCaptureModelWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest != null && e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUpdateTimeCaptureModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse)));
        }

        /// <summary>
        /// Updates a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse> TimeUpdateTimeCaptureModelAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse> localVarResponse = await TimeUpdateTimeCaptureModelWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a TimeCapture model. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse>> TimeUpdateTimeCaptureModelWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest = default(E3EAPIDataObjectModelModelsDataObjectModelUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/model/timecapture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json", 
                "application/xml", 
                "text/xml", 
                "application/_*+xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest != null && e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIDataObjectModelModelsDataObjectModelUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeUpdateTimeCaptureModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIDataObjectModelModelsDataObjectModelUpdateResponse)));
        }

        /// <summary>
        /// Validates one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecardpending.TimePendIndex values of the timecards to be validated. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardValidateResponse</returns>
        public E3EAPITimeModelsTimecardValidateResponse TimeValidatePendingTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardValidateResponse> localVarResponse = TimeValidatePendingTimecardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardValidateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecardpending.TimePendIndex values of the timecards to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardValidateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardValidateResponse> TimeValidatePendingTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest))
        {

            var localVarPath = "/api/v1/time/pending/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardValidateRequest != null && e3EAPITimeModelsTimecardValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeValidatePendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardValidateResponse)));
        }

        /// <summary>
        /// Validates one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecardpending.TimePendIndex values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardValidateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardValidateResponse> TimeValidatePendingTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardValidateResponse> localVarResponse = await TimeValidatePendingTimecardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardValidateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates one or more existing pending timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecardpending.TimePendIndex values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardValidateResponse>> TimeValidatePendingTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/pending/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardValidateRequest != null && e3EAPITimeModelsTimecardValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeValidatePendingTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardValidateResponse)));
        }

        /// <summary>
        /// Validates one or more existing timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecard.TimeIndex values of the timecards to be validated. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardValidateResponse</returns>
        public E3EAPITimeModelsTimecardValidateResponse TimeValidatePostedTimecards (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardValidateResponse> localVarResponse = TimeValidatePostedTimecardsWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardValidateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates one or more existing timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecard.TimeIndex values of the timecards to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardValidateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardValidateResponse> TimeValidatePostedTimecardsWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest))
        {

            var localVarPath = "/api/v1/time/posted/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardValidateRequest != null && e3EAPITimeModelsTimecardValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeValidatePostedTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardValidateResponse)));
        }

        /// <summary>
        /// Validates one or more existing timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecard.TimeIndex values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardValidateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardValidateResponse> TimeValidatePostedTimecardsAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardValidateResponse> localVarResponse = await TimeValidatePostedTimecardsWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardValidateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates one or more existing timecards. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The Timecard.TimeIndex values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardValidateResponse>> TimeValidatePostedTimecardsWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/posted/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardValidateRequest != null && e3EAPITimeModelsTimecardValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeValidatePostedTimecards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardValidateResponse)));
        }

        /// <summary>
        /// Validates one or more existing timecapture records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The ItemId values of the timecards to be validated. (optional)</param>
        /// <returns>E3EAPITimeModelsTimecardValidateResponse</returns>
        public E3EAPITimeModelsTimecardValidateResponse TimeValidateTimecaptureCard (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest))
        {
             ApiResponse<E3EAPITimeModelsTimecardValidateResponse> localVarResponse = TimeValidateTimecaptureCardWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardValidateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates one or more existing timecapture records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The ItemId values of the timecards to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPITimeModelsTimecardValidateResponse</returns>
        public ApiResponse<E3EAPITimeModelsTimecardValidateResponse> TimeValidateTimecaptureCardWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest))
        {

            var localVarPath = "/api/v1/time/timecapture/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardValidateRequest != null && e3EAPITimeModelsTimecardValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeValidateTimecaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardValidateResponse)));
        }

        /// <summary>
        /// Validates one or more existing timecapture records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The ItemId values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPITimeModelsTimecardValidateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPITimeModelsTimecardValidateResponse> TimeValidateTimecaptureCardAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPITimeModelsTimecardValidateResponse> localVarResponse = await TimeValidateTimecaptureCardWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPITimeModelsTimecardValidateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates one or more existing timecapture records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPITimeModelsTimecardValidateRequest">The ItemId values of the timecards to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPITimeModelsTimecardValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPITimeModelsTimecardValidateResponse>> TimeValidateTimecaptureCardWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPITimeModelsTimecardValidateRequest e3EAPITimeModelsTimecardValidateRequest = default(E3EAPITimeModelsTimecardValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/time/timecapture/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPITimeModelsTimecardValidateRequest != null && e3EAPITimeModelsTimecardValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPITimeModelsTimecardValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPITimeModelsTimecardValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TimeValidateTimecaptureCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPITimeModelsTimecardValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPITimeModelsTimecardValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPITimeModelsTimecardValidateResponse)));
        }

    }
}
