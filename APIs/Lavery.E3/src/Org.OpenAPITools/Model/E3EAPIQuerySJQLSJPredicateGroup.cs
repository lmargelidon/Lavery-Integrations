/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a group of predicates.
    /// </summary>
    [DataContract]
    public partial class E3EAPIQuerySJQLSJPredicateGroup :  IEquatable<E3EAPIQuerySJQLSJPredicateGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIQuerySJQLSJPredicateGroup" /> class.
        /// </summary>
        /// <param name="predicates">Gets or Sets predicates..</param>
        /// <param name="_operator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups..</param>
        /// <param name="groups">Gets or Sets group of predicates based on a logical operator..</param>
        public E3EAPIQuerySJQLSJPredicateGroup(List<E3EAPIQuerySJQLSJPredicate> predicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator _operator = default(E3EAPIQuerySJQLSJLogicalOperator), List<E3EAPIQuerySJQLSJPredicateGroup> groups = default(List<E3EAPIQuerySJQLSJPredicateGroup>))
        {
            this.Predicates = predicates;
            this.Groups = groups;
            this.Predicates = predicates;
            this.Operator = _operator;
            this.Groups = groups;
        }

        /// <summary>
        /// Gets or Sets predicates.
        /// </summary>
        /// <value>Gets or Sets predicates.</value>
        [DataMember(Name="predicates", EmitDefaultValue=true)]
        public List<E3EAPIQuerySJQLSJPredicate> Predicates { get; set; }

        /// <summary>
        /// Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups.
        /// </summary>
        /// <value>Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups.</value>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public E3EAPIQuerySJQLSJLogicalOperator Operator { get; set; }

        /// <summary>
        /// Gets or Sets group of predicates based on a logical operator.
        /// </summary>
        /// <value>Gets or Sets group of predicates based on a logical operator.</value>
        [DataMember(Name="groups", EmitDefaultValue=true)]
        public List<E3EAPIQuerySJQLSJPredicateGroup> Groups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIQuerySJQLSJPredicateGroup {\n");
            sb.Append("  Predicates: ").Append(Predicates).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIQuerySJQLSJPredicateGroup);
        }

        /// <summary>
        /// Returns true if E3EAPIQuerySJQLSJPredicateGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIQuerySJQLSJPredicateGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIQuerySJQLSJPredicateGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Predicates == input.Predicates ||
                    this.Predicates != null &&
                    input.Predicates != null &&
                    this.Predicates.SequenceEqual(input.Predicates)
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Predicates != null)
                    hashCode = hashCode * 59 + this.Predicates.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
