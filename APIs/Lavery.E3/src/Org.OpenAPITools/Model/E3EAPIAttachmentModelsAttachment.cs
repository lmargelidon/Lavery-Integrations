/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a data object attachment.
    /// </summary>
    [DataContract]
    public partial class E3EAPIAttachmentModelsAttachment :  IEquatable<E3EAPIAttachmentModelsAttachment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIAttachmentModelsAttachment" /> class.
        /// </summary>
        /// <param name="attachmentID">Gets or sets the AttachmentID..</param>
        /// <param name="attachmentType">Gets or sets the AttachmentType..</param>
        /// <param name="dmsDocumentID">Gets or sets the DMSDocumentID..</param>
        /// <param name="dmsDraft">Gets or sets the DMSDraft..</param>
        /// <param name="fileName">Gets or sets the FileName..</param>
        /// <param name="description">Gets or sets the Description..</param>
        /// <param name="syncID">Gets or sets the SyncID..</param>
        /// <param name="reportPrint">Gets or sets a value indicating whether this attachment should be printed in reports..</param>
        /// <param name="extendedAttributes">Gets or sets the ExtendedAtts..</param>
        /// <param name="subFolder">Gets or sets the SubFolder..</param>
        public E3EAPIAttachmentModelsAttachment(Guid attachmentID = default(Guid), string attachmentType = default(string), string dmsDocumentID = default(string), string dmsDraft = default(string), string fileName = default(string), string description = default(string), string syncID = default(string), bool reportPrint = default(bool), string extendedAttributes = default(string), string subFolder = default(string))
        {
            this.AttachmentType = attachmentType;
            this.DmsDocumentID = dmsDocumentID;
            this.DmsDraft = dmsDraft;
            this.FileName = fileName;
            this.Description = description;
            this.SyncID = syncID;
            this.ExtendedAttributes = extendedAttributes;
            this.SubFolder = subFolder;
            this.AttachmentID = attachmentID;
            this.AttachmentType = attachmentType;
            this.DmsDocumentID = dmsDocumentID;
            this.DmsDraft = dmsDraft;
            this.FileName = fileName;
            this.Description = description;
            this.SyncID = syncID;
            this.ReportPrint = reportPrint;
            this.ExtendedAttributes = extendedAttributes;
            this.SubFolder = subFolder;
        }

        /// <summary>
        /// Gets or sets the AttachmentID.
        /// </summary>
        /// <value>Gets or sets the AttachmentID.</value>
        [DataMember(Name="attachmentID", EmitDefaultValue=false)]
        public Guid AttachmentID { get; set; }

        /// <summary>
        /// Gets or sets the AttachmentType.
        /// </summary>
        /// <value>Gets or sets the AttachmentType.</value>
        [DataMember(Name="attachmentType", EmitDefaultValue=true)]
        public string AttachmentType { get; set; }

        /// <summary>
        /// Gets or sets the DMSDocumentID.
        /// </summary>
        /// <value>Gets or sets the DMSDocumentID.</value>
        [DataMember(Name="dmsDocumentID", EmitDefaultValue=true)]
        public string DmsDocumentID { get; set; }

        /// <summary>
        /// Gets or sets the DMSDraft.
        /// </summary>
        /// <value>Gets or sets the DMSDraft.</value>
        [DataMember(Name="dmsDraft", EmitDefaultValue=true)]
        public string DmsDraft { get; set; }

        /// <summary>
        /// Gets or sets the FileName.
        /// </summary>
        /// <value>Gets or sets the FileName.</value>
        [DataMember(Name="fileName", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        /// <value>Gets or sets the Description.</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the SyncID.
        /// </summary>
        /// <value>Gets or sets the SyncID.</value>
        [DataMember(Name="syncID", EmitDefaultValue=true)]
        public string SyncID { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this attachment should be printed in reports.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this attachment should be printed in reports.</value>
        [DataMember(Name="reportPrint", EmitDefaultValue=false)]
        public bool ReportPrint { get; set; }

        /// <summary>
        /// Gets or sets the ExtendedAtts.
        /// </summary>
        /// <value>Gets or sets the ExtendedAtts.</value>
        [DataMember(Name="extendedAttributes", EmitDefaultValue=true)]
        public string ExtendedAttributes { get; set; }

        /// <summary>
        /// Gets or sets the SubFolder.
        /// </summary>
        /// <value>Gets or sets the SubFolder.</value>
        [DataMember(Name="subFolder", EmitDefaultValue=true)]
        public string SubFolder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIAttachmentModelsAttachment {\n");
            sb.Append("  AttachmentID: ").Append(AttachmentID).Append("\n");
            sb.Append("  AttachmentType: ").Append(AttachmentType).Append("\n");
            sb.Append("  DmsDocumentID: ").Append(DmsDocumentID).Append("\n");
            sb.Append("  DmsDraft: ").Append(DmsDraft).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SyncID: ").Append(SyncID).Append("\n");
            sb.Append("  ReportPrint: ").Append(ReportPrint).Append("\n");
            sb.Append("  ExtendedAttributes: ").Append(ExtendedAttributes).Append("\n");
            sb.Append("  SubFolder: ").Append(SubFolder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIAttachmentModelsAttachment);
        }

        /// <summary>
        /// Returns true if E3EAPIAttachmentModelsAttachment instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIAttachmentModelsAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIAttachmentModelsAttachment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachmentID == input.AttachmentID ||
                    (this.AttachmentID != null &&
                    this.AttachmentID.Equals(input.AttachmentID))
                ) && 
                (
                    this.AttachmentType == input.AttachmentType ||
                    (this.AttachmentType != null &&
                    this.AttachmentType.Equals(input.AttachmentType))
                ) && 
                (
                    this.DmsDocumentID == input.DmsDocumentID ||
                    (this.DmsDocumentID != null &&
                    this.DmsDocumentID.Equals(input.DmsDocumentID))
                ) && 
                (
                    this.DmsDraft == input.DmsDraft ||
                    (this.DmsDraft != null &&
                    this.DmsDraft.Equals(input.DmsDraft))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SyncID == input.SyncID ||
                    (this.SyncID != null &&
                    this.SyncID.Equals(input.SyncID))
                ) && 
                (
                    this.ReportPrint == input.ReportPrint ||
                    (this.ReportPrint != null &&
                    this.ReportPrint.Equals(input.ReportPrint))
                ) && 
                (
                    this.ExtendedAttributes == input.ExtendedAttributes ||
                    (this.ExtendedAttributes != null &&
                    this.ExtendedAttributes.Equals(input.ExtendedAttributes))
                ) && 
                (
                    this.SubFolder == input.SubFolder ||
                    (this.SubFolder != null &&
                    this.SubFolder.Equals(input.SubFolder))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentID != null)
                    hashCode = hashCode * 59 + this.AttachmentID.GetHashCode();
                if (this.AttachmentType != null)
                    hashCode = hashCode * 59 + this.AttachmentType.GetHashCode();
                if (this.DmsDocumentID != null)
                    hashCode = hashCode * 59 + this.DmsDocumentID.GetHashCode();
                if (this.DmsDraft != null)
                    hashCode = hashCode * 59 + this.DmsDraft.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SyncID != null)
                    hashCode = hashCode * 59 + this.SyncID.GetHashCode();
                if (this.ReportPrint != null)
                    hashCode = hashCode * 59 + this.ReportPrint.GetHashCode();
                if (this.ExtendedAttributes != null)
                    hashCode = hashCode * 59 + this.ExtendedAttributes.GetHashCode();
                if (this.SubFolder != null)
                    hashCode = hashCode * 59 + this.SubFolder.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
