/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a row in the data object.
    /// </summary>
    [DataContract]
    public partial class E3EAPIDataModelsDataRow :  IEquatable<E3EAPIDataModelsDataRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIDataModelsDataRow" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the Id of the row..</param>
        /// <param name="accessType">Gets or sets the access type of the row. When omitted, default value is Enabled (editable for data objects)..</param>
        /// <param name="actions">Gets or sets the actions in this row that are not enabled (either disabled or hidden)..</param>
        /// <param name="attributes">Gets or sets the attributes in this row..</param>
        /// <param name="childObjects">Gets or sets the child objects for this row..</param>
        /// <param name="error">Gets or sets the error in the row level..</param>
        /// <param name="attachmentCount">Gets or sets the attachment count for the row..</param>
        /// <param name="hasComment">Gets or sets a value indicating whether the row has a comment for collaboration..</param>
        /// <param name="index">Gets or sets the index of the row. (default to -1).</param>
        /// <param name="isConfidential">Gets or sets a value indicating whether the row is confidential..</param>
        /// <param name="isLocked">Gets or sets a value indicating whether the row is checked out by another process..</param>
        /// <param name="lockedMessage">Gets or sets the message indicating whether the row is locked..</param>
        /// <param name="rowState">Gets or sets the row state of the row. Applies to editable objects. When omitted, default value is Edit..</param>
        /// <param name="subclassId">Gets or sets the subclass id of this row..</param>
        public E3EAPIDataModelsDataRow(string id = default(string), E3EAPIDataAccessType accessType = default(E3EAPIDataAccessType), Dictionary<string, E3EAPIDataModelsAction> actions = default(Dictionary<string, E3EAPIDataModelsAction>), Dictionary<string, E3EAPIDataModelsAttribute> attributes = default(Dictionary<string, E3EAPIDataModelsAttribute>), Dictionary<string, E3EAPIDataModelsDataObject> childObjects = default(Dictionary<string, E3EAPIDataModelsDataObject>), E3EAPIDataDataError error = default(E3EAPIDataDataError), int attachmentCount = default(int), bool hasComment = default(bool), int index = -1, bool isConfidential = default(bool), bool isLocked = default(bool), string lockedMessage = default(string), E3EAPIDataModelsDataRowStates rowState = default(E3EAPIDataModelsDataRowStates), string subclassId = default(string))
        {
            this.Id = id;
            this.Actions = actions;
            this.Attributes = attributes;
            this.ChildObjects = childObjects;
            this.Error = error;
            this.LockedMessage = lockedMessage;
            this.SubclassId = subclassId;
            this.Id = id;
            this.AccessType = accessType;
            this.Actions = actions;
            this.Attributes = attributes;
            this.ChildObjects = childObjects;
            this.Error = error;
            this.AttachmentCount = attachmentCount;
            this.HasComment = hasComment;
            // use default value if no "index" provided
            if (index == null)
            {
                this.Index = -1;
            }
            else
            {
                this.Index = index;
            }
            this.IsConfidential = isConfidential;
            this.IsLocked = isLocked;
            this.LockedMessage = lockedMessage;
            this.RowState = rowState;
            this.SubclassId = subclassId;
        }

        /// <summary>
        /// Gets or sets the Id of the row.
        /// </summary>
        /// <value>Gets or sets the Id of the row.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the access type of the row. When omitted, default value is Enabled (editable for data objects).
        /// </summary>
        /// <value>Gets or sets the access type of the row. When omitted, default value is Enabled (editable for data objects).</value>
        [DataMember(Name="accessType", EmitDefaultValue=false)]
        public E3EAPIDataAccessType AccessType { get; set; }

        /// <summary>
        /// Gets or sets the actions in this row that are not enabled (either disabled or hidden).
        /// </summary>
        /// <value>Gets or sets the actions in this row that are not enabled (either disabled or hidden).</value>
        [DataMember(Name="actions", EmitDefaultValue=true)]
        public Dictionary<string, E3EAPIDataModelsAction> Actions { get; set; }

        /// <summary>
        /// Gets or sets the attributes in this row.
        /// </summary>
        /// <value>Gets or sets the attributes in this row.</value>
        [DataMember(Name="attributes", EmitDefaultValue=true)]
        public Dictionary<string, E3EAPIDataModelsAttribute> Attributes { get; set; }

        /// <summary>
        /// Gets or sets the child objects for this row.
        /// </summary>
        /// <value>Gets or sets the child objects for this row.</value>
        [DataMember(Name="childObjects", EmitDefaultValue=true)]
        public Dictionary<string, E3EAPIDataModelsDataObject> ChildObjects { get; set; }

        /// <summary>
        /// Gets or sets the error in the row level.
        /// </summary>
        /// <value>Gets or sets the error in the row level.</value>
        [DataMember(Name="error", EmitDefaultValue=true)]
        public E3EAPIDataDataError Error { get; set; }

        /// <summary>
        /// Gets or sets the attachment count for the row.
        /// </summary>
        /// <value>Gets or sets the attachment count for the row.</value>
        [DataMember(Name="attachmentCount", EmitDefaultValue=false)]
        public int AttachmentCount { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the row has a comment for collaboration.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the row has a comment for collaboration.</value>
        [DataMember(Name="hasComment", EmitDefaultValue=false)]
        public bool HasComment { get; set; }

        /// <summary>
        /// Gets or sets the index of the row.
        /// </summary>
        /// <value>Gets or sets the index of the row.</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the row is confidential.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the row is confidential.</value>
        [DataMember(Name="isConfidential", EmitDefaultValue=false)]
        public bool IsConfidential { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the row is checked out by another process.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the row is checked out by another process.</value>
        [DataMember(Name="isLocked", EmitDefaultValue=false)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Gets or sets the message indicating whether the row is locked.
        /// </summary>
        /// <value>Gets or sets the message indicating whether the row is locked.</value>
        [DataMember(Name="lockedMessage", EmitDefaultValue=true)]
        public string LockedMessage { get; set; }

        /// <summary>
        /// Gets or sets the row state of the row. Applies to editable objects. When omitted, default value is Edit.
        /// </summary>
        /// <value>Gets or sets the row state of the row. Applies to editable objects. When omitted, default value is Edit.</value>
        [DataMember(Name="rowState", EmitDefaultValue=false)]
        public E3EAPIDataModelsDataRowStates RowState { get; set; }

        /// <summary>
        /// Gets or sets the subclass id of this row.
        /// </summary>
        /// <value>Gets or sets the subclass id of this row.</value>
        [DataMember(Name="subclassId", EmitDefaultValue=true)]
        public string SubclassId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIDataModelsDataRow {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ChildObjects: ").Append(ChildObjects).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  AttachmentCount: ").Append(AttachmentCount).Append("\n");
            sb.Append("  HasComment: ").Append(HasComment).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  IsConfidential: ").Append(IsConfidential).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  LockedMessage: ").Append(LockedMessage).Append("\n");
            sb.Append("  RowState: ").Append(RowState).Append("\n");
            sb.Append("  SubclassId: ").Append(SubclassId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIDataModelsDataRow);
        }

        /// <summary>
        /// Returns true if E3EAPIDataModelsDataRow instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIDataModelsDataRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIDataModelsDataRow input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ChildObjects == input.ChildObjects ||
                    this.ChildObjects != null &&
                    input.ChildObjects != null &&
                    this.ChildObjects.SequenceEqual(input.ChildObjects)
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.AttachmentCount == input.AttachmentCount ||
                    (this.AttachmentCount != null &&
                    this.AttachmentCount.Equals(input.AttachmentCount))
                ) && 
                (
                    this.HasComment == input.HasComment ||
                    (this.HasComment != null &&
                    this.HasComment.Equals(input.HasComment))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.IsConfidential == input.IsConfidential ||
                    (this.IsConfidential != null &&
                    this.IsConfidential.Equals(input.IsConfidential))
                ) && 
                (
                    this.IsLocked == input.IsLocked ||
                    (this.IsLocked != null &&
                    this.IsLocked.Equals(input.IsLocked))
                ) && 
                (
                    this.LockedMessage == input.LockedMessage ||
                    (this.LockedMessage != null &&
                    this.LockedMessage.Equals(input.LockedMessage))
                ) && 
                (
                    this.RowState == input.RowState ||
                    (this.RowState != null &&
                    this.RowState.Equals(input.RowState))
                ) && 
                (
                    this.SubclassId == input.SubclassId ||
                    (this.SubclassId != null &&
                    this.SubclassId.Equals(input.SubclassId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccessType != null)
                    hashCode = hashCode * 59 + this.AccessType.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.ChildObjects != null)
                    hashCode = hashCode * 59 + this.ChildObjects.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.AttachmentCount != null)
                    hashCode = hashCode * 59 + this.AttachmentCount.GetHashCode();
                if (this.HasComment != null)
                    hashCode = hashCode * 59 + this.HasComment.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.IsConfidential != null)
                    hashCode = hashCode * 59 + this.IsConfidential.GetHashCode();
                if (this.IsLocked != null)
                    hashCode = hashCode * 59 + this.IsLocked.GetHashCode();
                if (this.LockedMessage != null)
                    hashCode = hashCode * 59 + this.LockedMessage.GetHashCode();
                if (this.RowState != null)
                    hashCode = hashCode * 59 + this.RowState.GetHashCode();
                if (this.SubclassId != null)
                    hashCode = hashCode * 59 + this.SubclassId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
