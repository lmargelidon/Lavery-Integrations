/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represent identifier of time card has been posted.
    /// </summary>
    [DataContract]
    public partial class E3EAPITimeModelsPostedTimecard :  IEquatable<E3EAPITimeModelsPostedTimecard>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPITimeModelsPostedTimecard" /> class.
        /// </summary>
        /// <param name="timeCardPendingId">Gets or sets the ID of pending timecard posted..</param>
        /// <param name="timeCardId">Gets or sets the ID of posted timecard posted..</param>
        /// <param name="timeIndex">Gets  or sets the Index of timecard created..</param>
        public E3EAPITimeModelsPostedTimecard(Guid timeCardPendingId = default(Guid), Guid timeCardId = default(Guid), int timeIndex = default(int))
        {
            this.TimeCardPendingId = timeCardPendingId;
            this.TimeCardId = timeCardId;
            this.TimeIndex = timeIndex;
        }

        /// <summary>
        /// Gets or sets the ID of pending timecard posted.
        /// </summary>
        /// <value>Gets or sets the ID of pending timecard posted.</value>
        [DataMember(Name="timeCardPendingId", EmitDefaultValue=false)]
        public Guid TimeCardPendingId { get; set; }

        /// <summary>
        /// Gets or sets the ID of posted timecard posted.
        /// </summary>
        /// <value>Gets or sets the ID of posted timecard posted.</value>
        [DataMember(Name="timeCardId", EmitDefaultValue=false)]
        public Guid TimeCardId { get; set; }

        /// <summary>
        /// Gets  or sets the Index of timecard created.
        /// </summary>
        /// <value>Gets  or sets the Index of timecard created.</value>
        [DataMember(Name="timeIndex", EmitDefaultValue=false)]
        public int TimeIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPITimeModelsPostedTimecard {\n");
            sb.Append("  TimeCardPendingId: ").Append(TimeCardPendingId).Append("\n");
            sb.Append("  TimeCardId: ").Append(TimeCardId).Append("\n");
            sb.Append("  TimeIndex: ").Append(TimeIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPITimeModelsPostedTimecard);
        }

        /// <summary>
        /// Returns true if E3EAPITimeModelsPostedTimecard instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPITimeModelsPostedTimecard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPITimeModelsPostedTimecard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimeCardPendingId == input.TimeCardPendingId ||
                    (this.TimeCardPendingId != null &&
                    this.TimeCardPendingId.Equals(input.TimeCardPendingId))
                ) && 
                (
                    this.TimeCardId == input.TimeCardId ||
                    (this.TimeCardId != null &&
                    this.TimeCardId.Equals(input.TimeCardId))
                ) && 
                (
                    this.TimeIndex == input.TimeIndex ||
                    (this.TimeIndex != null &&
                    this.TimeIndex.Equals(input.TimeIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeCardPendingId != null)
                    hashCode = hashCode * 59 + this.TimeCardPendingId.GetHashCode();
                if (this.TimeCardId != null)
                    hashCode = hashCode * 59 + this.TimeCardId.GetHashCode();
                if (this.TimeIndex != null)
                    hashCode = hashCode * 59 + this.TimeIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
