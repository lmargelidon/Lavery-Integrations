/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a data attribute.
    /// </summary>
    [DataContract]
    public partial class E3EAPIDataModelsAttribute :  IEquatable<E3EAPIDataModelsAttribute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIDataModelsAttribute" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id of the attribute..</param>
        /// <param name="accessType">Gets or sets the access type of the attribute. When omitted, default value is Enabled (editable)..</param>
        /// <param name="aliasValue">Gets or sets the alias value for the attribute. Applies to relationship attributes and it comes from the related archetype..</param>
        /// <param name="dataType">Gets or sets the data type of the attribute..</param>
        /// <param name="displayValue">Gets or sets the display value of the attribute..</param>
        /// <param name="error">Gets or sets the errors or warnings for this attribute..</param>
        /// <param name="tooltip">Gets or sets the tooltip for the attribute..</param>
        /// <param name="value">Gets or sets the value of the attribute..</param>
        public E3EAPIDataModelsAttribute(string id = default(string), E3EAPIDataAccessType accessType = default(E3EAPIDataAccessType), string aliasValue = default(string), E3EAPIDataDataType dataType = default(E3EAPIDataDataType), string displayValue = default(string), E3EAPIDataDataError error = default(E3EAPIDataDataError), string tooltip = default(string), string value = default(string))
        {
            this.Id = id;
            this.AliasValue = aliasValue;
            this.DisplayValue = displayValue;
            this.Error = error;
            this.Tooltip = tooltip;
            this.Value = value;
            this.Id = id;
            this.AccessType = accessType;
            this.AliasValue = aliasValue;
            this.DataType = dataType;
            this.DisplayValue = displayValue;
            this.Error = error;
            this.Tooltip = tooltip;
            this.Value = value;
        }

        /// <summary>
        /// Gets or sets the id of the attribute.
        /// </summary>
        /// <value>Gets or sets the id of the attribute.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the access type of the attribute. When omitted, default value is Enabled (editable).
        /// </summary>
        /// <value>Gets or sets the access type of the attribute. When omitted, default value is Enabled (editable).</value>
        [DataMember(Name="accessType", EmitDefaultValue=false)]
        public E3EAPIDataAccessType AccessType { get; set; }

        /// <summary>
        /// Gets or sets the alias value for the attribute. Applies to relationship attributes and it comes from the related archetype.
        /// </summary>
        /// <value>Gets or sets the alias value for the attribute. Applies to relationship attributes and it comes from the related archetype.</value>
        [DataMember(Name="aliasValue", EmitDefaultValue=true)]
        public string AliasValue { get; set; }

        /// <summary>
        /// Gets or sets the data type of the attribute.
        /// </summary>
        /// <value>Gets or sets the data type of the attribute.</value>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public E3EAPIDataDataType DataType { get; set; }

        /// <summary>
        /// Gets or sets the display value of the attribute.
        /// </summary>
        /// <value>Gets or sets the display value of the attribute.</value>
        [DataMember(Name="displayValue", EmitDefaultValue=true)]
        public string DisplayValue { get; set; }

        /// <summary>
        /// Gets or sets the errors or warnings for this attribute.
        /// </summary>
        /// <value>Gets or sets the errors or warnings for this attribute.</value>
        [DataMember(Name="error", EmitDefaultValue=true)]
        public E3EAPIDataDataError Error { get; set; }

        /// <summary>
        /// Gets or sets the tooltip for the attribute.
        /// </summary>
        /// <value>Gets or sets the tooltip for the attribute.</value>
        [DataMember(Name="tooltip", EmitDefaultValue=true)]
        public string Tooltip { get; set; }

        /// <summary>
        /// Gets or sets the value of the attribute.
        /// </summary>
        /// <value>Gets or sets the value of the attribute.</value>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIDataModelsAttribute {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  AliasValue: ").Append(AliasValue).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Tooltip: ").Append(Tooltip).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIDataModelsAttribute);
        }

        /// <summary>
        /// Returns true if E3EAPIDataModelsAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIDataModelsAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIDataModelsAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.AliasValue == input.AliasValue ||
                    (this.AliasValue != null &&
                    this.AliasValue.Equals(input.AliasValue))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.DisplayValue == input.DisplayValue ||
                    (this.DisplayValue != null &&
                    this.DisplayValue.Equals(input.DisplayValue))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.Tooltip == input.Tooltip ||
                    (this.Tooltip != null &&
                    this.Tooltip.Equals(input.Tooltip))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccessType != null)
                    hashCode = hashCode * 59 + this.AccessType.GetHashCode();
                if (this.AliasValue != null)
                    hashCode = hashCode * 59 + this.AliasValue.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.DisplayValue != null)
                    hashCode = hashCode * 59 + this.DisplayValue.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Tooltip != null)
                    hashCode = hashCode * 59 + this.Tooltip.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
