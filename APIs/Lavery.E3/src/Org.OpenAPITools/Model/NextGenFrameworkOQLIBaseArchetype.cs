/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NextGenFrameworkOQLIBaseArchetype
    /// </summary>
    [DataContract]
    public partial class NextGenFrameworkOQLIBaseArchetype :  IEquatable<NextGenFrameworkOQLIBaseArchetype>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextGenFrameworkOQLIBaseArchetype" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public NextGenFrameworkOQLIBaseArchetype()
        {
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or Sets BaseArchetypeID
        /// </summary>
        [DataMember(Name="baseArchetypeID", EmitDefaultValue=true)]
        public string BaseArchetypeID { get; private set; }

        /// <summary>
        /// Gets or Sets SourceObjectCode
        /// </summary>
        [DataMember(Name="sourceObjectCode", EmitDefaultValue=true)]
        public string SourceObjectCode { get; private set; }

        /// <summary>
        /// Gets or Sets IdAttribute
        /// </summary>
        [DataMember(Name="idAttribute", EmitDefaultValue=true)]
        public NextGenFrameworkOQLIBaseAttribute IdAttribute { get; private set; }

        /// <summary>
        /// Gets or Sets KeyAttribute
        /// </summary>
        [DataMember(Name="keyAttribute", EmitDefaultValue=true)]
        public NextGenFrameworkOQLIBaseAttribute KeyAttribute { get; private set; }

        /// <summary>
        /// Gets or Sets RowLevelAccessEnabled
        /// </summary>
        [DataMember(Name="rowLevelAccessEnabled", EmitDefaultValue=false)]
        public bool RowLevelAccessEnabled { get; private set; }

        /// <summary>
        /// Gets or Sets AttachmentsEnabled
        /// </summary>
        [DataMember(Name="attachmentsEnabled", EmitDefaultValue=false)]
        public bool AttachmentsEnabled { get; private set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=true)]
        public Object Attributes { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextGenFrameworkOQLIBaseArchetype {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BaseArchetypeID: ").Append(BaseArchetypeID).Append("\n");
            sb.Append("  SourceObjectCode: ").Append(SourceObjectCode).Append("\n");
            sb.Append("  IdAttribute: ").Append(IdAttribute).Append("\n");
            sb.Append("  KeyAttribute: ").Append(KeyAttribute).Append("\n");
            sb.Append("  RowLevelAccessEnabled: ").Append(RowLevelAccessEnabled).Append("\n");
            sb.Append("  AttachmentsEnabled: ").Append(AttachmentsEnabled).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextGenFrameworkOQLIBaseArchetype);
        }

        /// <summary>
        /// Returns true if NextGenFrameworkOQLIBaseArchetype instances are equal
        /// </summary>
        /// <param name="input">Instance of NextGenFrameworkOQLIBaseArchetype to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextGenFrameworkOQLIBaseArchetype input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BaseArchetypeID == input.BaseArchetypeID ||
                    (this.BaseArchetypeID != null &&
                    this.BaseArchetypeID.Equals(input.BaseArchetypeID))
                ) && 
                (
                    this.SourceObjectCode == input.SourceObjectCode ||
                    (this.SourceObjectCode != null &&
                    this.SourceObjectCode.Equals(input.SourceObjectCode))
                ) && 
                (
                    this.IdAttribute == input.IdAttribute ||
                    (this.IdAttribute != null &&
                    this.IdAttribute.Equals(input.IdAttribute))
                ) && 
                (
                    this.KeyAttribute == input.KeyAttribute ||
                    (this.KeyAttribute != null &&
                    this.KeyAttribute.Equals(input.KeyAttribute))
                ) && 
                (
                    this.RowLevelAccessEnabled == input.RowLevelAccessEnabled ||
                    (this.RowLevelAccessEnabled != null &&
                    this.RowLevelAccessEnabled.Equals(input.RowLevelAccessEnabled))
                ) && 
                (
                    this.AttachmentsEnabled == input.AttachmentsEnabled ||
                    (this.AttachmentsEnabled != null &&
                    this.AttachmentsEnabled.Equals(input.AttachmentsEnabled))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BaseArchetypeID != null)
                    hashCode = hashCode * 59 + this.BaseArchetypeID.GetHashCode();
                if (this.SourceObjectCode != null)
                    hashCode = hashCode * 59 + this.SourceObjectCode.GetHashCode();
                if (this.IdAttribute != null)
                    hashCode = hashCode * 59 + this.IdAttribute.GetHashCode();
                if (this.KeyAttribute != null)
                    hashCode = hashCode * 59 + this.KeyAttribute.GetHashCode();
                if (this.RowLevelAccessEnabled != null)
                    hashCode = hashCode * 59 + this.RowLevelAccessEnabled.GetHashCode();
                if (this.AttachmentsEnabled != null)
                    hashCode = hashCode * 59 + this.AttachmentsEnabled.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
