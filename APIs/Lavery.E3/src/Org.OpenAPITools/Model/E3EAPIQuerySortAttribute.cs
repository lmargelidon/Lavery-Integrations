/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents sort attributes returned in query.
    /// </summary>
    [DataContract]
    public partial class E3EAPIQuerySortAttribute :  IEquatable<E3EAPIQuerySortAttribute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIQuerySortAttribute" /> class.
        /// </summary>
        /// <param name="captionId">Gets or sets the captionId of the attribute..</param>
        /// <param name="caption">Gets or sets the caption of the attribute..</param>
        /// <param name="id">Gets or sets the id of the attribute..</param>
        /// <param name="order">Gets or sets the order of the attribute..</param>
        /// <param name="sortDirection">Gets or sets the sort direction for the attribute..</param>
        public E3EAPIQuerySortAttribute(string captionId = default(string), string caption = default(string), string id = default(string), int order = default(int), E3EAPIQuerySortDirection sortDirection = default(E3EAPIQuerySortDirection))
        {
            this.CaptionId = captionId;
            this.Caption = caption;
            this.Id = id;
            this.CaptionId = captionId;
            this.Caption = caption;
            this.Id = id;
            this.Order = order;
            this.SortDirection = sortDirection;
        }

        /// <summary>
        /// Gets or sets the captionId of the attribute.
        /// </summary>
        /// <value>Gets or sets the captionId of the attribute.</value>
        [DataMember(Name="captionId", EmitDefaultValue=true)]
        public string CaptionId { get; set; }

        /// <summary>
        /// Gets or sets the caption of the attribute.
        /// </summary>
        /// <value>Gets or sets the caption of the attribute.</value>
        [DataMember(Name="caption", EmitDefaultValue=true)]
        public string Caption { get; set; }

        /// <summary>
        /// Gets or sets the id of the attribute.
        /// </summary>
        /// <value>Gets or sets the id of the attribute.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the order of the attribute.
        /// </summary>
        /// <value>Gets or sets the order of the attribute.</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public int Order { get; set; }

        /// <summary>
        /// Gets or sets the sort direction for the attribute.
        /// </summary>
        /// <value>Gets or sets the sort direction for the attribute.</value>
        [DataMember(Name="sortDirection", EmitDefaultValue=false)]
        public E3EAPIQuerySortDirection SortDirection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIQuerySortAttribute {\n");
            sb.Append("  CaptionId: ").Append(CaptionId).Append("\n");
            sb.Append("  Caption: ").Append(Caption).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIQuerySortAttribute);
        }

        /// <summary>
        /// Returns true if E3EAPIQuerySortAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIQuerySortAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIQuerySortAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CaptionId == input.CaptionId ||
                    (this.CaptionId != null &&
                    this.CaptionId.Equals(input.CaptionId))
                ) && 
                (
                    this.Caption == input.Caption ||
                    (this.Caption != null &&
                    this.Caption.Equals(input.Caption))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.SortDirection == input.SortDirection ||
                    (this.SortDirection != null &&
                    this.SortDirection.Equals(input.SortDirection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CaptionId != null)
                    hashCode = hashCode * 59 + this.CaptionId.GetHashCode();
                if (this.Caption != null)
                    hashCode = hashCode * 59 + this.Caption.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.SortDirection != null)
                    hashCode = hashCode * 59 + this.SortDirection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
