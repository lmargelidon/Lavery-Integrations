/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents error information
    /// </summary>
    [DataContract]
    public partial class E3EAPIDataModelsErrorInfo :  IEquatable<E3EAPIDataModelsErrorInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIDataModelsErrorInfo" /> class.
        /// </summary>
        /// <param name="error">Gets or sets E3E.API.Data.DataError..</param>
        /// <param name="rowId">Gets or sets optional Id of the row where error has occured..</param>
        /// <param name="index">Gets or sets row index where error has occured..</param>
        /// <param name="attributeId">Gets or sets id of the attribute (if any) where error has occured..</param>
        public E3EAPIDataModelsErrorInfo(E3EAPIDataDataError error = default(E3EAPIDataDataError), string rowId = default(string), int? index = default(int?), string attributeId = default(string))
        {
            this.Error = error;
            this.RowId = rowId;
            this.Index = index;
            this.AttributeId = attributeId;
            this.Error = error;
            this.RowId = rowId;
            this.Index = index;
            this.AttributeId = attributeId;
        }

        /// <summary>
        /// Gets or sets E3E.API.Data.DataError.
        /// </summary>
        /// <value>Gets or sets E3E.API.Data.DataError.</value>
        [DataMember(Name="error", EmitDefaultValue=true)]
        public E3EAPIDataDataError Error { get; set; }

        /// <summary>
        /// Gets or sets optional Id of the row where error has occured.
        /// </summary>
        /// <value>Gets or sets optional Id of the row where error has occured.</value>
        [DataMember(Name="rowId", EmitDefaultValue=true)]
        public string RowId { get; set; }

        /// <summary>
        /// Gets or sets row index where error has occured.
        /// </summary>
        /// <value>Gets or sets row index where error has occured.</value>
        [DataMember(Name="index", EmitDefaultValue=true)]
        public int? Index { get; set; }

        /// <summary>
        /// Gets or sets id of the attribute (if any) where error has occured.
        /// </summary>
        /// <value>Gets or sets id of the attribute (if any) where error has occured.</value>
        [DataMember(Name="attributeId", EmitDefaultValue=true)]
        public string AttributeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIDataModelsErrorInfo {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  RowId: ").Append(RowId).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  AttributeId: ").Append(AttributeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIDataModelsErrorInfo);
        }

        /// <summary>
        /// Returns true if E3EAPIDataModelsErrorInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIDataModelsErrorInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIDataModelsErrorInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.RowId == input.RowId ||
                    (this.RowId != null &&
                    this.RowId.Equals(input.RowId))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.AttributeId == input.AttributeId ||
                    (this.AttributeId != null &&
                    this.AttributeId.Equals(input.AttributeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.RowId != null)
                    hashCode = hashCode * 59 + this.RowId.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.AttributeId != null)
                    hashCode = hashCode * 59 + this.AttributeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
