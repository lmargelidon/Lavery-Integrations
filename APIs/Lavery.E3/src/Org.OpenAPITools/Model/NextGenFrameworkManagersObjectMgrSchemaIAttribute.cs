/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NextGenFrameworkManagersObjectMgrSchemaIAttribute
    /// </summary>
    [DataContract]
    public partial class NextGenFrameworkManagersObjectMgrSchemaIAttribute :  IEquatable<NextGenFrameworkManagersObjectMgrSchemaIAttribute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextGenFrameworkManagersObjectMgrSchemaIAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public NextGenFrameworkManagersObjectMgrSchemaIAttribute()
        {
        }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue", EmitDefaultValue=true)]
        public Object DefaultValue { get; private set; }

        /// <summary>
        /// Gets or Sets DraftOrdinal
        /// </summary>
        [DataMember(Name="draftOrdinal", EmitDefaultValue=false)]
        public int DraftOrdinal { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateOrdinal
        /// </summary>
        [DataMember(Name="templateOrdinal", EmitDefaultValue=false)]
        public int TemplateOrdinal { get; private set; }

        /// <summary>
        /// Gets or Sets LinkedAttributes
        /// </summary>
        [DataMember(Name="linkedAttributes", EmitDefaultValue=true)]
        public List<Object> LinkedAttributes { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextGenFrameworkManagersObjectMgrSchemaIAttribute {\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  DraftOrdinal: ").Append(DraftOrdinal).Append("\n");
            sb.Append("  TemplateOrdinal: ").Append(TemplateOrdinal).Append("\n");
            sb.Append("  LinkedAttributes: ").Append(LinkedAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextGenFrameworkManagersObjectMgrSchemaIAttribute);
        }

        /// <summary>
        /// Returns true if NextGenFrameworkManagersObjectMgrSchemaIAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of NextGenFrameworkManagersObjectMgrSchemaIAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextGenFrameworkManagersObjectMgrSchemaIAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.DraftOrdinal == input.DraftOrdinal ||
                    (this.DraftOrdinal != null &&
                    this.DraftOrdinal.Equals(input.DraftOrdinal))
                ) && 
                (
                    this.TemplateOrdinal == input.TemplateOrdinal ||
                    (this.TemplateOrdinal != null &&
                    this.TemplateOrdinal.Equals(input.TemplateOrdinal))
                ) && 
                (
                    this.LinkedAttributes == input.LinkedAttributes ||
                    this.LinkedAttributes != null &&
                    input.LinkedAttributes != null &&
                    this.LinkedAttributes.SequenceEqual(input.LinkedAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.DraftOrdinal != null)
                    hashCode = hashCode * 59 + this.DraftOrdinal.GetHashCode();
                if (this.TemplateOrdinal != null)
                    hashCode = hashCode * 59 + this.TemplateOrdinal.GetHashCode();
                if (this.LinkedAttributes != null)
                    hashCode = hashCode * 59 + this.LinkedAttributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
