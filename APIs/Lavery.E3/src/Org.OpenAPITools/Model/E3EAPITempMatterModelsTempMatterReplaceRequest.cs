/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains parameters to make a request to create a Temp Matter with an actual Matter.
    /// </summary>
    [DataContract]
    public partial class E3EAPITempMatterModelsTempMatterReplaceRequest :  IEquatable<E3EAPITempMatterModelsTempMatterReplaceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPITempMatterModelsTempMatterReplaceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected E3EAPITempMatterModelsTempMatterReplaceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPITempMatterModelsTempMatterReplaceRequest" /> class.
        /// </summary>
        /// <param name="tempMatterId">Gets or sets the Id of a temp matter. (required).</param>
        /// <param name="matterId">Gets or sets the Id of an actual matter..</param>
        /// <param name="matterIndex">Gets or sets the index of an actual matter..</param>
        /// <param name="timecardIds">Gets or sets a collection of timecard Id for which a temp matter should be replaced with an actual matter..</param>
        public E3EAPITempMatterModelsTempMatterReplaceRequest(Guid tempMatterId = default(Guid), Guid matterId = default(Guid), int matterIndex = default(int), List<Guid> timecardIds = default(List<Guid>))
        {
            // to ensure "tempMatterId" is required (not null)
            if (tempMatterId == null)
            {
                throw new InvalidDataException("tempMatterId is a required property for E3EAPITempMatterModelsTempMatterReplaceRequest and cannot be null");
            }
            else
            {
                this.TempMatterId = tempMatterId;
            }

            this.TimecardIds = timecardIds;
            this.MatterId = matterId;
            this.MatterIndex = matterIndex;
            this.TimecardIds = timecardIds;
        }

        /// <summary>
        /// Gets or sets the Id of a temp matter.
        /// </summary>
        /// <value>Gets or sets the Id of a temp matter.</value>
        [DataMember(Name="tempMatterId", EmitDefaultValue=true)]
        public Guid TempMatterId { get; set; }

        /// <summary>
        /// Gets or sets the Id of an actual matter.
        /// </summary>
        /// <value>Gets or sets the Id of an actual matter.</value>
        [DataMember(Name="matterId", EmitDefaultValue=false)]
        public Guid MatterId { get; set; }

        /// <summary>
        /// Gets or sets the index of an actual matter.
        /// </summary>
        /// <value>Gets or sets the index of an actual matter.</value>
        [DataMember(Name="matterIndex", EmitDefaultValue=false)]
        public int MatterIndex { get; set; }

        /// <summary>
        /// Gets or sets a collection of timecard Id for which a temp matter should be replaced with an actual matter.
        /// </summary>
        /// <value>Gets or sets a collection of timecard Id for which a temp matter should be replaced with an actual matter.</value>
        [DataMember(Name="timecardIds", EmitDefaultValue=true)]
        public List<Guid> TimecardIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPITempMatterModelsTempMatterReplaceRequest {\n");
            sb.Append("  TempMatterId: ").Append(TempMatterId).Append("\n");
            sb.Append("  MatterId: ").Append(MatterId).Append("\n");
            sb.Append("  MatterIndex: ").Append(MatterIndex).Append("\n");
            sb.Append("  TimecardIds: ").Append(TimecardIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPITempMatterModelsTempMatterReplaceRequest);
        }

        /// <summary>
        /// Returns true if E3EAPITempMatterModelsTempMatterReplaceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPITempMatterModelsTempMatterReplaceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPITempMatterModelsTempMatterReplaceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TempMatterId == input.TempMatterId ||
                    (this.TempMatterId != null &&
                    this.TempMatterId.Equals(input.TempMatterId))
                ) && 
                (
                    this.MatterId == input.MatterId ||
                    (this.MatterId != null &&
                    this.MatterId.Equals(input.MatterId))
                ) && 
                (
                    this.MatterIndex == input.MatterIndex ||
                    (this.MatterIndex != null &&
                    this.MatterIndex.Equals(input.MatterIndex))
                ) && 
                (
                    this.TimecardIds == input.TimecardIds ||
                    this.TimecardIds != null &&
                    input.TimecardIds != null &&
                    this.TimecardIds.SequenceEqual(input.TimecardIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TempMatterId != null)
                    hashCode = hashCode * 59 + this.TempMatterId.GetHashCode();
                if (this.MatterId != null)
                    hashCode = hashCode * 59 + this.MatterId.GetHashCode();
                if (this.MatterIndex != null)
                    hashCode = hashCode * 59 + this.MatterIndex.GetHashCode();
                if (this.TimecardIds != null)
                    hashCode = hashCode * 59 + this.TimecardIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
