/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NextGenFrameworkOQLILeaf
    /// </summary>
    [DataContract]
    public partial class NextGenFrameworkOQLILeaf :  IEquatable<NextGenFrameworkOQLILeaf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextGenFrameworkOQLILeaf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public NextGenFrameworkOQLILeaf()
        {
        }

        /// <summary>
        /// Gets or Sets GetAttribute
        /// </summary>
        [DataMember(Name="getAttribute", EmitDefaultValue=true)]
        public NextGenFrameworkOQLIBaseAttribute GetAttribute { get; private set; }

        /// <summary>
        /// Gets or Sets GetDBType
        /// </summary>
        [DataMember(Name="getDBType", EmitDefaultValue=true)]
        public NextGenFrameworkOQLIType GetDBType { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextGenFrameworkOQLILeaf {\n");
            sb.Append("  GetAttribute: ").Append(GetAttribute).Append("\n");
            sb.Append("  GetDBType: ").Append(GetDBType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextGenFrameworkOQLILeaf);
        }

        /// <summary>
        /// Returns true if NextGenFrameworkOQLILeaf instances are equal
        /// </summary>
        /// <param name="input">Instance of NextGenFrameworkOQLILeaf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextGenFrameworkOQLILeaf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GetAttribute == input.GetAttribute ||
                    (this.GetAttribute != null &&
                    this.GetAttribute.Equals(input.GetAttribute))
                ) && 
                (
                    this.GetDBType == input.GetDBType ||
                    (this.GetDBType != null &&
                    this.GetDBType.Equals(input.GetDBType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GetAttribute != null)
                    hashCode = hashCode * 59 + this.GetAttribute.GetHashCode();
                if (this.GetDBType != null)
                    hashCode = hashCode * 59 + this.GetDBType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
