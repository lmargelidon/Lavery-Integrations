/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a join
    /// </summary>
    [DataContract]
    public partial class E3EAPIQuerySJQLSJJoin :  IEquatable<E3EAPIQuerySJQLSJJoin>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIQuerySJQLSJJoin" /> class.
        /// </summary>
        /// <param name="from">Gets or Sets the \&quot;From\&quot; Attribute for the Join. It can be \&quot;.\&quot; notated and can start with an ArchetypeId. Archetype Id for the root archetype can be omitted. e.g. Client1.Number.</param>
        /// <param name="to">Gets or Sets the \&quot;To\&quot; AttributeId for the Join. It needs to be \&quot;.\&quot; notated and should start with the ArchtypeId e.g. TkprDate.StartDate.</param>
        /// <param name="isOuterJoin">Gets or sets if this Join is an Outer Join..</param>
        public E3EAPIQuerySJQLSJJoin(string from = default(string), string to = default(string), bool? isOuterJoin = default(bool?))
        {
            this.From = from;
            this.To = to;
            this.IsOuterJoin = isOuterJoin;
            this.From = from;
            this.To = to;
            this.IsOuterJoin = isOuterJoin;
        }

        /// <summary>
        /// Gets or Sets the \&quot;From\&quot; Attribute for the Join. It can be \&quot;.\&quot; notated and can start with an ArchetypeId. Archetype Id for the root archetype can be omitted. e.g. Client1.Number
        /// </summary>
        /// <value>Gets or Sets the \&quot;From\&quot; Attribute for the Join. It can be \&quot;.\&quot; notated and can start with an ArchetypeId. Archetype Id for the root archetype can be omitted. e.g. Client1.Number</value>
        [DataMember(Name="from", EmitDefaultValue=true)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets the \&quot;To\&quot; AttributeId for the Join. It needs to be \&quot;.\&quot; notated and should start with the ArchtypeId e.g. TkprDate.StartDate
        /// </summary>
        /// <value>Gets or Sets the \&quot;To\&quot; AttributeId for the Join. It needs to be \&quot;.\&quot; notated and should start with the ArchtypeId e.g. TkprDate.StartDate</value>
        [DataMember(Name="to", EmitDefaultValue=true)]
        public string To { get; set; }

        /// <summary>
        /// Gets or sets if this Join is an Outer Join.
        /// </summary>
        /// <value>Gets or sets if this Join is an Outer Join.</value>
        [DataMember(Name="isOuterJoin", EmitDefaultValue=true)]
        public bool? IsOuterJoin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIQuerySJQLSJJoin {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  IsOuterJoin: ").Append(IsOuterJoin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIQuerySJQLSJJoin);
        }

        /// <summary>
        /// Returns true if E3EAPIQuerySJQLSJJoin instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIQuerySJQLSJJoin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIQuerySJQLSJJoin input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.IsOuterJoin == input.IsOuterJoin ||
                    (this.IsOuterJoin != null &&
                    this.IsOuterJoin.Equals(input.IsOuterJoin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.IsOuterJoin != null)
                    hashCode = hashCode * 59 + this.IsOuterJoin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
