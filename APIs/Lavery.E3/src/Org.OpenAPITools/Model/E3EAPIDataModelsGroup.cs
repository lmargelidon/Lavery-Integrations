/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a group in data.
    /// </summary>
    [DataContract]
    public partial class E3EAPIDataModelsGroup :  IEquatable<E3EAPIDataModelsGroup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIDataModelsGroup" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id of the Group..</param>
        /// <param name="groupCount">Gets or sets the number of groups in the next level..</param>
        /// <param name="groups">Gets or sets the groups within this group..</param>
        /// <param name="rowCount">Gets or sets the row count..</param>
        /// <param name="rowOffset">Gets or sets the row offset..</param>
        /// <param name="rows">Gets or sets the data rows under this group..</param>
        /// <param name="totals">Gets or sets the totals for this group..</param>
        /// <param name="editedGroup">Gets or sets editedGroup..</param>
        public E3EAPIDataModelsGroup(string id = default(string), int groupCount = default(int), Dictionary<string, E3EAPIDataModelsGroup> groups = default(Dictionary<string, E3EAPIDataModelsGroup>), int rowCount = default(int), int rowOffset = default(int), Dictionary<string, E3EAPIDataModelsDataRow> rows = default(Dictionary<string, E3EAPIDataModelsDataRow>), Dictionary<string, string> totals = default(Dictionary<string, string>), E3EAPIDataModelsGroup editedGroup = default(E3EAPIDataModelsGroup))
        {
            this.Id = id;
            this.Groups = groups;
            this.Rows = rows;
            this.Totals = totals;
            this.EditedGroup = editedGroup;
            this.Id = id;
            this.GroupCount = groupCount;
            this.Groups = groups;
            this.RowCount = rowCount;
            this.RowOffset = rowOffset;
            this.Rows = rows;
            this.Totals = totals;
            this.EditedGroup = editedGroup;
        }

        /// <summary>
        /// Gets or sets the id of the Group.
        /// </summary>
        /// <value>Gets or sets the id of the Group.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the number of groups in the next level.
        /// </summary>
        /// <value>Gets or sets the number of groups in the next level.</value>
        [DataMember(Name="groupCount", EmitDefaultValue=false)]
        public int GroupCount { get; set; }

        /// <summary>
        /// Gets or sets the groups within this group.
        /// </summary>
        /// <value>Gets or sets the groups within this group.</value>
        [DataMember(Name="groups", EmitDefaultValue=true)]
        public Dictionary<string, E3EAPIDataModelsGroup> Groups { get; set; }

        /// <summary>
        /// Gets or sets the row count.
        /// </summary>
        /// <value>Gets or sets the row count.</value>
        [DataMember(Name="rowCount", EmitDefaultValue=false)]
        public int RowCount { get; set; }

        /// <summary>
        /// Gets or sets the row offset.
        /// </summary>
        /// <value>Gets or sets the row offset.</value>
        [DataMember(Name="rowOffset", EmitDefaultValue=false)]
        public int RowOffset { get; set; }

        /// <summary>
        /// Gets or sets the data rows under this group.
        /// </summary>
        /// <value>Gets or sets the data rows under this group.</value>
        [DataMember(Name="rows", EmitDefaultValue=true)]
        public Dictionary<string, E3EAPIDataModelsDataRow> Rows { get; set; }

        /// <summary>
        /// Gets or sets the totals for this group.
        /// </summary>
        /// <value>Gets or sets the totals for this group.</value>
        [DataMember(Name="totals", EmitDefaultValue=true)]
        public Dictionary<string, string> Totals { get; set; }

        /// <summary>
        /// Gets or sets editedGroup.
        /// </summary>
        /// <value>Gets or sets editedGroup.</value>
        [DataMember(Name="editedGroup", EmitDefaultValue=true)]
        public E3EAPIDataModelsGroup EditedGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIDataModelsGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  GroupCount: ").Append(GroupCount).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  RowCount: ").Append(RowCount).Append("\n");
            sb.Append("  RowOffset: ").Append(RowOffset).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  Totals: ").Append(Totals).Append("\n");
            sb.Append("  EditedGroup: ").Append(EditedGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIDataModelsGroup);
        }

        /// <summary>
        /// Returns true if E3EAPIDataModelsGroup instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIDataModelsGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIDataModelsGroup input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GroupCount == input.GroupCount ||
                    (this.GroupCount != null &&
                    this.GroupCount.Equals(input.GroupCount))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.RowCount == input.RowCount ||
                    (this.RowCount != null &&
                    this.RowCount.Equals(input.RowCount))
                ) && 
                (
                    this.RowOffset == input.RowOffset ||
                    (this.RowOffset != null &&
                    this.RowOffset.Equals(input.RowOffset))
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                ) && 
                (
                    this.Totals == input.Totals ||
                    this.Totals != null &&
                    input.Totals != null &&
                    this.Totals.SequenceEqual(input.Totals)
                ) && 
                (
                    this.EditedGroup == input.EditedGroup ||
                    (this.EditedGroup != null &&
                    this.EditedGroup.Equals(input.EditedGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GroupCount != null)
                    hashCode = hashCode * 59 + this.GroupCount.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.RowCount != null)
                    hashCode = hashCode * 59 + this.RowCount.GetHashCode();
                if (this.RowOffset != null)
                    hashCode = hashCode * 59 + this.RowOffset.GetHashCode();
                if (this.Rows != null)
                    hashCode = hashCode * 59 + this.Rows.GetHashCode();
                if (this.Totals != null)
                    hashCode = hashCode * 59 + this.Totals.GetHashCode();
                if (this.EditedGroup != null)
                    hashCode = hashCode * 59 + this.EditedGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
