/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains parameters that allow filtering E3E.API.DataObject.Models.DataObjectModelBase by attributes and children.
    /// </summary>
    [DataContract]
    public partial class E3EAPIDataObjectModelsAttributesFilterModelWithChildren :  IEquatable<E3EAPIDataObjectModelsAttributesFilterModelWithChildren>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIDataObjectModelsAttributesFilterModelWithChildren" /> class.
        /// </summary>
        /// <param name="childObjectsToInclude">childObjectsToInclude.</param>
        /// <param name="attributesToInclude">attributesToInclude.</param>
        /// <param name="filterXOQL">filterXOQL.</param>
        /// <param name="filter">filter.</param>
        public E3EAPIDataObjectModelsAttributesFilterModelWithChildren(List<string> childObjectsToInclude = default(List<string>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), E3EAPIQuerySJQLSJPredicateGroup filter = default(E3EAPIQuerySJQLSJPredicateGroup))
        {
            this.ChildObjectsToInclude = childObjectsToInclude;
            this.AttributesToInclude = attributesToInclude;
            this.FilterXOQL = filterXOQL;
            this.Filter = filter;
            this.ChildObjectsToInclude = childObjectsToInclude;
            this.AttributesToInclude = attributesToInclude;
            this.FilterXOQL = filterXOQL;
            this.Filter = filter;
        }

        /// <summary>
        /// Gets or Sets ChildObjectsToInclude
        /// </summary>
        [DataMember(Name="childObjectsToInclude", EmitDefaultValue=true)]
        public List<string> ChildObjectsToInclude { get; set; }

        /// <summary>
        /// Gets or Sets AttributesToInclude
        /// </summary>
        [DataMember(Name="attributesToInclude", EmitDefaultValue=true)]
        public List<string> AttributesToInclude { get; set; }

        /// <summary>
        /// Gets or Sets FilterXOQL
        /// </summary>
        [DataMember(Name="filterXOQL", EmitDefaultValue=true)]
        public string FilterXOQL { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=true)]
        public E3EAPIQuerySJQLSJPredicateGroup Filter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIDataObjectModelsAttributesFilterModelWithChildren {\n");
            sb.Append("  ChildObjectsToInclude: ").Append(ChildObjectsToInclude).Append("\n");
            sb.Append("  AttributesToInclude: ").Append(AttributesToInclude).Append("\n");
            sb.Append("  FilterXOQL: ").Append(FilterXOQL).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIDataObjectModelsAttributesFilterModelWithChildren);
        }

        /// <summary>
        /// Returns true if E3EAPIDataObjectModelsAttributesFilterModelWithChildren instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIDataObjectModelsAttributesFilterModelWithChildren to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIDataObjectModelsAttributesFilterModelWithChildren input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChildObjectsToInclude == input.ChildObjectsToInclude ||
                    this.ChildObjectsToInclude != null &&
                    input.ChildObjectsToInclude != null &&
                    this.ChildObjectsToInclude.SequenceEqual(input.ChildObjectsToInclude)
                ) && 
                (
                    this.AttributesToInclude == input.AttributesToInclude ||
                    this.AttributesToInclude != null &&
                    input.AttributesToInclude != null &&
                    this.AttributesToInclude.SequenceEqual(input.AttributesToInclude)
                ) && 
                (
                    this.FilterXOQL == input.FilterXOQL ||
                    (this.FilterXOQL != null &&
                    this.FilterXOQL.Equals(input.FilterXOQL))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChildObjectsToInclude != null)
                    hashCode = hashCode * 59 + this.ChildObjectsToInclude.GetHashCode();
                if (this.AttributesToInclude != null)
                    hashCode = hashCode * 59 + this.AttributesToInclude.GetHashCode();
                if (this.FilterXOQL != null)
                    hashCode = hashCode * 59 + this.FilterXOQL.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
