/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains parameters to make a request to download an IC attachment.
    /// </summary>
    [DataContract]
    public partial class E3EAPIAttachmentModelsICAttachmentDownloadRequest :  IEquatable<E3EAPIAttachmentModelsICAttachmentDownloadRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIAttachmentModelsICAttachmentDownloadRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected E3EAPIAttachmentModelsICAttachmentDownloadRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIAttachmentModelsICAttachmentDownloadRequest" /> class.
        /// </summary>
        /// <param name="syncId">Gets or sets IC SyncId. (required).</param>
        /// <param name="archetype">Gets or sets an archetype. (required).</param>
        /// <param name="parentItemId">Gets or sets the Id of a parent data object. (required).</param>
        public E3EAPIAttachmentModelsICAttachmentDownloadRequest(string syncId = default(string), string archetype = default(string), Guid parentItemId = default(Guid))
        {
            // to ensure "syncId" is required (not null)
            if (syncId == null)
            {
                throw new InvalidDataException("syncId is a required property for E3EAPIAttachmentModelsICAttachmentDownloadRequest and cannot be null");
            }
            else
            {
                this.SyncId = syncId;
            }

            // to ensure "archetype" is required (not null)
            if (archetype == null)
            {
                throw new InvalidDataException("archetype is a required property for E3EAPIAttachmentModelsICAttachmentDownloadRequest and cannot be null");
            }
            else
            {
                this.Archetype = archetype;
            }

            // to ensure "parentItemId" is required (not null)
            if (parentItemId == null)
            {
                throw new InvalidDataException("parentItemId is a required property for E3EAPIAttachmentModelsICAttachmentDownloadRequest and cannot be null");
            }
            else
            {
                this.ParentItemId = parentItemId;
            }

        }

        /// <summary>
        /// Gets or sets IC SyncId.
        /// </summary>
        /// <value>Gets or sets IC SyncId.</value>
        [DataMember(Name="syncId", EmitDefaultValue=true)]
        public string SyncId { get; set; }

        /// <summary>
        /// Gets or sets an archetype.
        /// </summary>
        /// <value>Gets or sets an archetype.</value>
        [DataMember(Name="archetype", EmitDefaultValue=true)]
        public string Archetype { get; set; }

        /// <summary>
        /// Gets or sets the Id of a parent data object.
        /// </summary>
        /// <value>Gets or sets the Id of a parent data object.</value>
        [DataMember(Name="parentItemId", EmitDefaultValue=true)]
        public Guid ParentItemId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIAttachmentModelsICAttachmentDownloadRequest {\n");
            sb.Append("  SyncId: ").Append(SyncId).Append("\n");
            sb.Append("  Archetype: ").Append(Archetype).Append("\n");
            sb.Append("  ParentItemId: ").Append(ParentItemId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIAttachmentModelsICAttachmentDownloadRequest);
        }

        /// <summary>
        /// Returns true if E3EAPIAttachmentModelsICAttachmentDownloadRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIAttachmentModelsICAttachmentDownloadRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIAttachmentModelsICAttachmentDownloadRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SyncId == input.SyncId ||
                    (this.SyncId != null &&
                    this.SyncId.Equals(input.SyncId))
                ) && 
                (
                    this.Archetype == input.Archetype ||
                    (this.Archetype != null &&
                    this.Archetype.Equals(input.Archetype))
                ) && 
                (
                    this.ParentItemId == input.ParentItemId ||
                    (this.ParentItemId != null &&
                    this.ParentItemId.Equals(input.ParentItemId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SyncId != null)
                    hashCode = hashCode * 59 + this.SyncId.GetHashCode();
                if (this.Archetype != null)
                    hashCode = hashCode * 59 + this.Archetype.GetHashCode();
                if (this.ParentItemId != null)
                    hashCode = hashCode * 59 + this.ParentItemId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
