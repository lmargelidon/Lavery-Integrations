/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents the time has been reported for a specific date.
    /// </summary>
    [DataContract]
    public partial class E3EAPITimeModelsCalendarItem :  IEquatable<E3EAPITimeModelsCalendarItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPITimeModelsCalendarItem" /> class.
        /// </summary>
        /// <param name="date">Gets or sets the date time has been reported..</param>
        /// <param name="posted">Gets or sets the number of posted hours..</param>
        /// <param name="pending">Gets or sets the number of pending hours..</param>
        /// <param name="billable">Gets or sets the number of billable hours..</param>
        /// <param name="nonBillable">Gets or sets the number of non-billable hours..</param>
        /// <param name="unassigned">Gets or sets the number of unassigned hours..</param>
        public E3EAPITimeModelsCalendarItem(DateTime date = default(DateTime), double posted = default(double), double pending = default(double), double billable = default(double), double nonBillable = default(double), double unassigned = default(double))
        {
            this.Date = date;
            this.Posted = posted;
            this.Pending = pending;
            this.Billable = billable;
            this.NonBillable = nonBillable;
            this.Unassigned = unassigned;
        }

        /// <summary>
        /// Gets or sets the date time has been reported.
        /// </summary>
        /// <value>Gets or sets the date time has been reported.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or sets the number of posted hours.
        /// </summary>
        /// <value>Gets or sets the number of posted hours.</value>
        [DataMember(Name="posted", EmitDefaultValue=false)]
        public double Posted { get; set; }

        /// <summary>
        /// Gets or sets the number of pending hours.
        /// </summary>
        /// <value>Gets or sets the number of pending hours.</value>
        [DataMember(Name="pending", EmitDefaultValue=false)]
        public double Pending { get; set; }

        /// <summary>
        /// Gets or sets the number of billable hours.
        /// </summary>
        /// <value>Gets or sets the number of billable hours.</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public double Billable { get; set; }

        /// <summary>
        /// Gets or sets the number of non-billable hours.
        /// </summary>
        /// <value>Gets or sets the number of non-billable hours.</value>
        [DataMember(Name="nonBillable", EmitDefaultValue=false)]
        public double NonBillable { get; set; }

        /// <summary>
        /// Gets or sets the number of unassigned hours.
        /// </summary>
        /// <value>Gets or sets the number of unassigned hours.</value>
        [DataMember(Name="unassigned", EmitDefaultValue=false)]
        public double Unassigned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPITimeModelsCalendarItem {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Posted: ").Append(Posted).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  NonBillable: ").Append(NonBillable).Append("\n");
            sb.Append("  Unassigned: ").Append(Unassigned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPITimeModelsCalendarItem);
        }

        /// <summary>
        /// Returns true if E3EAPITimeModelsCalendarItem instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPITimeModelsCalendarItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPITimeModelsCalendarItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Posted == input.Posted ||
                    (this.Posted != null &&
                    this.Posted.Equals(input.Posted))
                ) && 
                (
                    this.Pending == input.Pending ||
                    (this.Pending != null &&
                    this.Pending.Equals(input.Pending))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.NonBillable == input.NonBillable ||
                    (this.NonBillable != null &&
                    this.NonBillable.Equals(input.NonBillable))
                ) && 
                (
                    this.Unassigned == input.Unassigned ||
                    (this.Unassigned != null &&
                    this.Unassigned.Equals(input.Unassigned))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Posted != null)
                    hashCode = hashCode * 59 + this.Posted.GetHashCode();
                if (this.Pending != null)
                    hashCode = hashCode * 59 + this.Pending.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.NonBillable != null)
                    hashCode = hashCode * 59 + this.NonBillable.GetHashCode();
                if (this.Unassigned != null)
                    hashCode = hashCode * 59 + this.Unassigned.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
