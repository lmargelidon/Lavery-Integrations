/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NextGenFrameworkOQLIBaseAttribute
    /// </summary>
    [DataContract]
    public partial class NextGenFrameworkOQLIBaseAttribute :  IEquatable<NextGenFrameworkOQLIBaseAttribute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextGenFrameworkOQLIBaseAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public NextGenFrameworkOQLIBaseAttribute()
        {
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=true)]
        public NextGenFrameworkOQLIBaseArchetype Owner { get; private set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public bool IsRequired { get; private set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name="dataType", EmitDefaultValue=true)]
        public NextGenFrameworkOQLIType DataType { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue", EmitDefaultValue=true)]
        public Object DefaultValue { get; private set; }

        /// <summary>
        /// Gets or Sets SourceAttributeCode
        /// </summary>
        [DataMember(Name="sourceAttributeCode", EmitDefaultValue=true)]
        public string SourceAttributeCode { get; private set; }

        /// <summary>
        /// Gets or Sets IsConfidential
        /// </summary>
        [DataMember(Name="isConfidential", EmitDefaultValue=false)]
        public bool IsConfidential { get; private set; }

        /// <summary>
        /// Gets or Sets IsAlwaysEncrypted
        /// </summary>
        [DataMember(Name="isAlwaysEncrypted", EmitDefaultValue=false)]
        public bool IsAlwaysEncrypted { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextGenFrameworkOQLIBaseAttribute {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  SourceAttributeCode: ").Append(SourceAttributeCode).Append("\n");
            sb.Append("  IsConfidential: ").Append(IsConfidential).Append("\n");
            sb.Append("  IsAlwaysEncrypted: ").Append(IsAlwaysEncrypted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextGenFrameworkOQLIBaseAttribute);
        }

        /// <summary>
        /// Returns true if NextGenFrameworkOQLIBaseAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of NextGenFrameworkOQLIBaseAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextGenFrameworkOQLIBaseAttribute input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.SourceAttributeCode == input.SourceAttributeCode ||
                    (this.SourceAttributeCode != null &&
                    this.SourceAttributeCode.Equals(input.SourceAttributeCode))
                ) && 
                (
                    this.IsConfidential == input.IsConfidential ||
                    (this.IsConfidential != null &&
                    this.IsConfidential.Equals(input.IsConfidential))
                ) && 
                (
                    this.IsAlwaysEncrypted == input.IsAlwaysEncrypted ||
                    (this.IsAlwaysEncrypted != null &&
                    this.IsAlwaysEncrypted.Equals(input.IsAlwaysEncrypted))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.SourceAttributeCode != null)
                    hashCode = hashCode * 59 + this.SourceAttributeCode.GetHashCode();
                if (this.IsConfidential != null)
                    hashCode = hashCode * 59 + this.IsConfidential.GetHashCode();
                if (this.IsAlwaysEncrypted != null)
                    hashCode = hashCode * 59 + this.IsAlwaysEncrypted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
