/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema
    /// </summary>
    [DataContract]
    public partial class NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema :  IEquatable<NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema()
        {
        }

        /// <summary>
        /// Gets or Sets BaseSchema
        /// </summary>
        [DataMember(Name="baseSchema", EmitDefaultValue=true)]
        public NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema BaseSchema { get; private set; }

        /// <summary>
        /// Gets or Sets IdAttribute
        /// </summary>
        [DataMember(Name="idAttribute", EmitDefaultValue=true)]
        public NextGenFrameworkManagersObjectMgrSchemaIAttribute IdAttribute { get; private set; }

        /// <summary>
        /// Gets or Sets Children
        /// </summary>
        [DataMember(Name="children", EmitDefaultValue=true)]
        public List<Object> Children { get; private set; }

        /// <summary>
        /// Gets or Sets MyChildren
        /// </summary>
        [DataMember(Name="myChildren", EmitDefaultValue=true)]
        public List<Object> MyChildren { get; private set; }

        /// <summary>
        /// Gets or Sets DraftQueryInterface
        /// </summary>
        [DataMember(Name="draftQueryInterface", EmitDefaultValue=true)]
        public NextGenFrameworkManagersObjectMgrQueryIDraftQuery DraftQueryInterface { get; private set; }

        /// <summary>
        /// Gets or Sets TemplateQueryInterface
        /// </summary>
        [DataMember(Name="templateQueryInterface", EmitDefaultValue=true)]
        public NextGenFrameworkManagersObjectMgrQueryITemplateQuery TemplateQueryInterface { get; private set; }

        /// <summary>
        /// Gets or Sets DraftQueryExpressions
        /// </summary>
        [DataMember(Name="draftQueryExpressions", EmitDefaultValue=true)]
        public List<NextGenFrameworkOQLILeaf> DraftQueryExpressions { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema {\n");
            sb.Append("  BaseSchema: ").Append(BaseSchema).Append("\n");
            sb.Append("  IdAttribute: ").Append(IdAttribute).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  MyChildren: ").Append(MyChildren).Append("\n");
            sb.Append("  DraftQueryInterface: ").Append(DraftQueryInterface).Append("\n");
            sb.Append("  TemplateQueryInterface: ").Append(TemplateQueryInterface).Append("\n");
            sb.Append("  DraftQueryExpressions: ").Append(DraftQueryExpressions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema);
        }

        /// <summary>
        /// Returns true if NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextGenFrameworkManagersObjectMgrSchemaIDataObjectSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BaseSchema == input.BaseSchema ||
                    (this.BaseSchema != null &&
                    this.BaseSchema.Equals(input.BaseSchema))
                ) && 
                (
                    this.IdAttribute == input.IdAttribute ||
                    (this.IdAttribute != null &&
                    this.IdAttribute.Equals(input.IdAttribute))
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && 
                (
                    this.MyChildren == input.MyChildren ||
                    this.MyChildren != null &&
                    input.MyChildren != null &&
                    this.MyChildren.SequenceEqual(input.MyChildren)
                ) && 
                (
                    this.DraftQueryInterface == input.DraftQueryInterface ||
                    (this.DraftQueryInterface != null &&
                    this.DraftQueryInterface.Equals(input.DraftQueryInterface))
                ) && 
                (
                    this.TemplateQueryInterface == input.TemplateQueryInterface ||
                    (this.TemplateQueryInterface != null &&
                    this.TemplateQueryInterface.Equals(input.TemplateQueryInterface))
                ) && 
                (
                    this.DraftQueryExpressions == input.DraftQueryExpressions ||
                    this.DraftQueryExpressions != null &&
                    input.DraftQueryExpressions != null &&
                    this.DraftQueryExpressions.SequenceEqual(input.DraftQueryExpressions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BaseSchema != null)
                    hashCode = hashCode * 59 + this.BaseSchema.GetHashCode();
                if (this.IdAttribute != null)
                    hashCode = hashCode * 59 + this.IdAttribute.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.MyChildren != null)
                    hashCode = hashCode * 59 + this.MyChildren.GetHashCode();
                if (this.DraftQueryInterface != null)
                    hashCode = hashCode * 59 + this.DraftQueryInterface.GetHashCode();
                if (this.TemplateQueryInterface != null)
                    hashCode = hashCode * 59 + this.TemplateQueryInterface.GetHashCode();
                if (this.DraftQueryExpressions != null)
                    hashCode = hashCode * 59 + this.DraftQueryExpressions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
