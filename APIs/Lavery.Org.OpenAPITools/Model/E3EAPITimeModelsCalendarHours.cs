/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents the number of hours expected to be posted during the weak.
    /// </summary>
    [DataContract]
    public partial class E3EAPITimeModelsCalendarHours :  IEquatable<E3EAPITimeModelsCalendarHours>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPITimeModelsCalendarHours" /> class.
        /// </summary>
        /// <param name="startDate">Gets or sets inclusive low boundary of the time period when actual..</param>
        /// <param name="endDate">Gets or sets exclusive high boundary of the time period when actual..</param>
        /// <param name="sun">Gets or sets the number of hours to be posted on Sunday..</param>
        /// <param name="mon">Gets or sets the number of hours to be posted on Monday..</param>
        /// <param name="tue">Gets or sets the number of hours to be posted on Tuesday..</param>
        /// <param name="wen">Gets or sets the number of hours to be posted on Wednesday..</param>
        /// <param name="thu">Gets or sets the number of hours to be posted on Thursday..</param>
        /// <param name="fri">Gets or sets the number of hours to be posted on Friday..</param>
        /// <param name="sat">Gets or sets the number of hours to be posted on Saturday..</param>
        public E3EAPITimeModelsCalendarHours(DateTime startDate = default(DateTime), DateTime? endDate = default(DateTime?), double sun = default(double), double mon = default(double), double tue = default(double), double wen = default(double), double thu = default(double), double fri = default(double), double sat = default(double))
        {
            this.EndDate = endDate;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Sun = sun;
            this.Mon = mon;
            this.Tue = tue;
            this.Wen = wen;
            this.Thu = thu;
            this.Fri = fri;
            this.Sat = sat;
        }

        /// <summary>
        /// Gets or sets inclusive low boundary of the time period when actual.
        /// </summary>
        /// <value>Gets or sets inclusive low boundary of the time period when actual.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or sets exclusive high boundary of the time period when actual.
        /// </summary>
        /// <value>Gets or sets exclusive high boundary of the time period when actual.</value>
        [DataMember(Name="endDate", EmitDefaultValue=true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or sets the number of hours to be posted on Sunday.
        /// </summary>
        /// <value>Gets or sets the number of hours to be posted on Sunday.</value>
        [DataMember(Name="sun", EmitDefaultValue=false)]
        public double Sun { get; set; }

        /// <summary>
        /// Gets or sets the number of hours to be posted on Monday.
        /// </summary>
        /// <value>Gets or sets the number of hours to be posted on Monday.</value>
        [DataMember(Name="mon", EmitDefaultValue=false)]
        public double Mon { get; set; }

        /// <summary>
        /// Gets or sets the number of hours to be posted on Tuesday.
        /// </summary>
        /// <value>Gets or sets the number of hours to be posted on Tuesday.</value>
        [DataMember(Name="tue", EmitDefaultValue=false)]
        public double Tue { get; set; }

        /// <summary>
        /// Gets or sets the number of hours to be posted on Wednesday.
        /// </summary>
        /// <value>Gets or sets the number of hours to be posted on Wednesday.</value>
        [DataMember(Name="wen", EmitDefaultValue=false)]
        public double Wen { get; set; }

        /// <summary>
        /// Gets or sets the number of hours to be posted on Thursday.
        /// </summary>
        /// <value>Gets or sets the number of hours to be posted on Thursday.</value>
        [DataMember(Name="thu", EmitDefaultValue=false)]
        public double Thu { get; set; }

        /// <summary>
        /// Gets or sets the number of hours to be posted on Friday.
        /// </summary>
        /// <value>Gets or sets the number of hours to be posted on Friday.</value>
        [DataMember(Name="fri", EmitDefaultValue=false)]
        public double Fri { get; set; }

        /// <summary>
        /// Gets or sets the number of hours to be posted on Saturday.
        /// </summary>
        /// <value>Gets or sets the number of hours to be posted on Saturday.</value>
        [DataMember(Name="sat", EmitDefaultValue=false)]
        public double Sat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPITimeModelsCalendarHours {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Sun: ").Append(Sun).Append("\n");
            sb.Append("  Mon: ").Append(Mon).Append("\n");
            sb.Append("  Tue: ").Append(Tue).Append("\n");
            sb.Append("  Wen: ").Append(Wen).Append("\n");
            sb.Append("  Thu: ").Append(Thu).Append("\n");
            sb.Append("  Fri: ").Append(Fri).Append("\n");
            sb.Append("  Sat: ").Append(Sat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPITimeModelsCalendarHours);
        }

        /// <summary>
        /// Returns true if E3EAPITimeModelsCalendarHours instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPITimeModelsCalendarHours to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPITimeModelsCalendarHours input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != default(DateTime) &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Sun == input.Sun ||
                    (this.Sun != null &&
                    this.Sun.Equals(input.Sun))
                ) && 
                (
                    this.Mon == input.Mon ||
                    (this.Mon != null &&
                    this.Mon.Equals(input.Mon))
                ) && 
                (
                    this.Tue == input.Tue ||
                    (this.Tue != null &&
                    this.Tue.Equals(input.Tue))
                ) && 
                (
                    this.Wen == input.Wen ||
                    (this.Wen != null &&
                    this.Wen.Equals(input.Wen))
                ) && 
                (
                    this.Thu == input.Thu ||
                    (this.Thu != null &&
                    this.Thu.Equals(input.Thu))
                ) && 
                (
                    this.Fri == input.Fri ||
                    (this.Fri != null &&
                    this.Fri.Equals(input.Fri))
                ) && 
                (
                    this.Sat == input.Sat ||
                    (this.Sat != null &&
                    this.Sat.Equals(input.Sat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != default(DateTime))
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Sun != null)
                    hashCode = hashCode * 59 + this.Sun.GetHashCode();
                if (this.Mon != null)
                    hashCode = hashCode * 59 + this.Mon.GetHashCode();
                if (this.Tue != null)
                    hashCode = hashCode * 59 + this.Tue.GetHashCode();
                if (this.Wen != null)
                    hashCode = hashCode * 59 + this.Wen.GetHashCode();
                if (this.Thu != null)
                    hashCode = hashCode * 59 + this.Thu.GetHashCode();
                if (this.Fri != null)
                    hashCode = hashCode * 59 + this.Fri.GetHashCode();
                if (this.Sat != null)
                    hashCode = hashCode * 59 + this.Sat.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
