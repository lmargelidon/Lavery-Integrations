/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NextGenFrameworkManagersObjectMgrQueryIDraftQuery
    /// </summary>
    [DataContract]
    public partial class NextGenFrameworkManagersObjectMgrQueryIDraftQuery :  IEquatable<NextGenFrameworkManagersObjectMgrQueryIDraftQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextGenFrameworkManagersObjectMgrQueryIDraftQuery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public NextGenFrameworkManagersObjectMgrQueryIDraftQuery()
        {
        }

        /// <summary>
        /// Gets or Sets DraftID
        /// </summary>
        [DataMember(Name="draftID", EmitDefaultValue=true)]
        public NextGenFrameworkOQLILeaf DraftID { get; private set; }

        /// <summary>
        /// Gets or Sets DraftVersion
        /// </summary>
        [DataMember(Name="draftVersion", EmitDefaultValue=true)]
        public NextGenFrameworkOQLILeaf DraftVersion { get; private set; }

        /// <summary>
        /// Gets or Sets DraftState
        /// </summary>
        [DataMember(Name="draftState", EmitDefaultValue=true)]
        public NextGenFrameworkOQLILeaf DraftState { get; private set; }

        /// <summary>
        /// Gets or Sets DraftAccess
        /// </summary>
        [DataMember(Name="draftAccess", EmitDefaultValue=true)]
        public NextGenFrameworkOQLILeaf DraftAccess { get; private set; }

        /// <summary>
        /// Gets or Sets DraftExceptions
        /// </summary>
        [DataMember(Name="draftExceptions", EmitDefaultValue=true)]
        public NextGenFrameworkOQLILeaf DraftExceptions { get; private set; }

        /// <summary>
        /// Gets or Sets DraftMessages
        /// </summary>
        [DataMember(Name="draftMessages", EmitDefaultValue=true)]
        public NextGenFrameworkOQLILeaf DraftMessages { get; private set; }

        /// <summary>
        /// Gets or Sets DraftAudit
        /// </summary>
        [DataMember(Name="draftAudit", EmitDefaultValue=true)]
        public NextGenFrameworkOQLILeaf DraftAudit { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextGenFrameworkManagersObjectMgrQueryIDraftQuery {\n");
            sb.Append("  DraftID: ").Append(DraftID).Append("\n");
            sb.Append("  DraftVersion: ").Append(DraftVersion).Append("\n");
            sb.Append("  DraftState: ").Append(DraftState).Append("\n");
            sb.Append("  DraftAccess: ").Append(DraftAccess).Append("\n");
            sb.Append("  DraftExceptions: ").Append(DraftExceptions).Append("\n");
            sb.Append("  DraftMessages: ").Append(DraftMessages).Append("\n");
            sb.Append("  DraftAudit: ").Append(DraftAudit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextGenFrameworkManagersObjectMgrQueryIDraftQuery);
        }

        /// <summary>
        /// Returns true if NextGenFrameworkManagersObjectMgrQueryIDraftQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of NextGenFrameworkManagersObjectMgrQueryIDraftQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextGenFrameworkManagersObjectMgrQueryIDraftQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DraftID == input.DraftID ||
                    (this.DraftID != null &&
                    this.DraftID.Equals(input.DraftID))
                ) && 
                (
                    this.DraftVersion == input.DraftVersion ||
                    (this.DraftVersion != null &&
                    this.DraftVersion.Equals(input.DraftVersion))
                ) && 
                (
                    this.DraftState == input.DraftState ||
                    (this.DraftState != null &&
                    this.DraftState.Equals(input.DraftState))
                ) && 
                (
                    this.DraftAccess == input.DraftAccess ||
                    (this.DraftAccess != null &&
                    this.DraftAccess.Equals(input.DraftAccess))
                ) && 
                (
                    this.DraftExceptions == input.DraftExceptions ||
                    (this.DraftExceptions != null &&
                    this.DraftExceptions.Equals(input.DraftExceptions))
                ) && 
                (
                    this.DraftMessages == input.DraftMessages ||
                    (this.DraftMessages != null &&
                    this.DraftMessages.Equals(input.DraftMessages))
                ) && 
                (
                    this.DraftAudit == input.DraftAudit ||
                    (this.DraftAudit != null &&
                    this.DraftAudit.Equals(input.DraftAudit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DraftID != null)
                    hashCode = hashCode * 59 + this.DraftID.GetHashCode();
                if (this.DraftVersion != null)
                    hashCode = hashCode * 59 + this.DraftVersion.GetHashCode();
                if (this.DraftState != null)
                    hashCode = hashCode * 59 + this.DraftState.GetHashCode();
                if (this.DraftAccess != null)
                    hashCode = hashCode * 59 + this.DraftAccess.GetHashCode();
                if (this.DraftExceptions != null)
                    hashCode = hashCode * 59 + this.DraftExceptions.GetHashCode();
                if (this.DraftMessages != null)
                    hashCode = hashCode * 59 + this.DraftMessages.GetHashCode();
                if (this.DraftAudit != null)
                    hashCode = hashCode * 59 + this.DraftAudit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
