/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains parameters to make a get request for matters.
    /// </summary>
    [DataContract]
    public partial class E3EAPIEntityModelsEntityGetRequest :  IEquatable<E3EAPIEntityModelsEntityGetRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIEntityModelsEntityGetRequest" /> class.
        /// </summary>
        /// <param name="entityId">Gets or sets the EntityIds..</param>
        /// <param name="entityIndex">Gets or sets the EntityIndex..</param>
        /// <param name="displayName">Gets or sets the DisplayName (Entity Alias)..</param>
        /// <param name="advancedFilter">Gets or sets AdvancedFilter which allows filtering E3E.API.Entity.Models.Entity by attributes and child objects..</param>
        public E3EAPIEntityModelsEntityGetRequest(List<Guid> entityId = default(List<Guid>), int entityIndex = default(int), string displayName = default(string), E3EAPIDataObjectModelsAttributesFilterModelWithChildren advancedFilter = default(E3EAPIDataObjectModelsAttributesFilterModelWithChildren))
        {
            this.EntityId = entityId;
            this.DisplayName = displayName;
            this.AdvancedFilter = advancedFilter;
            this.EntityId = entityId;
            this.EntityIndex = entityIndex;
            this.DisplayName = displayName;
            this.AdvancedFilter = advancedFilter;
        }

        /// <summary>
        /// Gets or sets the EntityIds.
        /// </summary>
        /// <value>Gets or sets the EntityIds.</value>
        [DataMember(Name="entityId", EmitDefaultValue=true)]
        public List<Guid> EntityId { get; set; }

        /// <summary>
        /// Gets or sets the EntityIndex.
        /// </summary>
        /// <value>Gets or sets the EntityIndex.</value>
        [DataMember(Name="entityIndex", EmitDefaultValue=false)]
        public int EntityIndex { get; set; }

        /// <summary>
        /// Gets or sets the DisplayName (Entity Alias).
        /// </summary>
        /// <value>Gets or sets the DisplayName (Entity Alias).</value>
        [DataMember(Name="displayName", EmitDefaultValue=true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets AdvancedFilter which allows filtering E3E.API.Entity.Models.Entity by attributes and child objects.
        /// </summary>
        /// <value>Gets or sets AdvancedFilter which allows filtering E3E.API.Entity.Models.Entity by attributes and child objects.</value>
        [DataMember(Name="advancedFilter", EmitDefaultValue=true)]
        public E3EAPIDataObjectModelsAttributesFilterModelWithChildren AdvancedFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIEntityModelsEntityGetRequest {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityIndex: ").Append(EntityIndex).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  AdvancedFilter: ").Append(AdvancedFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIEntityModelsEntityGetRequest);
        }

        /// <summary>
        /// Returns true if E3EAPIEntityModelsEntityGetRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIEntityModelsEntityGetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIEntityModelsEntityGetRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityId == input.EntityId ||
                    this.EntityId != null &&
                    input.EntityId != null &&
                    this.EntityId.SequenceEqual(input.EntityId)
                ) && 
                (
                    this.EntityIndex == input.EntityIndex ||
                    (this.EntityIndex != null &&
                    this.EntityIndex.Equals(input.EntityIndex))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.AdvancedFilter == input.AdvancedFilter ||
                    (this.AdvancedFilter != null &&
                    this.AdvancedFilter.Equals(input.AdvancedFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityIndex != null)
                    hashCode = hashCode * 59 + this.EntityIndex.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.AdvancedFilter != null)
                    hashCode = hashCode * 59 + this.AdvancedFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            // EntityIndex (int) maximum
            if(this.EntityIndex > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityIndex, must be a value less than or equal to 2147483647.", new [] { "EntityIndex" });
            }

            // EntityIndex (int) minimum
            if(this.EntityIndex < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EntityIndex, must be a value greater than or equal to 0.", new [] { "EntityIndex" });
            }

            yield break;
        }
    }

}
