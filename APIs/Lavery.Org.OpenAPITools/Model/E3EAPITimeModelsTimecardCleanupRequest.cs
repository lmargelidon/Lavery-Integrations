/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains parameters to make a request for pending timecards cleanup.
    /// </summary>
    [DataContract]
    public partial class E3EAPITimeModelsTimecardCleanupRequest :  IEquatable<E3EAPITimeModelsTimecardCleanupRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPITimeModelsTimecardCleanupRequest" /> class.
        /// </summary>
        /// <param name="keepTimecardsWithNarrative">Gets or sets a value indicating whether timecards with Narrative populated (in addition to Work Hours) should be kept during cleanup.  If not supplied, then the behaviour will depend on Billing system option &#39;time_entry_cleanup&#39;..</param>
        /// <param name="startDate">Gets or sets the StartDate (WorkDate)..</param>
        /// <param name="endDate">Gets or sets the EndDate (WorkDate)..</param>
        /// <param name="timekeeperIndex">timekeeperIndex.</param>
        /// <param name="timekeeperNumber">timekeeperNumber.</param>
        /// <param name="timekeeperID">timekeeperID.</param>
        /// <param name="itemIds">itemIds.</param>
        /// <param name="attributesToInclude">attributesToInclude.</param>
        /// <param name="filterXOQL">filterXOQL.</param>
        /// <param name="filter">filter.</param>
        public E3EAPITimeModelsTimecardCleanupRequest(bool? keepTimecardsWithNarrative = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int timekeeperIndex = default(int), string timekeeperNumber = default(string), Guid timekeeperID = default(Guid), List<Guid> itemIds = default(List<Guid>), List<string> attributesToInclude = default(List<string>), string filterXOQL = default(string), E3EAPIQuerySJQLSJPredicateGroup filter = default(E3EAPIQuerySJQLSJPredicateGroup))
        {
            this.KeepTimecardsWithNarrative = keepTimecardsWithNarrative;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.TimekeeperNumber = timekeeperNumber;
            this.ItemIds = itemIds;
            this.AttributesToInclude = attributesToInclude;
            this.FilterXOQL = filterXOQL;
            this.Filter = filter;
            this.KeepTimecardsWithNarrative = keepTimecardsWithNarrative;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.TimekeeperIndex = timekeeperIndex;
            this.TimekeeperNumber = timekeeperNumber;
            this.TimekeeperID = timekeeperID;
            this.ItemIds = itemIds;
            this.AttributesToInclude = attributesToInclude;
            this.FilterXOQL = filterXOQL;
            this.Filter = filter;
        }

        /// <summary>
        /// Gets or sets a value indicating whether timecards with Narrative populated (in addition to Work Hours) should be kept during cleanup.  If not supplied, then the behaviour will depend on Billing system option &#39;time_entry_cleanup&#39;.
        /// </summary>
        /// <value>Gets or sets a value indicating whether timecards with Narrative populated (in addition to Work Hours) should be kept during cleanup.  If not supplied, then the behaviour will depend on Billing system option &#39;time_entry_cleanup&#39;.</value>
        [DataMember(Name="keepTimecardsWithNarrative", EmitDefaultValue=true)]
        public bool? KeepTimecardsWithNarrative { get; set; }

        /// <summary>
        /// Gets or sets the StartDate (WorkDate).
        /// </summary>
        /// <value>Gets or sets the StartDate (WorkDate).</value>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets the EndDate (WorkDate).
        /// </summary>
        /// <value>Gets or sets the EndDate (WorkDate).</value>
        [DataMember(Name="endDate", EmitDefaultValue=true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets TimekeeperIndex
        /// </summary>
        [DataMember(Name="timekeeperIndex", EmitDefaultValue=false)]
        public int TimekeeperIndex { get; set; }

        /// <summary>
        /// Gets or Sets TimekeeperNumber
        /// </summary>
        [DataMember(Name="timekeeperNumber", EmitDefaultValue=true)]
        public string TimekeeperNumber { get; set; }

        /// <summary>
        /// Gets or Sets TimekeeperID
        /// </summary>
        [DataMember(Name="timekeeperID", EmitDefaultValue=false)]
        public Guid TimekeeperID { get; set; }

        /// <summary>
        /// Gets or Sets ItemIds
        /// </summary>
        [DataMember(Name="itemIds", EmitDefaultValue=true)]
        public List<Guid> ItemIds { get; set; }

        /// <summary>
        /// Gets or Sets AttributesToInclude
        /// </summary>
        [DataMember(Name="attributesToInclude", EmitDefaultValue=true)]
        public List<string> AttributesToInclude { get; set; }

        /// <summary>
        /// Gets or Sets FilterXOQL
        /// </summary>
        [DataMember(Name="filterXOQL", EmitDefaultValue=true)]
        public string FilterXOQL { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name="filter", EmitDefaultValue=true)]
        public E3EAPIQuerySJQLSJPredicateGroup Filter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPITimeModelsTimecardCleanupRequest {\n");
            sb.Append("  KeepTimecardsWithNarrative: ").Append(KeepTimecardsWithNarrative).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TimekeeperIndex: ").Append(TimekeeperIndex).Append("\n");
            sb.Append("  TimekeeperNumber: ").Append(TimekeeperNumber).Append("\n");
            sb.Append("  TimekeeperID: ").Append(TimekeeperID).Append("\n");
            sb.Append("  ItemIds: ").Append(ItemIds).Append("\n");
            sb.Append("  AttributesToInclude: ").Append(AttributesToInclude).Append("\n");
            sb.Append("  FilterXOQL: ").Append(FilterXOQL).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPITimeModelsTimecardCleanupRequest);
        }

        /// <summary>
        /// Returns true if E3EAPITimeModelsTimecardCleanupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPITimeModelsTimecardCleanupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPITimeModelsTimecardCleanupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeepTimecardsWithNarrative == input.KeepTimecardsWithNarrative ||
                    (this.KeepTimecardsWithNarrative != null &&
                    this.KeepTimecardsWithNarrative.Equals(input.KeepTimecardsWithNarrative))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != default(DateTime) &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.TimekeeperIndex == input.TimekeeperIndex ||
                    (this.TimekeeperIndex != null &&
                    this.TimekeeperIndex.Equals(input.TimekeeperIndex))
                ) && 
                (
                    this.TimekeeperNumber == input.TimekeeperNumber ||
                    (this.TimekeeperNumber != null &&
                    this.TimekeeperNumber.Equals(input.TimekeeperNumber))
                ) && 
                (
                    this.TimekeeperID == input.TimekeeperID ||
                    (this.TimekeeperID != null &&
                    this.TimekeeperID.Equals(input.TimekeeperID))
                ) && 
                (
                    this.ItemIds == input.ItemIds ||
                    this.ItemIds != null &&
                    input.ItemIds != null &&
                    this.ItemIds.SequenceEqual(input.ItemIds)
                ) && 
                (
                    this.AttributesToInclude == input.AttributesToInclude ||
                    this.AttributesToInclude != null &&
                    input.AttributesToInclude != null &&
                    this.AttributesToInclude.SequenceEqual(input.AttributesToInclude)
                ) && 
                (
                    this.FilterXOQL == input.FilterXOQL ||
                    (this.FilterXOQL != null &&
                    this.FilterXOQL.Equals(input.FilterXOQL))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeepTimecardsWithNarrative != null)
                    hashCode = hashCode * 59 + this.KeepTimecardsWithNarrative.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != default(DateTime))
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.TimekeeperIndex != null)
                    hashCode = hashCode * 59 + this.TimekeeperIndex.GetHashCode();
                if (this.TimekeeperNumber != null)
                    hashCode = hashCode * 59 + this.TimekeeperNumber.GetHashCode();
                if (this.TimekeeperID != null)
                    hashCode = hashCode * 59 + this.TimekeeperID.GetHashCode();
                if (this.ItemIds != null)
                    hashCode = hashCode * 59 + this.ItemIds.GetHashCode();
                if (this.AttributesToInclude != null)
                    hashCode = hashCode * 59 + this.AttributesToInclude.GetHashCode();
                if (this.FilterXOQL != null)
                    hashCode = hashCode * 59 + this.FilterXOQL.GetHashCode();
                if (this.Filter != null)
                    hashCode = hashCode * 59 + this.Filter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
