/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines a predicate
    /// </summary>
    [DataContract]
    public partial class E3EAPIQuerySJQLSJPredicate :  IEquatable<E3EAPIQuerySJQLSJPredicate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIQuerySJQLSJPredicate" /> class.
        /// </summary>
        /// <param name="attribute">Gets or Sets the attribute Id. Can be \&quot;.\&quot; notated. For attributes from the joined archetypes, it should start with the ArchetypeId. Root archetype id can be omitted. e.g. MattDate.Client1.Number..</param>
        /// <param name="_operator">Gets or Sets the conditional operator..</param>
        /// <param name="operatorUnit">Gets or Sets the conditional operator unit..</param>
        /// <param name="value">Gets or Sets the value..</param>
        /// <param name="select">Gets or sets the Select statement to be used instead of the Value. May be more comoonly used with IsIn and IsNotIn operators..</param>
        public E3EAPIQuerySJQLSJPredicate(string attribute = default(string), E3EAPIQuerySJQLSJConditionalOperator _operator = default(E3EAPIQuerySJQLSJConditionalOperator), E3EAPIQuerySJQLSJConditionalOperatorUnit operatorUnit = default(E3EAPIQuerySJQLSJConditionalOperatorUnit), List<string> value = default(List<string>), E3EAPIQuerySJQLSJSelect select = default(E3EAPIQuerySJQLSJSelect))
        {
            this.Attribute = attribute;
            this.OperatorUnit = operatorUnit;
            this.Value = value;
            this.Select = select;
            this.Attribute = attribute;
            this.Operator = _operator;
            this.OperatorUnit = operatorUnit;
            this.Value = value;
            this.Select = select;
        }

        /// <summary>
        /// Gets or Sets the attribute Id. Can be \&quot;.\&quot; notated. For attributes from the joined archetypes, it should start with the ArchetypeId. Root archetype id can be omitted. e.g. MattDate.Client1.Number.
        /// </summary>
        /// <value>Gets or Sets the attribute Id. Can be \&quot;.\&quot; notated. For attributes from the joined archetypes, it should start with the ArchetypeId. Root archetype id can be omitted. e.g. MattDate.Client1.Number.</value>
        [DataMember(Name="attribute", EmitDefaultValue=true)]
        public string Attribute { get; set; }

        /// <summary>
        /// Gets or Sets the conditional operator.
        /// </summary>
        /// <value>Gets or Sets the conditional operator.</value>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public E3EAPIQuerySJQLSJConditionalOperator Operator { get; set; }

        /// <summary>
        /// Gets or Sets the conditional operator unit.
        /// </summary>
        /// <value>Gets or Sets the conditional operator unit.</value>
        [DataMember(Name="operatorUnit", EmitDefaultValue=true)]
        public E3EAPIQuerySJQLSJConditionalOperatorUnit OperatorUnit { get; set; }

        /// <summary>
        /// Gets or Sets the value.
        /// </summary>
        /// <value>Gets or Sets the value.</value>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public List<string> Value { get; set; }

        /// <summary>
        /// Gets or sets the Select statement to be used instead of the Value. May be more comoonly used with IsIn and IsNotIn operators.
        /// </summary>
        /// <value>Gets or sets the Select statement to be used instead of the Value. May be more comoonly used with IsIn and IsNotIn operators.</value>
        [DataMember(Name="select", EmitDefaultValue=true)]
        public E3EAPIQuerySJQLSJSelect Select { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIQuerySJQLSJPredicate {\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  OperatorUnit: ").Append(OperatorUnit).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Select: ").Append(Select).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIQuerySJQLSJPredicate);
        }

        /// <summary>
        /// Returns true if E3EAPIQuerySJQLSJPredicate instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIQuerySJQLSJPredicate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIQuerySJQLSJPredicate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attribute == input.Attribute ||
                    (this.Attribute != null &&
                    this.Attribute.Equals(input.Attribute))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.OperatorUnit == input.OperatorUnit ||
                    (this.OperatorUnit != null &&
                    this.OperatorUnit.Equals(input.OperatorUnit))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                ) && 
                (
                    this.Select == input.Select ||
                    (this.Select != null &&
                    this.Select.Equals(input.Select))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attribute != null)
                    hashCode = hashCode * 59 + this.Attribute.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.OperatorUnit != null)
                    hashCode = hashCode * 59 + this.OperatorUnit.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Select != null)
                    hashCode = hashCode * 59 + this.Select.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
