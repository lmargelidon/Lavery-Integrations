/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Represents a data object.
    /// </summary>
    [DataContract]
    public partial class E3EAPIDataModelsDataObject :  IEquatable<E3EAPIDataModelsDataObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIDataModelsDataObject" /> class.
        /// </summary>
        /// <param name="actions">Gets or sets the collection level actions for this object..</param>
        /// <param name="actualRowCount">Gets or sets the actual row count. (default to 0).</param>
        /// <param name="dataLoadState">Gets or sets the data load state..</param>
        /// <param name="error">Gets or sets the error in the collection level..</param>
        /// <param name="groupCount">Gets or sets the number of groups in the first level..</param>
        /// <param name="groups">Gets or sets the groups in the data object..</param>
        /// <param name="header">Gets or sets the header data..</param>
        /// <param name="id">Gets or sets the Id of the data object..</param>
        /// <param name="objectId">Gets or sets the Id of the object..</param>
        /// <param name="rowCount">Gets or sets the row count..</param>
        /// <param name="rows">Gets or sets the rows in this data object..</param>
        /// <param name="totals">Gets or sets the totals in this collection..</param>
        /// <param name="errors">Gets or sets list of errors. Contains all errors, even for not loaded rows..</param>
        /// <param name="editedGroup">Gets or sets editedGroup..</param>
        public E3EAPIDataModelsDataObject(Dictionary<string, E3EAPIDataModelsAction> actions = default(Dictionary<string, E3EAPIDataModelsAction>), int actualRowCount = 0, E3EAPIDataModelsDataLoadState dataLoadState = default(E3EAPIDataModelsDataLoadState), E3EAPIDataDataError error = default(E3EAPIDataDataError), int groupCount = default(int), Dictionary<string, E3EAPIDataModelsGroup> groups = default(Dictionary<string, E3EAPIDataModelsGroup>), E3EAPIDataModelsGroup header = default(E3EAPIDataModelsGroup), string id = default(string), string objectId = default(string), int rowCount = default(int), Dictionary<string, E3EAPIDataModelsDataRow> rows = default(Dictionary<string, E3EAPIDataModelsDataRow>), Dictionary<string, string> totals = default(Dictionary<string, string>), List<E3EAPIDataModelsErrorInfo> errors = default(List<E3EAPIDataModelsErrorInfo>), E3EAPIDataModelsGroup editedGroup = default(E3EAPIDataModelsGroup))
        {
            this.Actions = actions;
            this.Error = error;
            this.Groups = groups;
            this.Header = header;
            this.Id = id;
            this.ObjectId = objectId;
            this.Rows = rows;
            this.Totals = totals;
            this.Errors = errors;
            this.EditedGroup = editedGroup;
            this.Actions = actions;
            // use default value if no "actualRowCount" provided
            if (actualRowCount == null)
            {
                this.ActualRowCount = 0;
            }
            else
            {
                this.ActualRowCount = actualRowCount;
            }
            this.DataLoadState = dataLoadState;
            this.Error = error;
            this.GroupCount = groupCount;
            this.Groups = groups;
            this.Header = header;
            this.Id = id;
            this.ObjectId = objectId;
            this.RowCount = rowCount;
            this.Rows = rows;
            this.Totals = totals;
            this.Errors = errors;
            this.EditedGroup = editedGroup;
        }

        /// <summary>
        /// Gets or sets the collection level actions for this object.
        /// </summary>
        /// <value>Gets or sets the collection level actions for this object.</value>
        [DataMember(Name="actions", EmitDefaultValue=true)]
        public Dictionary<string, E3EAPIDataModelsAction> Actions { get; set; }

        /// <summary>
        /// Gets or sets the actual row count.
        /// </summary>
        /// <value>Gets or sets the actual row count.</value>
        [DataMember(Name="actualRowCount", EmitDefaultValue=false)]
        public int ActualRowCount { get; set; }

        /// <summary>
        /// Gets or sets the data load state.
        /// </summary>
        /// <value>Gets or sets the data load state.</value>
        [DataMember(Name="dataLoadState", EmitDefaultValue=false)]
        public E3EAPIDataModelsDataLoadState DataLoadState { get; set; }

        /// <summary>
        /// Gets or sets the error in the collection level.
        /// </summary>
        /// <value>Gets or sets the error in the collection level.</value>
        [DataMember(Name="error", EmitDefaultValue=true)]
        public E3EAPIDataDataError Error { get; set; }

        /// <summary>
        /// Gets or sets the number of groups in the first level.
        /// </summary>
        /// <value>Gets or sets the number of groups in the first level.</value>
        [DataMember(Name="groupCount", EmitDefaultValue=false)]
        public int GroupCount { get; set; }

        /// <summary>
        /// Gets or sets the groups in the data object.
        /// </summary>
        /// <value>Gets or sets the groups in the data object.</value>
        [DataMember(Name="groups", EmitDefaultValue=true)]
        public Dictionary<string, E3EAPIDataModelsGroup> Groups { get; set; }

        /// <summary>
        /// Gets or sets the header data.
        /// </summary>
        /// <value>Gets or sets the header data.</value>
        [DataMember(Name="header", EmitDefaultValue=true)]
        public E3EAPIDataModelsGroup Header { get; set; }

        /// <summary>
        /// Gets or sets the Id of the data object.
        /// </summary>
        /// <value>Gets or sets the Id of the data object.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the Id of the object.
        /// </summary>
        /// <value>Gets or sets the Id of the object.</value>
        [DataMember(Name="objectId", EmitDefaultValue=true)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or sets the row count.
        /// </summary>
        /// <value>Gets or sets the row count.</value>
        [DataMember(Name="rowCount", EmitDefaultValue=false)]
        public int RowCount { get; set; }

        /// <summary>
        /// Gets or sets the rows in this data object.
        /// </summary>
        /// <value>Gets or sets the rows in this data object.</value>
        [DataMember(Name="rows", EmitDefaultValue=true)]
        public Dictionary<string, E3EAPIDataModelsDataRow> Rows { get; set; }

        /// <summary>
        /// Gets or sets the totals in this collection.
        /// </summary>
        /// <value>Gets or sets the totals in this collection.</value>
        [DataMember(Name="totals", EmitDefaultValue=true)]
        public Dictionary<string, string> Totals { get; set; }

        /// <summary>
        /// Gets or sets list of errors. Contains all errors, even for not loaded rows.
        /// </summary>
        /// <value>Gets or sets list of errors. Contains all errors, even for not loaded rows.</value>
        [DataMember(Name="errors", EmitDefaultValue=true)]
        public List<E3EAPIDataModelsErrorInfo> Errors { get; set; }

        /// <summary>
        /// Gets or sets editedGroup.
        /// </summary>
        /// <value>Gets or sets editedGroup.</value>
        [DataMember(Name="editedGroup", EmitDefaultValue=true)]
        public E3EAPIDataModelsGroup EditedGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIDataModelsDataObject {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  ActualRowCount: ").Append(ActualRowCount).Append("\n");
            sb.Append("  DataLoadState: ").Append(DataLoadState).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  GroupCount: ").Append(GroupCount).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  RowCount: ").Append(RowCount).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  Totals: ").Append(Totals).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  EditedGroup: ").Append(EditedGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIDataModelsDataObject);
        }

        /// <summary>
        /// Returns true if E3EAPIDataModelsDataObject instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIDataModelsDataObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIDataModelsDataObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.ActualRowCount == input.ActualRowCount ||
                    (this.ActualRowCount != null &&
                    this.ActualRowCount.Equals(input.ActualRowCount))
                ) && 
                (
                    this.DataLoadState == input.DataLoadState ||
                    (this.DataLoadState != null &&
                    this.DataLoadState.Equals(input.DataLoadState))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.GroupCount == input.GroupCount ||
                    (this.GroupCount != null &&
                    this.GroupCount.Equals(input.GroupCount))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.RowCount == input.RowCount ||
                    (this.RowCount != null &&
                    this.RowCount.Equals(input.RowCount))
                ) && 
                (
                    this.Rows == input.Rows ||
                    this.Rows != null &&
                    input.Rows != null &&
                    this.Rows.SequenceEqual(input.Rows)
                ) && 
                (
                    this.Totals == input.Totals ||
                    this.Totals != null &&
                    input.Totals != null &&
                    this.Totals.SequenceEqual(input.Totals)
                ) && 
                (
                    this.Errors == input.Errors ||
                    this.Errors != null &&
                    input.Errors != null &&
                    this.Errors.SequenceEqual(input.Errors)
                ) && 
                (
                    this.EditedGroup == input.EditedGroup ||
                    (this.EditedGroup != null &&
                    this.EditedGroup.Equals(input.EditedGroup))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.ActualRowCount != null)
                    hashCode = hashCode * 59 + this.ActualRowCount.GetHashCode();
                if (this.DataLoadState != null)
                    hashCode = hashCode * 59 + this.DataLoadState.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.GroupCount != null)
                    hashCode = hashCode * 59 + this.GroupCount.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.RowCount != null)
                    hashCode = hashCode * 59 + this.RowCount.GetHashCode();
                if (this.Rows != null)
                    hashCode = hashCode * 59 + this.Rows.GetHashCode();
                if (this.Totals != null)
                    hashCode = hashCode * 59 + this.Totals.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                if (this.EditedGroup != null)
                    hashCode = hashCode * 59 + this.EditedGroup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
