/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains DMS parameters (libraries, document classes, document types, folders).
    /// </summary>
    [DataContract]
    public partial class E3EAPIAttachmentModelsDMSParameters :  IEquatable<E3EAPIAttachmentModelsDMSParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIAttachmentModelsDMSParameters" /> class.
        /// </summary>
        /// <param name="libraries">Gets or sets DMS libraries..</param>
        /// <param name="documentClasses">Gets or sets DMS document classes..</param>
        /// <param name="documentTypes">Gets or sets DMS document types..</param>
        /// <param name="folders">Gets or sets DMS folders..</param>
        /// <param name="defaultWorkspace">Gets or sets the default Workspace..</param>
        /// <param name="defaultFolder">Gets or sets the default DMS folder..</param>
        /// <param name="syncMapID">Gets or sets DMS SyncMapID..</param>
        public E3EAPIAttachmentModelsDMSParameters(List<string> libraries = default(List<string>), List<string> documentClasses = default(List<string>), List<string> documentTypes = default(List<string>), List<NextGenFrameworkManagersDMSMgrIDMSFolder> folders = default(List<NextGenFrameworkManagersDMSMgrIDMSFolder>), NextGenFrameworkManagersDMSMgrIDMSWorkspace defaultWorkspace = default(NextGenFrameworkManagersDMSMgrIDMSWorkspace), NextGenFrameworkManagersDMSMgrIDMSFolder defaultFolder = default(NextGenFrameworkManagersDMSMgrIDMSFolder), Guid syncMapID = default(Guid))
        {
            this.Libraries = libraries;
            this.DocumentClasses = documentClasses;
            this.DocumentTypes = documentTypes;
            this.Folders = folders;
            this.DefaultWorkspace = defaultWorkspace;
            this.DefaultFolder = defaultFolder;
            this.Libraries = libraries;
            this.DocumentClasses = documentClasses;
            this.DocumentTypes = documentTypes;
            this.Folders = folders;
            this.DefaultWorkspace = defaultWorkspace;
            this.DefaultFolder = defaultFolder;
            this.SyncMapID = syncMapID;
        }

        /// <summary>
        /// Gets or sets DMS libraries.
        /// </summary>
        /// <value>Gets or sets DMS libraries.</value>
        [DataMember(Name="libraries", EmitDefaultValue=true)]
        public List<string> Libraries { get; set; }

        /// <summary>
        /// Gets or sets DMS document classes.
        /// </summary>
        /// <value>Gets or sets DMS document classes.</value>
        [DataMember(Name="documentClasses", EmitDefaultValue=true)]
        public List<string> DocumentClasses { get; set; }

        /// <summary>
        /// Gets or sets DMS document types.
        /// </summary>
        /// <value>Gets or sets DMS document types.</value>
        [DataMember(Name="documentTypes", EmitDefaultValue=true)]
        public List<string> DocumentTypes { get; set; }

        /// <summary>
        /// Gets or sets DMS folders.
        /// </summary>
        /// <value>Gets or sets DMS folders.</value>
        [DataMember(Name="folders", EmitDefaultValue=true)]
        public List<NextGenFrameworkManagersDMSMgrIDMSFolder> Folders { get; set; }

        /// <summary>
        /// Gets or sets the default Workspace.
        /// </summary>
        /// <value>Gets or sets the default Workspace.</value>
        [DataMember(Name="defaultWorkspace", EmitDefaultValue=true)]
        public NextGenFrameworkManagersDMSMgrIDMSWorkspace DefaultWorkspace { get; set; }

        /// <summary>
        /// Gets or sets the default DMS folder.
        /// </summary>
        /// <value>Gets or sets the default DMS folder.</value>
        [DataMember(Name="defaultFolder", EmitDefaultValue=true)]
        public NextGenFrameworkManagersDMSMgrIDMSFolder DefaultFolder { get; set; }

        /// <summary>
        /// Gets or sets DMS SyncMapID.
        /// </summary>
        /// <value>Gets or sets DMS SyncMapID.</value>
        [DataMember(Name="syncMapID", EmitDefaultValue=false)]
        public Guid SyncMapID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIAttachmentModelsDMSParameters {\n");
            sb.Append("  Libraries: ").Append(Libraries).Append("\n");
            sb.Append("  DocumentClasses: ").Append(DocumentClasses).Append("\n");
            sb.Append("  DocumentTypes: ").Append(DocumentTypes).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  DefaultWorkspace: ").Append(DefaultWorkspace).Append("\n");
            sb.Append("  DefaultFolder: ").Append(DefaultFolder).Append("\n");
            sb.Append("  SyncMapID: ").Append(SyncMapID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIAttachmentModelsDMSParameters);
        }

        /// <summary>
        /// Returns true if E3EAPIAttachmentModelsDMSParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIAttachmentModelsDMSParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIAttachmentModelsDMSParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Libraries == input.Libraries ||
                    this.Libraries != null &&
                    input.Libraries != null &&
                    this.Libraries.SequenceEqual(input.Libraries)
                ) && 
                (
                    this.DocumentClasses == input.DocumentClasses ||
                    this.DocumentClasses != null &&
                    input.DocumentClasses != null &&
                    this.DocumentClasses.SequenceEqual(input.DocumentClasses)
                ) && 
                (
                    this.DocumentTypes == input.DocumentTypes ||
                    this.DocumentTypes != null &&
                    input.DocumentTypes != null &&
                    this.DocumentTypes.SequenceEqual(input.DocumentTypes)
                ) && 
                (
                    this.Folders == input.Folders ||
                    this.Folders != null &&
                    input.Folders != null &&
                    this.Folders.SequenceEqual(input.Folders)
                ) && 
                (
                    this.DefaultWorkspace == input.DefaultWorkspace ||
                    (this.DefaultWorkspace != null &&
                    this.DefaultWorkspace.Equals(input.DefaultWorkspace))
                ) && 
                (
                    this.DefaultFolder == input.DefaultFolder ||
                    (this.DefaultFolder != null &&
                    this.DefaultFolder.Equals(input.DefaultFolder))
                ) && 
                (
                    this.SyncMapID == input.SyncMapID ||
                    (this.SyncMapID != null &&
                    this.SyncMapID.Equals(input.SyncMapID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Libraries != null)
                    hashCode = hashCode * 59 + this.Libraries.GetHashCode();
                if (this.DocumentClasses != null)
                    hashCode = hashCode * 59 + this.DocumentClasses.GetHashCode();
                if (this.DocumentTypes != null)
                    hashCode = hashCode * 59 + this.DocumentTypes.GetHashCode();
                if (this.Folders != null)
                    hashCode = hashCode * 59 + this.Folders.GetHashCode();
                if (this.DefaultWorkspace != null)
                    hashCode = hashCode * 59 + this.DefaultWorkspace.GetHashCode();
                if (this.DefaultFolder != null)
                    hashCode = hashCode * 59 + this.DefaultFolder.GetHashCode();
                if (this.SyncMapID != null)
                    hashCode = hashCode * 59 + this.SyncMapID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
