/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Select Query
    /// </summary>
    [DataContract]
    public partial class E3EAPIQuerySJQLSJSelect :  IEquatable<E3EAPIQuerySJQLSJSelect>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="E3EAPIQuerySJQLSJSelect" /> class.
        /// </summary>
        /// <param name="archetype">Gets or Sets the archetype id for the query.</param>
        /// <param name="archetypeType">Gets or sets the Archetype Type. It can be Archetype, MetricArchetype or MetricArchetype Group.</param>
        /// <param name="top">Gets or Sets the maximum number of rows to return.</param>
        /// <param name="attributes">Gets or Sets the attributes for the select values. Can be \&quot;.\&quot; notated. For attributes from the joined archetypes, it should start with the ArchetypeId. Root archetype id can be omitted. e.g. MattDate.Client1.Number..</param>
        /// <param name="where">Gets or Sets Filter on the select query.</param>
        /// <param name="joins">Gets or Sets the Joins for the select statement.</param>
        /// <param name="sortBy">Gets or Sets the sort attributes for the select query. Can be \&quot;.\&quot; notated. For attributes from the joined archetypes, it should start with the ArchetypeId. Root archetype id can be omitted. e.g. MattDate.Client1.Number..</param>
        public E3EAPIQuerySJQLSJSelect(string archetype = default(string), E3EAPIAppObjectType archetypeType = default(E3EAPIAppObjectType), int? top = default(int?), List<string> attributes = default(List<string>), E3EAPIQuerySJQLSJPredicateGroup where = default(E3EAPIQuerySJQLSJPredicateGroup), List<E3EAPIQuerySJQLSJJoin> joins = default(List<E3EAPIQuerySJQLSJJoin>), List<E3EAPIQuerySortAttribute> sortBy = default(List<E3EAPIQuerySortAttribute>))
        {
            this.Archetype = archetype;
            this.Top = top;
            this.Attributes = attributes;
            this.Where = where;
            this.Joins = joins;
            this.SortBy = sortBy;
            this.Archetype = archetype;
            this.ArchetypeType = archetypeType;
            this.Top = top;
            this.Attributes = attributes;
            this.Where = where;
            this.Joins = joins;
            this.SortBy = sortBy;
        }

        /// <summary>
        /// Gets or Sets the archetype id for the query
        /// </summary>
        /// <value>Gets or Sets the archetype id for the query</value>
        [DataMember(Name="archetype", EmitDefaultValue=true)]
        public string Archetype { get; set; }

        /// <summary>
        /// Gets or sets the Archetype Type. It can be Archetype, MetricArchetype or MetricArchetype Group
        /// </summary>
        /// <value>Gets or sets the Archetype Type. It can be Archetype, MetricArchetype or MetricArchetype Group</value>
        [DataMember(Name="archetypeType", EmitDefaultValue=false)]
        public E3EAPIAppObjectType ArchetypeType { get; set; }

        /// <summary>
        /// Gets or Sets the maximum number of rows to return
        /// </summary>
        /// <value>Gets or Sets the maximum number of rows to return</value>
        [DataMember(Name="top", EmitDefaultValue=true)]
        public int? Top { get; set; }

        /// <summary>
        /// Gets or Sets the attributes for the select values. Can be \&quot;.\&quot; notated. For attributes from the joined archetypes, it should start with the ArchetypeId. Root archetype id can be omitted. e.g. MattDate.Client1.Number.
        /// </summary>
        /// <value>Gets or Sets the attributes for the select values. Can be \&quot;.\&quot; notated. For attributes from the joined archetypes, it should start with the ArchetypeId. Root archetype id can be omitted. e.g. MattDate.Client1.Number.</value>
        [DataMember(Name="attributes", EmitDefaultValue=true)]
        public List<string> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Filter on the select query
        /// </summary>
        /// <value>Gets or Sets Filter on the select query</value>
        [DataMember(Name="where", EmitDefaultValue=true)]
        public E3EAPIQuerySJQLSJPredicateGroup Where { get; set; }

        /// <summary>
        /// Gets or Sets the Joins for the select statement
        /// </summary>
        /// <value>Gets or Sets the Joins for the select statement</value>
        [DataMember(Name="joins", EmitDefaultValue=true)]
        public List<E3EAPIQuerySJQLSJJoin> Joins { get; set; }

        /// <summary>
        /// Gets or Sets the sort attributes for the select query. Can be \&quot;.\&quot; notated. For attributes from the joined archetypes, it should start with the ArchetypeId. Root archetype id can be omitted. e.g. MattDate.Client1.Number.
        /// </summary>
        /// <value>Gets or Sets the sort attributes for the select query. Can be \&quot;.\&quot; notated. For attributes from the joined archetypes, it should start with the ArchetypeId. Root archetype id can be omitted. e.g. MattDate.Client1.Number.</value>
        [DataMember(Name="sortBy", EmitDefaultValue=true)]
        public List<E3EAPIQuerySortAttribute> SortBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class E3EAPIQuerySJQLSJSelect {\n");
            sb.Append("  Archetype: ").Append(Archetype).Append("\n");
            sb.Append("  ArchetypeType: ").Append(ArchetypeType).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Where: ").Append(Where).Append("\n");
            sb.Append("  Joins: ").Append(Joins).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as E3EAPIQuerySJQLSJSelect);
        }

        /// <summary>
        /// Returns true if E3EAPIQuerySJQLSJSelect instances are equal
        /// </summary>
        /// <param name="input">Instance of E3EAPIQuerySJQLSJSelect to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(E3EAPIQuerySJQLSJSelect input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Archetype == input.Archetype ||
                    (this.Archetype != null &&
                    this.Archetype.Equals(input.Archetype))
                ) && 
                (
                    this.ArchetypeType == input.ArchetypeType ||
                    (this.ArchetypeType != null &&
                    this.ArchetypeType.Equals(input.ArchetypeType))
                ) && 
                (
                    this.Top == input.Top ||
                    (this.Top != null &&
                    this.Top.Equals(input.Top))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Where == input.Where ||
                    (this.Where != null &&
                    this.Where.Equals(input.Where))
                ) && 
                (
                    this.Joins == input.Joins ||
                    this.Joins != null &&
                    input.Joins != null &&
                    this.Joins.SequenceEqual(input.Joins)
                ) && 
                (
                    this.SortBy == input.SortBy ||
                    this.SortBy != null &&
                    input.SortBy != null &&
                    this.SortBy.SequenceEqual(input.SortBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Archetype != null)
                    hashCode = hashCode * 59 + this.Archetype.GetHashCode();
                if (this.ArchetypeType != null)
                    hashCode = hashCode * 59 + this.ArchetypeType.GetHashCode();
                if (this.Top != null)
                    hashCode = hashCode * 59 + this.Top.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Where != null)
                    hashCode = hashCode * 59 + this.Where.GetHashCode();
                if (this.Joins != null)
                    hashCode = hashCode * 59 + this.Joins.GetHashCode();
                if (this.SortBy != null)
                    hashCode = hashCode * 59 + this.SortBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Archetype (string) maxLength
            if(this.Archetype != null && this.Archetype.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Archetype, length must be less than 64.", new [] { "Archetype" });
            }

            // Archetype (string) minLength
            if(this.Archetype != null && this.Archetype.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Archetype, length must be greater than 0.", new [] { "Archetype" });
            }
 
            yield break;
        }
    }

}
