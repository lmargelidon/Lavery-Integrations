/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRelatedPartyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyCreateResponse</returns>
        E3EAPIRelatedPartyModelsRelatedPartyCreateResponse RelatedPartyCreateRelatedParty (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyCreateRequest e3EAPIRelatedPartyModelsRelatedPartyCreateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyCreateRequest));

        /// <summary>
        /// Creates a new RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyCreateResponse</returns>
        ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse> RelatedPartyCreateRelatedPartyWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyCreateRequest e3EAPIRelatedPartyModelsRelatedPartyCreateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyCreateRequest));
        /// <summary>
        /// Gets a new RelatedParty with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateRelatedParty.  e.g. call this method, then set whichever attributes need to be changed and then call CreateRelatedParty with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse</returns>
        E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse RelatedPartyGetNewRelatedParty (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets a new RelatedParty with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateRelatedParty.  e.g. call this method, then set whichever attributes need to be changed and then call CreateRelatedParty with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse</returns>
        ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse> RelatedPartyGetNewRelatedPartyWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets RelatedParties and returns a RelatedPartyGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedPartyId">Gets or sets the RelatedPartyIds. (optional)</param>
        /// <param name="relatedPartyIndex">Gets or sets the CftRelatedPartyIndex. (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        E3EAPIRelatedPartyModelsRelatedPartyGetResponse RelatedPartyGetRelatedParties (List<Guid> relatedPartyId = default(List<Guid>), int? relatedPartyIndex = default(int?), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets RelatedParties and returns a RelatedPartyGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedPartyId">Gets or sets the RelatedPartyIds. (optional)</param>
        /// <param name="relatedPartyIndex">Gets or sets the CftRelatedPartyIndex. (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> RelatedPartyGetRelatedPartiesWithHttpInfo (List<Guid> relatedPartyId = default(List<Guid>), int? relatedPartyIndex = default(int?), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets the schema for RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse</returns>
        E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse RelatedPartyGetRelatedPartySchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets the schema for RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse</returns>
        ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse> RelatedPartyGetRelatedPartySchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets cloned RelatedParties and returns a RelatedPartyGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        E3EAPIRelatedPartyModelsRelatedPartyGetResponse RelatedPartyModelFromRelatedParties (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets cloned RelatedParties and returns a RelatedPartyGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> RelatedPartyModelFromRelatedPartiesWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Updates a RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse</returns>
        E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse RelatedPartyUpdateRelatedParty (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest));

        /// <summary>
        /// Updates a RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse</returns>
        ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse> RelatedPartyUpdateRelatedPartyWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest));
        /// <summary>
        /// Validates one or more existing RelatedParties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyValidateRequest">The RelatedParty.MattIndex values of the RelatedParties to be validated. (optional)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyValidateResponse</returns>
        E3EAPIRelatedPartyModelsRelatedPartyValidateResponse RelatedPartyValidateRelatedParties (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyValidateRequest e3EAPIRelatedPartyModelsRelatedPartyValidateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyValidateRequest));

        /// <summary>
        /// Validates one or more existing RelatedParties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyValidateRequest">The RelatedParty.MattIndex values of the RelatedParties to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyValidateResponse</returns>
        ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse> RelatedPartyValidateRelatedPartiesWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyValidateRequest e3EAPIRelatedPartyModelsRelatedPartyValidateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyValidateRequest));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse> RelatedPartyCreateRelatedPartyAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyCreateRequest e3EAPIRelatedPartyModelsRelatedPartyCreateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyCreateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse>> RelatedPartyCreateRelatedPartyWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyCreateRequest e3EAPIRelatedPartyModelsRelatedPartyCreateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyCreateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a new RelatedParty with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateRelatedParty.  e.g. call this method, then set whichever attributes need to be changed and then call CreateRelatedParty with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse> RelatedPartyGetNewRelatedPartyAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a new RelatedParty with default values.
        /// </summary>
        /// <remarks>
        /// This method does not launch a process or add any data in 3E.  It is intended to be used with CreateRelatedParty.  e.g. call this method, then set whichever attributes need to be changed and then call CreateRelatedParty with the modified data.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse>> RelatedPartyGetNewRelatedPartyWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets RelatedParties and returns a RelatedPartyGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedPartyId">Gets or sets the RelatedPartyIds. (optional)</param>
        /// <param name="relatedPartyIndex">Gets or sets the CftRelatedPartyIndex. (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> RelatedPartyGetRelatedPartiesAsync (List<Guid> relatedPartyId = default(List<Guid>), int? relatedPartyIndex = default(int?), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets RelatedParties and returns a RelatedPartyGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedPartyId">Gets or sets the RelatedPartyIds. (optional)</param>
        /// <param name="relatedPartyIndex">Gets or sets the CftRelatedPartyIndex. (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse>> RelatedPartyGetRelatedPartiesWithHttpInfoAsync (List<Guid> relatedPartyId = default(List<Guid>), int? relatedPartyIndex = default(int?), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the schema for RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse</returns>
        System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse> RelatedPartyGetRelatedPartySchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the schema for RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse>> RelatedPartyGetRelatedPartySchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets cloned RelatedParties and returns a RelatedPartyGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> RelatedPartyModelFromRelatedPartiesAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets cloned RelatedParties and returns a RelatedPartyGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse>> RelatedPartyModelFromRelatedPartiesWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse> RelatedPartyUpdateRelatedPartyAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a RelatedParty.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse>> RelatedPartyUpdateRelatedPartyWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validates one or more existing RelatedParties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyValidateRequest">The RelatedParty.MattIndex values of the RelatedParties to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyValidateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse> RelatedPartyValidateRelatedPartiesAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyValidateRequest e3EAPIRelatedPartyModelsRelatedPartyValidateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyValidateRequest), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates one or more existing RelatedParties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyValidateRequest">The RelatedParty.MattIndex values of the RelatedParties to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse>> RelatedPartyValidateRelatedPartiesWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyValidateRequest e3EAPIRelatedPartyModelsRelatedPartyValidateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyValidateRequest), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RelatedPartyApi : IRelatedPartyApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedPartyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RelatedPartyApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedPartyApi"/> class
        /// </summary>
        /// <returns></returns>
        public RelatedPartyApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RelatedPartyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RelatedPartyApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyCreateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyCreateResponse</returns>
        public E3EAPIRelatedPartyModelsRelatedPartyCreateResponse RelatedPartyCreateRelatedParty (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyCreateRequest e3EAPIRelatedPartyModelsRelatedPartyCreateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyCreateRequest))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse> localVarResponse = RelatedPartyCreateRelatedPartyWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIRelatedPartyModelsRelatedPartyCreateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyCreateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyCreateResponse</returns>
        public ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse> RelatedPartyCreateRelatedPartyWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyCreateRequest e3EAPIRelatedPartyModelsRelatedPartyCreateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyCreateRequest))
        {

            var localVarPath = "/api/v1/relatedParty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIRelatedPartyModelsRelatedPartyCreateRequest != null && e3EAPIRelatedPartyModelsRelatedPartyCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIRelatedPartyModelsRelatedPartyCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIRelatedPartyModelsRelatedPartyCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyCreateRelatedParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyCreateResponse)));
        }

        /// <summary>
        /// Creates a new RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse> RelatedPartyCreateRelatedPartyAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyCreateRequest e3EAPIRelatedPartyModelsRelatedPartyCreateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse> localVarResponse = await RelatedPartyCreateRelatedPartyWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIRelatedPartyModelsRelatedPartyCreateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyCreateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse>> RelatedPartyCreateRelatedPartyWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyCreateRequest e3EAPIRelatedPartyModelsRelatedPartyCreateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/relatedParty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIRelatedPartyModelsRelatedPartyCreateRequest != null && e3EAPIRelatedPartyModelsRelatedPartyCreateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIRelatedPartyModelsRelatedPartyCreateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIRelatedPartyModelsRelatedPartyCreateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyCreateRelatedParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyCreateResponse)));
        }

        /// <summary>
        /// Gets a new RelatedParty with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateRelatedParty.  e.g. call this method, then set whichever attributes need to be changed and then call CreateRelatedParty with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse</returns>
        public E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse RelatedPartyGetNewRelatedParty (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse> localVarResponse = RelatedPartyGetNewRelatedPartyWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a new RelatedParty with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateRelatedParty.  e.g. call this method, then set whichever attributes need to be changed and then call CreateRelatedParty with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse</returns>
        public ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse> RelatedPartyGetNewRelatedPartyWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/relatedParty/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyGetNewRelatedParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse)));
        }

        /// <summary>
        /// Gets a new RelatedParty with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateRelatedParty.  e.g. call this method, then set whichever attributes need to be changed and then call CreateRelatedParty with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse> RelatedPartyGetNewRelatedPartyAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse> localVarResponse = await RelatedPartyGetNewRelatedPartyWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a new RelatedParty with default values. This method does not launch a process or add any data in 3E.  It is intended to be used with CreateRelatedParty.  e.g. call this method, then set whichever attributes need to be changed and then call CreateRelatedParty with the modified data.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse>> RelatedPartyGetNewRelatedPartyWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/relatedParty/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyGetNewRelatedParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyTemplateResponse)));
        }

        /// <summary>
        /// Gets RelatedParties and returns a RelatedPartyGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedPartyId">Gets or sets the RelatedPartyIds. (optional)</param>
        /// <param name="relatedPartyIndex">Gets or sets the CftRelatedPartyIndex. (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        public E3EAPIRelatedPartyModelsRelatedPartyGetResponse RelatedPartyGetRelatedParties (List<Guid> relatedPartyId = default(List<Guid>), int? relatedPartyIndex = default(int?), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> localVarResponse = RelatedPartyGetRelatedPartiesWithHttpInfo(relatedPartyId, relatedPartyIndex, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets RelatedParties and returns a RelatedPartyGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedPartyId">Gets or sets the RelatedPartyIds. (optional)</param>
        /// <param name="relatedPartyIndex">Gets or sets the CftRelatedPartyIndex. (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        public ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> RelatedPartyGetRelatedPartiesWithHttpInfo (List<Guid> relatedPartyId = default(List<Guid>), int? relatedPartyIndex = default(int?), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/relatedParty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (relatedPartyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "RelatedPartyId", relatedPartyId)); // query parameter
            if (relatedPartyIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "RelatedPartyIndex", relatedPartyIndex)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyGetRelatedParties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyGetResponse)));
        }

        /// <summary>
        /// Gets RelatedParties and returns a RelatedPartyGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedPartyId">Gets or sets the RelatedPartyIds. (optional)</param>
        /// <param name="relatedPartyIndex">Gets or sets the CftRelatedPartyIndex. (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> RelatedPartyGetRelatedPartiesAsync (List<Guid> relatedPartyId = default(List<Guid>), int? relatedPartyIndex = default(int?), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> localVarResponse = await RelatedPartyGetRelatedPartiesWithHttpInfoAsync(relatedPartyId, relatedPartyIndex, advancedFilterChildObjectsToInclude, advancedFilterAttributesToInclude, advancedFilterFilterXOQL, advancedFilterFilterPredicates, advancedFilterFilterOperator, advancedFilterFilterGroups, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets RelatedParties and returns a RelatedPartyGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedPartyId">Gets or sets the RelatedPartyIds. (optional)</param>
        /// <param name="relatedPartyIndex">Gets or sets the CftRelatedPartyIndex. (optional)</param>
        /// <param name="advancedFilterChildObjectsToInclude"> (optional)</param>
        /// <param name="advancedFilterAttributesToInclude"> (optional)</param>
        /// <param name="advancedFilterFilterXOQL"> (optional)</param>
        /// <param name="advancedFilterFilterPredicates">Gets or Sets predicates. (optional)</param>
        /// <param name="advancedFilterFilterOperator">Gets or Sets the logical operator between the group of E3E.API.Query.SJQL.SJPredicateGroup.Predicates and the E3E.API.Query.SJQL.SJPredicateGroup.Groups. (optional)</param>
        /// <param name="advancedFilterFilterGroups">Gets or Sets group of predicates based on a logical operator. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse>> RelatedPartyGetRelatedPartiesWithHttpInfoAsync (List<Guid> relatedPartyId = default(List<Guid>), int? relatedPartyIndex = default(int?), List<string> advancedFilterChildObjectsToInclude = default(List<string>), List<string> advancedFilterAttributesToInclude = default(List<string>), string advancedFilterFilterXOQL = default(string), List<E3EAPIQuerySJQLSJPredicate> advancedFilterFilterPredicates = default(List<E3EAPIQuerySJQLSJPredicate>), E3EAPIQuerySJQLSJLogicalOperator? advancedFilterFilterOperator = default(E3EAPIQuerySJQLSJLogicalOperator?), List<E3EAPIQuerySJQLSJPredicateGroup> advancedFilterFilterGroups = default(List<E3EAPIQuerySJQLSJPredicateGroup>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/relatedParty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (relatedPartyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "RelatedPartyId", relatedPartyId)); // query parameter
            if (relatedPartyIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "RelatedPartyIndex", relatedPartyIndex)); // query parameter
            if (advancedFilterChildObjectsToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.ChildObjectsToInclude", advancedFilterChildObjectsToInclude)); // query parameter
            if (advancedFilterAttributesToInclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.AttributesToInclude", advancedFilterAttributesToInclude)); // query parameter
            if (advancedFilterFilterXOQL != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.FilterXOQL", advancedFilterFilterXOQL)); // query parameter
            if (advancedFilterFilterPredicates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Predicates", advancedFilterFilterPredicates)); // query parameter
            if (advancedFilterFilterOperator != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AdvancedFilter.Filter.Operator", advancedFilterFilterOperator)); // query parameter
            if (advancedFilterFilterGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "AdvancedFilter.Filter.Groups", advancedFilterFilterGroups)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyGetRelatedParties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyGetResponse)));
        }

        /// <summary>
        /// Gets the schema for RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse</returns>
        public E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse RelatedPartyGetRelatedPartySchema (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse> localVarResponse = RelatedPartyGetRelatedPartySchemaWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the schema for RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse</returns>
        public ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse> RelatedPartyGetRelatedPartySchemaWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/relatedParty/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyGetRelatedPartySchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse)));
        }

        /// <summary>
        /// Gets the schema for RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse> RelatedPartyGetRelatedPartySchemaAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse> localVarResponse = await RelatedPartyGetRelatedPartySchemaWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the schema for RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse>> RelatedPartyGetRelatedPartySchemaWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/relatedParty/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyGetRelatedPartySchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyGetSchemaResponse)));
        }

        /// <summary>
        /// Gets cloned RelatedParties and returns a RelatedPartyGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        public E3EAPIRelatedPartyModelsRelatedPartyGetResponse RelatedPartyModelFromRelatedParties (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> localVarResponse = RelatedPartyModelFromRelatedPartiesWithHttpInfo(itemId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets cloned RelatedParties and returns a RelatedPartyGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        public ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> RelatedPartyModelFromRelatedPartiesWithHttpInfo (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/relatedParty/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyModelFromRelatedParties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyGetResponse)));
        }

        /// <summary>
        /// Gets cloned RelatedParties and returns a RelatedPartyGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> RelatedPartyModelFromRelatedPartiesAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse> localVarResponse = await RelatedPartyModelFromRelatedPartiesWithHttpInfoAsync(itemId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets cloned RelatedParties and returns a RelatedPartyGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemId"> (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse>> RelatedPartyModelFromRelatedPartiesWithHttpInfoAsync (List<string> itemId = default(List<string>), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/relatedParty/modelfrom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (itemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ItemId", itemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyModelFromRelatedParties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyGetResponse)));
        }

        /// <summary>
        /// Updates a RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest">The request details. (optional)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse</returns>
        public E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse RelatedPartyUpdateRelatedParty (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse> localVarResponse = RelatedPartyUpdateRelatedPartyWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest">The request details. (optional)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse</returns>
        public ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse> RelatedPartyUpdateRelatedPartyWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest))
        {

            var localVarPath = "/api/v1/relatedParty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest != null && e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyUpdateRelatedParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse)));
        }

        /// <summary>
        /// Updates a RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse> RelatedPartyUpdateRelatedPartyAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse> localVarResponse = await RelatedPartyUpdateRelatedPartyWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a RelatedParty. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest">The request details. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse>> RelatedPartyUpdateRelatedPartyWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/relatedParty";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest != null && e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIRelatedPartyModelsRelatedPartyUpdateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyUpdateRelatedParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyUpdateResponse)));
        }

        /// <summary>
        /// Validates one or more existing RelatedParties. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyValidateRequest">The RelatedParty.MattIndex values of the RelatedParties to be validated. (optional)</param>
        /// <returns>E3EAPIRelatedPartyModelsRelatedPartyValidateResponse</returns>
        public E3EAPIRelatedPartyModelsRelatedPartyValidateResponse RelatedPartyValidateRelatedParties (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyValidateRequest e3EAPIRelatedPartyModelsRelatedPartyValidateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyValidateRequest))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse> localVarResponse = RelatedPartyValidateRelatedPartiesWithHttpInfo(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIRelatedPartyModelsRelatedPartyValidateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validates one or more existing RelatedParties. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyValidateRequest">The RelatedParty.MattIndex values of the RelatedParties to be validated. (optional)</param>
        /// <returns>ApiResponse of E3EAPIRelatedPartyModelsRelatedPartyValidateResponse</returns>
        public ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse> RelatedPartyValidateRelatedPartiesWithHttpInfo (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyValidateRequest e3EAPIRelatedPartyModelsRelatedPartyValidateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyValidateRequest))
        {

            var localVarPath = "/api/v1/relatedParty/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIRelatedPartyModelsRelatedPartyValidateRequest != null && e3EAPIRelatedPartyModelsRelatedPartyValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIRelatedPartyModelsRelatedPartyValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIRelatedPartyModelsRelatedPartyValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyValidateRelatedParties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyValidateResponse)));
        }

        /// <summary>
        /// Validates one or more existing RelatedParties. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyValidateRequest">The RelatedParty.MattIndex values of the RelatedParties to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIRelatedPartyModelsRelatedPartyValidateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse> RelatedPartyValidateRelatedPartiesAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyValidateRequest e3EAPIRelatedPartyModelsRelatedPartyValidateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse> localVarResponse = await RelatedPartyValidateRelatedPartiesWithHttpInfoAsync(x3ESessionId, x3EUserId, acceptLanguage, e3EAPIRelatedPartyModelsRelatedPartyValidateRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validates one or more existing RelatedParties. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="e3EAPIRelatedPartyModelsRelatedPartyValidateRequest">The RelatedParty.MattIndex values of the RelatedParties to be validated. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIRelatedPartyModelsRelatedPartyValidateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse>> RelatedPartyValidateRelatedPartiesWithHttpInfoAsync (string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), E3EAPIRelatedPartyModelsRelatedPartyValidateRequest e3EAPIRelatedPartyModelsRelatedPartyValidateRequest = default(E3EAPIRelatedPartyModelsRelatedPartyValidateRequest), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/relatedParty/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (e3EAPIRelatedPartyModelsRelatedPartyValidateRequest != null && e3EAPIRelatedPartyModelsRelatedPartyValidateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(e3EAPIRelatedPartyModelsRelatedPartyValidateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = e3EAPIRelatedPartyModelsRelatedPartyValidateRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RelatedPartyValidateRelatedParties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIRelatedPartyModelsRelatedPartyValidateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIRelatedPartyModelsRelatedPartyValidateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIRelatedPartyModelsRelatedPartyValidateResponse)));
        }

    }
}
