/*
/*
 * 3E API
 *
 * The 3E Public API provides a powerful and convenient Web Services API for interacting with the 3E platform. The 3E API endpoints are a common integration point to allow programmatic interaction with the 3E business logic and data.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAttachmentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Downloads a DMS attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        E3EAPIAttachmentModelsAttachmentDownloadRequest AttachmentDownloadDMSAttachment (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Downloads a DMS attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest> AttachmentDownloadDMSAttachmentWithHttpInfo (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Downloads a File attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        E3EAPIAttachmentModelsAttachmentDownloadRequest AttachmentDownloadFileAttachment (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Downloads a File attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest> AttachmentDownloadFileAttachmentWithHttpInfo (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Downloads an IC attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncId">Gets or sets IC SyncId.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="parentItemId">Gets or sets the Id of a parent data object.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsICAttachmentDownloadRequest</returns>
        E3EAPIAttachmentModelsICAttachmentDownloadRequest AttachmentDownloadICAttachment (string syncId, string archetype, Guid parentItemId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Downloads an IC attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncId">Gets or sets IC SyncId.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="parentItemId">Gets or sets the Id of a parent data object.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsICAttachmentDownloadRequest</returns>
        ApiResponse<E3EAPIAttachmentModelsICAttachmentDownloadRequest> AttachmentDownloadICAttachmentWithHttpInfo (string syncId, string archetype, Guid parentItemId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Gets Attachments and returns a AttachmentGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemIds">Gets or sets Ids of parent data objects.</param>
        /// <param name="archetype">Gets or sets an archetype. Required for IC. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentGetResponse</returns>
        E3EAPIAttachmentModelsAttachmentGetResponse AttachmentGetAttachments (List<string> parentItemIds, string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Gets Attachments and returns a AttachmentGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemIds">Gets or sets Ids of parent data objects.</param>
        /// <param name="archetype">Gets or sets an archetype. Required for IC. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentGetResponse</returns>
        ApiResponse<E3EAPIAttachmentModelsAttachmentGetResponse> AttachmentGetAttachmentsWithHttpInfo (List<string> parentItemIds, string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Collects DMS parameters and returns DMSParametersGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archetype">Gets or sets the data object archetype. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsDMSParametersGetResponse</returns>
        E3EAPIAttachmentModelsDMSParametersGetResponse AttachmentGetDMSParameters (string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Collects DMS parameters and returns DMSParametersGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archetype">Gets or sets the data object archetype. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsDMSParametersGetResponse</returns>
        ApiResponse<E3EAPIAttachmentModelsDMSParametersGetResponse> AttachmentGetDMSParametersWithHttpInfo (string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Uploads DMS Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="library">Gets or sets DMS library.</param>
        /// <param name="documentClass">Gets or sets DMS document class.</param>
        /// <param name="documentType">Gets or sets DMS document type.</param>
        /// <param name="dMSFolder">Gets or sets a folder.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="syncMapID">Gets or sets DMS SyncMapID. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        E3EAPIAttachmentModelsAttachmentCreateResponse AttachmentUploadDMSAttachment (string library, string documentClass, string documentType, string dMSFolder, Guid parentItemId, string archetype, Guid? syncMapID = default(Guid?), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Uploads DMS Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="library">Gets or sets DMS library.</param>
        /// <param name="documentClass">Gets or sets DMS document class.</param>
        /// <param name="documentType">Gets or sets DMS document type.</param>
        /// <param name="dMSFolder">Gets or sets a folder.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="syncMapID">Gets or sets DMS SyncMapID. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadDMSAttachmentWithHttpInfo (string library, string documentClass, string documentType, string dMSFolder, Guid parentItemId, string archetype, Guid? syncMapID = default(Guid?), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Uploads File Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        E3EAPIAttachmentModelsAttachmentCreateResponse AttachmentUploadFileAttachment (Guid parentItemId, string archetype, string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Uploads File Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadFileAttachmentWithHttpInfo (Guid parentItemId, string archetype, string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        /// <summary>
        /// Uploads IC Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="process">Gets or sets a process.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype. Ignored for IC. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        E3EAPIAttachmentModelsAttachmentCreateResponse AttachmentUploadICAttachment (string process, Guid parentItemId, string archetype = default(string), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));

        /// <summary>
        /// Uploads IC Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="process">Gets or sets a process.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype. Ignored for IC. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadICAttachmentWithHttpInfo (string process, Guid parentItemId, string archetype = default(string), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Downloads a DMS attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentDownloadRequest> AttachmentDownloadDMSAttachmentAsync (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Downloads a DMS attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentDownloadRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest>> AttachmentDownloadDMSAttachmentWithHttpInfoAsync (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Downloads a File attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentDownloadRequest> AttachmentDownloadFileAttachmentAsync (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Downloads a File attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentDownloadRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest>> AttachmentDownloadFileAttachmentWithHttpInfoAsync (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Downloads an IC attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncId">Gets or sets IC SyncId.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="parentItemId">Gets or sets the Id of a parent data object.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsICAttachmentDownloadRequest</returns>
        System.Threading.Tasks.Task<E3EAPIAttachmentModelsICAttachmentDownloadRequest> AttachmentDownloadICAttachmentAsync (string syncId, string archetype, Guid parentItemId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Downloads an IC attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncId">Gets or sets IC SyncId.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="parentItemId">Gets or sets the Id of a parent data object.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsICAttachmentDownloadRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsICAttachmentDownloadRequest>> AttachmentDownloadICAttachmentWithHttpInfoAsync (string syncId, string archetype, Guid parentItemId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets Attachments and returns a AttachmentGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemIds">Gets or sets Ids of parent data objects.</param>
        /// <param name="archetype">Gets or sets an archetype. Required for IC. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentGetResponse> AttachmentGetAttachmentsAsync (List<string> parentItemIds, string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets Attachments and returns a AttachmentGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemIds">Gets or sets Ids of parent data objects.</param>
        /// <param name="archetype">Gets or sets an archetype. Required for IC. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentGetResponse>> AttachmentGetAttachmentsWithHttpInfoAsync (List<string> parentItemIds, string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Collects DMS parameters and returns DMSParametersGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archetype">Gets or sets the data object archetype. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsDMSParametersGetResponse</returns>
        System.Threading.Tasks.Task<E3EAPIAttachmentModelsDMSParametersGetResponse> AttachmentGetDMSParametersAsync (string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Collects DMS parameters and returns DMSParametersGetResponse.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archetype">Gets or sets the data object archetype. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsDMSParametersGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsDMSParametersGetResponse>> AttachmentGetDMSParametersWithHttpInfoAsync (string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Uploads DMS Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="library">Gets or sets DMS library.</param>
        /// <param name="documentClass">Gets or sets DMS document class.</param>
        /// <param name="documentType">Gets or sets DMS document type.</param>
        /// <param name="dMSFolder">Gets or sets a folder.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="syncMapID">Gets or sets DMS SyncMapID. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadDMSAttachmentAsync (string library, string documentClass, string documentType, string dMSFolder, Guid parentItemId, string archetype, Guid? syncMapID = default(Guid?), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads DMS Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="library">Gets or sets DMS library.</param>
        /// <param name="documentClass">Gets or sets DMS document class.</param>
        /// <param name="documentType">Gets or sets DMS document type.</param>
        /// <param name="dMSFolder">Gets or sets a folder.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="syncMapID">Gets or sets DMS SyncMapID. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>> AttachmentUploadDMSAttachmentWithHttpInfoAsync (string library, string documentClass, string documentType, string dMSFolder, Guid parentItemId, string archetype, Guid? syncMapID = default(Guid?), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Uploads File Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadFileAttachmentAsync (Guid parentItemId, string archetype, string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads File Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>> AttachmentUploadFileAttachmentWithHttpInfoAsync (Guid parentItemId, string archetype, string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Uploads IC Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="process">Gets or sets a process.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype. Ignored for IC. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadICAttachmentAsync (string process, Guid parentItemId, string archetype = default(string), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads IC Attachment.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="process">Gets or sets a process.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype. Ignored for IC. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>> AttachmentUploadICAttachmentWithHttpInfoAsync (string process, Guid parentItemId, string archetype = default(string), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AttachmentApi : IAttachmentApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttachmentApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class
        /// </summary>
        /// <returns></returns>
        public AttachmentApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttachmentApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Downloads a DMS attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        public E3EAPIAttachmentModelsAttachmentDownloadRequest AttachmentDownloadDMSAttachment (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest> localVarResponse = AttachmentDownloadDMSAttachmentWithHttpInfo(attachmentId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads a DMS attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        public ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest> AttachmentDownloadDMSAttachmentWithHttpInfo (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentApi->AttachmentDownloadDMSAttachment");

            var localVarPath = "/api/v1/attachment/dms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AttachmentId", attachmentId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentDownloadDMSAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentDownloadRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentDownloadRequest)));
        }

        /// <summary>
        /// Downloads a DMS attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        public async System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentDownloadRequest> AttachmentDownloadDMSAttachmentAsync (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest> localVarResponse = await AttachmentDownloadDMSAttachmentWithHttpInfoAsync(attachmentId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Downloads a DMS attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentDownloadRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest>> AttachmentDownloadDMSAttachmentWithHttpInfoAsync (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentApi->AttachmentDownloadDMSAttachment");

            var localVarPath = "/api/v1/attachment/dms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AttachmentId", attachmentId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentDownloadDMSAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentDownloadRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentDownloadRequest)));
        }

        /// <summary>
        /// Downloads a File attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        public E3EAPIAttachmentModelsAttachmentDownloadRequest AttachmentDownloadFileAttachment (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest> localVarResponse = AttachmentDownloadFileAttachmentWithHttpInfo(attachmentId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads a File attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        public ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest> AttachmentDownloadFileAttachmentWithHttpInfo (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentApi->AttachmentDownloadFileAttachment");

            var localVarPath = "/api/v1/attachment/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AttachmentId", attachmentId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentDownloadFileAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentDownloadRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentDownloadRequest)));
        }

        /// <summary>
        /// Downloads a File attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentDownloadRequest</returns>
        public async System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentDownloadRequest> AttachmentDownloadFileAttachmentAsync (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest> localVarResponse = await AttachmentDownloadFileAttachmentWithHttpInfoAsync(attachmentId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Downloads a File attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentId">Gets or sets the attachment Id.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentDownloadRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest>> AttachmentDownloadFileAttachmentWithHttpInfoAsync (Guid attachmentId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'attachmentId' is set
            if (attachmentId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentId' when calling AttachmentApi->AttachmentDownloadFileAttachment");

            var localVarPath = "/api/v1/attachment/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "AttachmentId", attachmentId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentDownloadFileAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentDownloadRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentDownloadRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentDownloadRequest)));
        }

        /// <summary>
        /// Downloads an IC attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncId">Gets or sets IC SyncId.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="parentItemId">Gets or sets the Id of a parent data object.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsICAttachmentDownloadRequest</returns>
        public E3EAPIAttachmentModelsICAttachmentDownloadRequest AttachmentDownloadICAttachment (string syncId, string archetype, Guid parentItemId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIAttachmentModelsICAttachmentDownloadRequest> localVarResponse = AttachmentDownloadICAttachmentWithHttpInfo(syncId, archetype, parentItemId, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads an IC attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncId">Gets or sets IC SyncId.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="parentItemId">Gets or sets the Id of a parent data object.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsICAttachmentDownloadRequest</returns>
        public ApiResponse<E3EAPIAttachmentModelsICAttachmentDownloadRequest> AttachmentDownloadICAttachmentWithHttpInfo (string syncId, string archetype, Guid parentItemId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
            // verify the required parameter 'syncId' is set
            if (syncId == null)
                throw new ApiException(400, "Missing required parameter 'syncId' when calling AttachmentApi->AttachmentDownloadICAttachment");
            // verify the required parameter 'archetype' is set
            if (archetype == null)
                throw new ApiException(400, "Missing required parameter 'archetype' when calling AttachmentApi->AttachmentDownloadICAttachment");
            // verify the required parameter 'parentItemId' is set
            if (parentItemId == null)
                throw new ApiException(400, "Missing required parameter 'parentItemId' when calling AttachmentApi->AttachmentDownloadICAttachment");

            var localVarPath = "/api/v1/attachment/ic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (syncId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SyncId", syncId)); // query parameter
            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (parentItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentItemId", parentItemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentDownloadICAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsICAttachmentDownloadRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsICAttachmentDownloadRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsICAttachmentDownloadRequest)));
        }

        /// <summary>
        /// Downloads an IC attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncId">Gets or sets IC SyncId.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="parentItemId">Gets or sets the Id of a parent data object.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsICAttachmentDownloadRequest</returns>
        public async System.Threading.Tasks.Task<E3EAPIAttachmentModelsICAttachmentDownloadRequest> AttachmentDownloadICAttachmentAsync (string syncId, string archetype, Guid parentItemId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIAttachmentModelsICAttachmentDownloadRequest> localVarResponse = await AttachmentDownloadICAttachmentWithHttpInfoAsync(syncId, archetype, parentItemId, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Downloads an IC attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncId">Gets or sets IC SyncId.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="parentItemId">Gets or sets the Id of a parent data object.</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsICAttachmentDownloadRequest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsICAttachmentDownloadRequest>> AttachmentDownloadICAttachmentWithHttpInfoAsync (string syncId, string archetype, Guid parentItemId, string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'syncId' is set
            if (syncId == null)
                throw new ApiException(400, "Missing required parameter 'syncId' when calling AttachmentApi->AttachmentDownloadICAttachment");
            // verify the required parameter 'archetype' is set
            if (archetype == null)
                throw new ApiException(400, "Missing required parameter 'archetype' when calling AttachmentApi->AttachmentDownloadICAttachment");
            // verify the required parameter 'parentItemId' is set
            if (parentItemId == null)
                throw new ApiException(400, "Missing required parameter 'parentItemId' when calling AttachmentApi->AttachmentDownloadICAttachment");

            var localVarPath = "/api/v1/attachment/ic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (syncId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SyncId", syncId)); // query parameter
            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (parentItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentItemId", parentItemId)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentDownloadICAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsICAttachmentDownloadRequest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsICAttachmentDownloadRequest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsICAttachmentDownloadRequest)));
        }

        /// <summary>
        /// Gets Attachments and returns a AttachmentGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemIds">Gets or sets Ids of parent data objects.</param>
        /// <param name="archetype">Gets or sets an archetype. Required for IC. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentGetResponse</returns>
        public E3EAPIAttachmentModelsAttachmentGetResponse AttachmentGetAttachments (List<string> parentItemIds, string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentGetResponse> localVarResponse = AttachmentGetAttachmentsWithHttpInfo(parentItemIds, archetype, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets Attachments and returns a AttachmentGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemIds">Gets or sets Ids of parent data objects.</param>
        /// <param name="archetype">Gets or sets an archetype. Required for IC. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentGetResponse</returns>
        public ApiResponse<E3EAPIAttachmentModelsAttachmentGetResponse> AttachmentGetAttachmentsWithHttpInfo (List<string> parentItemIds, string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
            // verify the required parameter 'parentItemIds' is set
            if (parentItemIds == null)
                throw new ApiException(400, "Missing required parameter 'parentItemIds' when calling AttachmentApi->AttachmentGetAttachments");

            var localVarPath = "/api/v1/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ParentItemIds", parentItemIds)); // query parameter
            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentGetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentGetResponse)));
        }

        /// <summary>
        /// Gets Attachments and returns a AttachmentGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemIds">Gets or sets Ids of parent data objects.</param>
        /// <param name="archetype">Gets or sets an archetype. Required for IC. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentGetResponse> AttachmentGetAttachmentsAsync (List<string> parentItemIds, string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentGetResponse> localVarResponse = await AttachmentGetAttachmentsWithHttpInfoAsync(parentItemIds, archetype, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets Attachments and returns a AttachmentGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemIds">Gets or sets Ids of parent data objects.</param>
        /// <param name="archetype">Gets or sets an archetype. Required for IC. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentGetResponse>> AttachmentGetAttachmentsWithHttpInfoAsync (List<string> parentItemIds, string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'parentItemIds' is set
            if (parentItemIds == null)
                throw new ApiException(400, "Missing required parameter 'parentItemIds' when calling AttachmentApi->AttachmentGetAttachments");

            var localVarPath = "/api/v1/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentItemIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ParentItemIds", parentItemIds)); // query parameter
            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentGetAttachments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentGetResponse)));
        }

        /// <summary>
        /// Collects DMS parameters and returns DMSParametersGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archetype">Gets or sets the data object archetype. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsDMSParametersGetResponse</returns>
        public E3EAPIAttachmentModelsDMSParametersGetResponse AttachmentGetDMSParameters (string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIAttachmentModelsDMSParametersGetResponse> localVarResponse = AttachmentGetDMSParametersWithHttpInfo(archetype, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Collects DMS parameters and returns DMSParametersGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archetype">Gets or sets the data object archetype. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsDMSParametersGetResponse</returns>
        public ApiResponse<E3EAPIAttachmentModelsDMSParametersGetResponse> AttachmentGetDMSParametersWithHttpInfo (string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {

            var localVarPath = "/api/v1/attachment/dms/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentGetDMSParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsDMSParametersGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsDMSParametersGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsDMSParametersGetResponse)));
        }

        /// <summary>
        /// Collects DMS parameters and returns DMSParametersGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archetype">Gets or sets the data object archetype. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsDMSParametersGetResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIAttachmentModelsDMSParametersGetResponse> AttachmentGetDMSParametersAsync (string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIAttachmentModelsDMSParametersGetResponse> localVarResponse = await AttachmentGetDMSParametersWithHttpInfoAsync(archetype, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Collects DMS parameters and returns DMSParametersGetResponse. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archetype">Gets or sets the data object archetype. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsDMSParametersGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsDMSParametersGetResponse>> AttachmentGetDMSParametersWithHttpInfoAsync (string archetype = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/attachment/dms/parameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentGetDMSParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsDMSParametersGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsDMSParametersGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsDMSParametersGetResponse)));
        }

        /// <summary>
        /// Uploads DMS Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="library">Gets or sets DMS library.</param>
        /// <param name="documentClass">Gets or sets DMS document class.</param>
        /// <param name="documentType">Gets or sets DMS document type.</param>
        /// <param name="dMSFolder">Gets or sets a folder.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="syncMapID">Gets or sets DMS SyncMapID. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        public E3EAPIAttachmentModelsAttachmentCreateResponse AttachmentUploadDMSAttachment (string library, string documentClass, string documentType, string dMSFolder, Guid parentItemId, string archetype, Guid? syncMapID = default(Guid?), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> localVarResponse = AttachmentUploadDMSAttachmentWithHttpInfo(library, documentClass, documentType, dMSFolder, parentItemId, archetype, syncMapID, subFolder, description, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads DMS Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="library">Gets or sets DMS library.</param>
        /// <param name="documentClass">Gets or sets DMS document class.</param>
        /// <param name="documentType">Gets or sets DMS document type.</param>
        /// <param name="dMSFolder">Gets or sets a folder.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="syncMapID">Gets or sets DMS SyncMapID. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        public ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadDMSAttachmentWithHttpInfo (string library, string documentClass, string documentType, string dMSFolder, Guid parentItemId, string archetype, Guid? syncMapID = default(Guid?), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
            // verify the required parameter 'library' is set
            if (library == null)
                throw new ApiException(400, "Missing required parameter 'library' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'documentClass' is set
            if (documentClass == null)
                throw new ApiException(400, "Missing required parameter 'documentClass' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'dMSFolder' is set
            if (dMSFolder == null)
                throw new ApiException(400, "Missing required parameter 'dMSFolder' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'parentItemId' is set
            if (parentItemId == null)
                throw new ApiException(400, "Missing required parameter 'parentItemId' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'archetype' is set
            if (archetype == null)
                throw new ApiException(400, "Missing required parameter 'archetype' when calling AttachmentApi->AttachmentUploadDMSAttachment");

            var localVarPath = "/api/v1/attachment/dms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (library != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Library", library)); // query parameter
            if (documentClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DocumentClass", documentClass)); // query parameter
            if (documentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DocumentType", documentType)); // query parameter
            if (dMSFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DMSFolder", dMSFolder)); // query parameter
            if (syncMapID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SyncMapID", syncMapID)); // query parameter
            if (subFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubFolder", subFolder)); // query parameter
            if (parentItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentItemId", parentItemId)); // query parameter
            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Description", description)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentUploadDMSAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentCreateResponse)));
        }

        /// <summary>
        /// Uploads DMS Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="library">Gets or sets DMS library.</param>
        /// <param name="documentClass">Gets or sets DMS document class.</param>
        /// <param name="documentType">Gets or sets DMS document type.</param>
        /// <param name="dMSFolder">Gets or sets a folder.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="syncMapID">Gets or sets DMS SyncMapID. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadDMSAttachmentAsync (string library, string documentClass, string documentType, string dMSFolder, Guid parentItemId, string archetype, Guid? syncMapID = default(Guid?), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> localVarResponse = await AttachmentUploadDMSAttachmentWithHttpInfoAsync(library, documentClass, documentType, dMSFolder, parentItemId, archetype, syncMapID, subFolder, description, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads DMS Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="library">Gets or sets DMS library.</param>
        /// <param name="documentClass">Gets or sets DMS document class.</param>
        /// <param name="documentType">Gets or sets DMS document type.</param>
        /// <param name="dMSFolder">Gets or sets a folder.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="syncMapID">Gets or sets DMS SyncMapID. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>> AttachmentUploadDMSAttachmentWithHttpInfoAsync (string library, string documentClass, string documentType, string dMSFolder, Guid parentItemId, string archetype, Guid? syncMapID = default(Guid?), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'library' is set
            if (library == null)
                throw new ApiException(400, "Missing required parameter 'library' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'documentClass' is set
            if (documentClass == null)
                throw new ApiException(400, "Missing required parameter 'documentClass' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'documentType' is set
            if (documentType == null)
                throw new ApiException(400, "Missing required parameter 'documentType' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'dMSFolder' is set
            if (dMSFolder == null)
                throw new ApiException(400, "Missing required parameter 'dMSFolder' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'parentItemId' is set
            if (parentItemId == null)
                throw new ApiException(400, "Missing required parameter 'parentItemId' when calling AttachmentApi->AttachmentUploadDMSAttachment");
            // verify the required parameter 'archetype' is set
            if (archetype == null)
                throw new ApiException(400, "Missing required parameter 'archetype' when calling AttachmentApi->AttachmentUploadDMSAttachment");

            var localVarPath = "/api/v1/attachment/dms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (library != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Library", library)); // query parameter
            if (documentClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DocumentClass", documentClass)); // query parameter
            if (documentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DocumentType", documentType)); // query parameter
            if (dMSFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DMSFolder", dMSFolder)); // query parameter
            if (syncMapID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SyncMapID", syncMapID)); // query parameter
            if (subFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubFolder", subFolder)); // query parameter
            if (parentItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentItemId", parentItemId)); // query parameter
            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Description", description)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentUploadDMSAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentCreateResponse)));
        }

        /// <summary>
        /// Uploads File Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        public E3EAPIAttachmentModelsAttachmentCreateResponse AttachmentUploadFileAttachment (Guid parentItemId, string archetype, string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> localVarResponse = AttachmentUploadFileAttachmentWithHttpInfo(parentItemId, archetype, subFolder, description, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads File Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        public ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadFileAttachmentWithHttpInfo (Guid parentItemId, string archetype, string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
            // verify the required parameter 'parentItemId' is set
            if (parentItemId == null)
                throw new ApiException(400, "Missing required parameter 'parentItemId' when calling AttachmentApi->AttachmentUploadFileAttachment");
            // verify the required parameter 'archetype' is set
            if (archetype == null)
                throw new ApiException(400, "Missing required parameter 'archetype' when calling AttachmentApi->AttachmentUploadFileAttachment");

            var localVarPath = "/api/v1/attachment/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubFolder", subFolder)); // query parameter
            if (parentItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentItemId", parentItemId)); // query parameter
            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Description", description)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentUploadFileAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentCreateResponse)));
        }

        /// <summary>
        /// Uploads File Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadFileAttachmentAsync (Guid parentItemId, string archetype, string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> localVarResponse = await AttachmentUploadFileAttachmentWithHttpInfoAsync(parentItemId, archetype, subFolder, description, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads File Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype.</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>> AttachmentUploadFileAttachmentWithHttpInfoAsync (Guid parentItemId, string archetype, string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'parentItemId' is set
            if (parentItemId == null)
                throw new ApiException(400, "Missing required parameter 'parentItemId' when calling AttachmentApi->AttachmentUploadFileAttachment");
            // verify the required parameter 'archetype' is set
            if (archetype == null)
                throw new ApiException(400, "Missing required parameter 'archetype' when calling AttachmentApi->AttachmentUploadFileAttachment");

            var localVarPath = "/api/v1/attachment/file";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubFolder", subFolder)); // query parameter
            if (parentItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentItemId", parentItemId)); // query parameter
            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Description", description)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentUploadFileAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentCreateResponse)));
        }

        /// <summary>
        /// Uploads IC Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="process">Gets or sets a process.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype. Ignored for IC. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        public E3EAPIAttachmentModelsAttachmentCreateResponse AttachmentUploadICAttachment (string process, Guid parentItemId, string archetype = default(string), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> localVarResponse = AttachmentUploadICAttachmentWithHttpInfo(process, parentItemId, archetype, subFolder, description, x3ESessionId, x3EUserId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads IC Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="process">Gets or sets a process.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype. Ignored for IC. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <returns>ApiResponse of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        public ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadICAttachmentWithHttpInfo (string process, Guid parentItemId, string archetype = default(string), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string))
        {
            // verify the required parameter 'process' is set
            if (process == null)
                throw new ApiException(400, "Missing required parameter 'process' when calling AttachmentApi->AttachmentUploadICAttachment");
            // verify the required parameter 'parentItemId' is set
            if (parentItemId == null)
                throw new ApiException(400, "Missing required parameter 'parentItemId' when calling AttachmentApi->AttachmentUploadICAttachment");

            var localVarPath = "/api/v1/attachment/ic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Process", process)); // query parameter
            if (subFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubFolder", subFolder)); // query parameter
            if (parentItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentItemId", parentItemId)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Description", description)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentUploadICAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentCreateResponse)));
        }

        /// <summary>
        /// Uploads IC Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="process">Gets or sets a process.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype. Ignored for IC. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of E3EAPIAttachmentModelsAttachmentCreateResponse</returns>
        public async System.Threading.Tasks.Task<E3EAPIAttachmentModelsAttachmentCreateResponse> AttachmentUploadICAttachmentAsync (string process, Guid parentItemId, string archetype = default(string), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse> localVarResponse = await AttachmentUploadICAttachmentWithHttpInfoAsync(process, parentItemId, archetype, subFolder, description, x3ESessionId, x3EUserId, acceptLanguage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads IC Attachment. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="process">Gets or sets a process.</param>
        /// <param name="parentItemId">Gets or sets a parent item id.</param>
        /// <param name="archetype">Gets or sets an archetype. Ignored for IC. (optional)</param>
        /// <param name="subFolder">Gets or sets a subfolder. (optional)</param>
        /// <param name="description">Gets or sets a description. (optional)</param>
        /// <param name="x3ESessionId">The user&#39;s session identifier (optional, default to &quot;e6f862be-06ae-434e-bf07-54888f552016&quot;)</param>
        /// <param name="x3EUserId">The unique user identifier - this is only allowed in conjunction with the Integration scope for applications like EIF.  A forbidden response will be returned if this scope is not present (optional)</param>
        /// <param name="acceptLanguage">Preferred language code of the request (en-GB, en-US, fr-FR). Defaults to the user&#39;s 3E language assignment which can be retrieved by the session endpoint (optional, default to &quot;DEFAULT&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (E3EAPIAttachmentModelsAttachmentCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>> AttachmentUploadICAttachmentWithHttpInfoAsync (string process, Guid parentItemId, string archetype = default(string), string subFolder = default(string), string description = default(string), string x3ESessionId = default(string), string x3EUserId = default(string), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'process' is set
            if (process == null)
                throw new ApiException(400, "Missing required parameter 'process' when calling AttachmentApi->AttachmentUploadICAttachment");
            // verify the required parameter 'parentItemId' is set
            if (parentItemId == null)
                throw new ApiException(400, "Missing required parameter 'parentItemId' when calling AttachmentApi->AttachmentUploadICAttachment");

            var localVarPath = "/api/v1/attachment/ic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (archetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Archetype", archetype)); // query parameter
            if (process != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Process", process)); // query parameter
            if (subFolder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SubFolder", subFolder)); // query parameter
            if (parentItemId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ParentItemId", parentItemId)); // query parameter
            if (description != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Description", description)); // query parameter
            if (x3ESessionId != null) localVarHeaderParams.Add("X-3E-SessionId", this.Configuration.ApiClient.ParameterToString(x3ESessionId)); // header parameter
            if (x3EUserId != null) localVarHeaderParams.Add("X-3E-UserId", this.Configuration.ApiClient.ParameterToString(x3EUserId)); // header parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", this.Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachmentUploadICAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<E3EAPIAttachmentModelsAttachmentCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (E3EAPIAttachmentModelsAttachmentCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(E3EAPIAttachmentModelsAttachmentCreateResponse)));
        }

    }
}
